{"version":3,"sources":["webpack://Incremancer/./src/angularzombie.ts","webpack://Incremancer/./src/bloodparts.ts","webpack://Incremancer/./src/classes/creatureclasses.ts","webpack://Incremancer/./src/classes/gameobject.ts","webpack://Incremancer/./src/classes/humanclasses.ts","webpack://Incremancer/./src/creaturefactory.ts","webpack://Incremancer/./src/creatures.ts","webpack://Incremancer/./src/gamemodel.ts","webpack://Incremancer/./src/graveyard.ts","webpack://Incremancer/./src/humans.ts","webpack://Incremancer/./src/internal.ts","webpack://Incremancer/./src/partfactory.ts","webpack://Incremancer/./src/skeleton.ts","webpack://Incremancer/./src/spells.ts","webpack://Incremancer/./src/trophies.ts","webpack://Incremancer/./src/upgrades.ts","webpack://Incremancer/./src/utilsfunctions.ts","webpack://Incremancer/./src/zmmap.ts","webpack://Incremancer/./src/zombiemancer.ts","webpack://Incremancer/./src/zombies.ts","webpack://Incremancer/webpack/bootstrap","webpack://Incremancer/webpack/startup"],"names":["angular","module","filter","format2Places","formatWhole","config","$compileProvider","aHrefSanitizationWhitelist","debugInfoEnabled","controller","$scope","$interval","$document","skeleton","Skeleton","spells","Spells","partFactory","PartFactory","creatureFactory","CreatureFactory","upgrades","Upgrades","trophies","Trophies","zm","this","update","updateTime","Date","getTime","timeDiff","model","updateMessages","innerUpdate","Math","min","max","lastUpdate","GameModel","getInstance","persistent","keysPressed","KeysPressed","files","messageTimer","message","sidePanels","currentShopFilter","currentConstructionFilter","graveyardTab","trophyTab","factoryTab","factoryStats","moveTooltip","moveToolTip","closeSidePanels","options","graveyard","runesmith","prestige","construction","shop","open","factory","levelSelect","shown","openSidePanel","type","filterShop","filterConstruction","generators","updateDelays","prestigeUpgrades","upgrade","cap","currentRank","push","downloadSaveGame","graveyardTabSelect","tab","getTrophyList","trophyTabSelect","trophy","owned","getTrophyTotals","getUpgrades","getAvailableConstructions","getCompletedConstructions","resetGame","confirm","resetData","addBoneCollector","getEnergyRate","persistentData","boneCollectors","subtractBoneCollector","setHarpies","number","harpies","setGraveyardZombies","maxGraveyardZombies","graveyardZombies","floor","energyMax","zombieCost","upgradePrice","purchasePrice","delays","changeFactoryTab","creatures","buyGenerator","generator","shift","purchaseMaxGenerators","purchaseGenerator","generatorPrice","creaturePrice","creature","creatureLevelPrice","levelPrice","creaturePercent","round","parts","creatureLevelPercent","buyCreature","startBuilding","creatureTooExpensive","canAffordCreature","creatureButtonText","building","creatureLevelButtonText","canLevelCreature","level","canBuildCreature","creaturesBuildingCount","creatureCount","creatureLimit","levelCreature","autoBuild","autobuild","creatureAutoBuildNumber","creatureStats","i","generatorsApplied","length","id","time","timeLeft","toFixed","levelsPerPage","levels","levelRanges","start","showButton","allTimeHighestLevel","show","levelInfo","populate","selectRange","range","select","startLevel","addToHomeScreen","deferredPrompt","constructionPercent","currentConstruction","timeRemaining","updateConstructionUpgrades","startConstruction","playPauseConstruction","cancelConstruction","upgradeSubtitle","types","energyRate","effect","energyCap","bloodCap","bloodStoragePC","bloodGainPC","brainsGainPC","bonesGainPC","partsGainPC","brainsStoragePC","energyCost","brainsCap","damage","speed","health","brainRecoverChance","riseFromTheDeadChance","infectedBite","infectedBlast","boneCollectorCapacity","zombieDmgPC","zombieHealthPC","bonesRate","brainsRate","plagueDamage","spitDistance","blastHealing","plagueArmor","monsterLimit","runicSyphon","gigazombies","bulletproof","harpySpeed","harpyBombs","tankBuster","spikeDelay","currentRankConstruction","upgradeTooExpensive","canAffordGenerator","canAffordUpgrade","requiredForUpgrade","cost","costType","costs","energy","blood","brains","bones","prestigePoints","prestigePointsToSpend","purchaseText","amount","upgradeMaxAffordable","price","upgradeMaxPrice","costTranslate","buyUpgrade","purchaseMaxUpgrades","purchaseUpgrade","upgradeStatInfo","displayStatValue","startGame","nextLevel","toggleAutoStart","autoStart","toggleResolution","resolution","setResolution","getResolution","toggleZoomButtons","zoomButtons","zoom","resetZoom","centerGameContainer","toggleShowFps","showfps","toggleParticles","particles","isShowPrestige","prestigePointsEarned","doPrestige","constructionLeadsTo","howToPlay","messageQueue","infusionAmount","infusionMax","infuseRune","rune","shatterPercent","shatterBloodCost","shatterSatiate","runetype","canShatter","doShatter","shatterEffect","infuseButtonText","energyPercent","bloodPercent","bloodMax","brainsPercent","brainsMax","costAboveCap","upgradeButtonText","upgradePercent","skeletonTimer","skeletonMenu","isShown","equipped","updateEquippedItems","setTimeout","elements","document","getElementsByClassName","acceptOffer","anotherOffer","skeletons","xpRate","xpPercent","xp","xpForNextLevel","isAlive","timer","ceil","helmetItems","items","q","s","lootPositions","helmet","name","row2","swordItems","sword","chestItems","chest","shieldItems","shield","row3","gloveItems","gloves","legItems","legs","bootItems","boots","inventoryItems","sort","a","b","r","l","itemName","item","getLootName","itemSubName","rarity","common","itemType","rare","epic","legendary","itemStats","getLootStats","itemEffects","getSpecialEffects","itemClass","getLootClass","itemById","forEach","itemDropped","itemId","target","draggedItem","destroyItem","applyUpgrades","equipItem","itemClicked","trashAll","xpForItems","destroyAllItems","ready","updatePromise","angularModel","directive","templateUrl","restrict","link","scope","element","attrs","onChangeHandler","$eval","customOnChange","on","off","$rootScope","el","draggableItem","attr","bind","e","getElementById","classList","toggle","dataTransfer","setData","rect","getBoundingClientRect","setDragImage","width","height","$emit","style","opacity","preventDefault","dropEffect","contains","parentElement","addClass","removeClass","stopPropagation","data","getData","cssClass","remove","$on","result","add","Blood","smoke","Smoke","PrestigePoints","bullets","Bullets","exclamations","Exclamations","blasts","Blasts","fragments","Fragments","Particles","instance","initialize","zmMap","ZmMap","create","tex","GameObject","gameModel","container","setup","PIXI","Container","Texture","from","foregroundContainer","addChild","targetElement","animElement","visible","x","y","gameContainer","scale","sprites","updatePart","sprite","vector","normalizeVector","xDiff","xSpeed","yDiff","ySpeed","fastDistance","newPart","getSprite","set","SpritePool","maxParts","partCounter","partsPerSplatter","ecoPartsPerSplatter","gravity","spraySpeed","fadeSpeed","visibleParts","viewableArea","getTexture","color","blast","createElement","blastCtx","getContext","fillStyle","fillRect","backgroundSpriteContainer","texture","plagueTexture","Fragment","random","hitFloor","alpha","plague","hideParticle","newSplatter","newPlagueSplatter","fadeTime","rotSpeed","collector","collected","discardedSprites","uncollected","fadeBones","Bones","removeChild","Bone","slice","uncollectedBones","rotation","pop","Sprite","newBones","constructions","maxSprites","healTexture","exclamationTexture","radioTexture","fireTexture","shieldTexture","poisonTexture","Exclamation","anchor","newIcon","displayTime","hasIcon","newHealing","newExclamation","newRadio","newFire","newShield","newPoison","updateSprite","rocket","fireball","source","hitbox","zombies","Zombies","humans","Humans","Graveyard","army","Army","getFireballTexture","radgrad","createRadialGradient","addColorStop","fireballTexture","characterContainer","Bullet","inflictPlague","damageHuman","burnHuman","bulletReflect","newBullet","damageGraveyard","droneExplosion","zombie","damageZombie","human","zIndex","tint","xVector","yVector","ax","abs","ay","ratio","atan2","discardSprite","newBlast","newCloud","newDroneBlast","newDroneCloud","allowTint","sizeVariance","size","shadowBlur","shadowColor","app","renderer","gameObject","newSmoke","variance","newFireSmoke","newZombieSpawnCloud","newFragmentExplosion","CreatureState","currentDirection","zombieId","lastKnownBuilding","maxSpeed","regenTimer","creatureType","scaling","attackDamage","speedMultiplier","immuneToBurns","textureSet","down","up","left","right","dead","CharacterObject","Creature","collisionX","collisionY","collisionWidth","collisionHeight","TilingSprite","Wall","Building","entrance","attack","scan","burnTick","ability","dogStun","CharacterTimers","burning","infected","CharacterFlags","textures","maxHealth","targetVector","burnDamage","flags","reset","currentPoi","AnimatedSprite","HumanState","yOffset","Text","VIPText","flee","standing","plagueTick","healTick","HumanTimers","dog","doctor","tank","vip","torchBearer","HumanFlags","speedMod","plagueTicks","visionDistance","Human","spawnedSavedCreatures","earthGolem","airGolem","fireGolem","waterGolem","creatureScaling","creatureCostScaling","Creatures","spawnCreature","creatureLevels","baseCost","pow","count","creatureAutobuild","updateAutoBuild","resetLevels","baseHealth","golemHealthPCMod","baseDamage","golemDamagePCMod","spawnSavedCreatures","creaturesSpawned","savedCreatures","c","t","thisLevel","description","aliveCreatures","aliveZombies","graveyardAttackers","aliveHumans","moveTargetDistance","attackDistance","attackSpeed","targetDistance","currId","scanTime","creatureTypes","golemTextures","directions","burnTickTimer","smokeTimer","magnitude","searchClosestTarget","updateBurns","updateZombieRegen","causePlagueExplosion","healZombie","map","monsterFactory","state","lookingForTarget","bulletproofChance","deadTexture","animationSpeed","position","play","updateCreature","runeEffects","healthRegen","golemTaunt","golemHeal","golemFireball","movingToTarget","distanceToHumanTarget","attackingTarget","updateCreatureSpeed","distanceToTarget","calculateDamage","burningSpeedMod","getCreatureDirection","changeTextureDirection","direction","howDoIGetToMyTarget","critChance","critDamage","zombieTarget","healingDone","fireBalls","storageName","kongregate","playFabId","titleId","hidden","autoShatter","energySpellMultiplier","bonesPCMod","partsPCMod","bloodPCMod","bloodStorePCMod","brainsPCMod","brainsStorePCMod","zombieHealth","zombieHealthPCMod","zombieDamage","zombieDamagePCMod","zombieSpeed","zombieCages","zombiesInCages","plagueDamageMod","graveyardHealthMod","startingResources","plagueDmgReduction","infectedBiteChance","infectedBlastChance","startTimer","fenceRadius","frameRate","humanCount","zombieCount","stats","percentage","endLevelTimer","endLevelDelay","offlineMessage","damageReduction","damageReflection","encodedContent","savefilename","autoUpgrades","autoconstruction","autoconstructionUnlocked","levelResourcesAdded","gameSpeed","currentState","states","playingLevel","levelCompleted","prestiged","failed","baseStats","lastSave","lastPlayFabSave","now","saveCreated","dateOfSave","levelUnlocked","bonesTotal","levelsCompleted","runeshatter","runes","life","death","vipEscaped","autoRelease","BoneCollectors","police","Police","resetToBaseStats","addEnergy","value","addBlood","isNaN","addBrains","addBones","getHumanCount","updateSpells","autoRemoveCollectorsHarpies","updateRunicSyphon","saveData","saveToPlayFab","isBossStage","doesLevelHaveTrophy","trophyAquired","prestigePointsForLevel","calculateEndLevelBones","calculateEndLevelZombieCages","indexOf","addPrestigePoints","window","submit","updateConstruction","updateAutoUpgrades","updateStats","endLevelBones","releaseCagedZombies","createZombie","sacrificeCagedZombies","cagedZombieSacrificeValue","setupLevel","updatePlayingLevel","setGameFieldSizeForLevel","updateRuneEffects","applyGenerators","addStartLevelResources","populateStats","moveSpeed","getMaxHealth","maxRunSpeed","getMaxPolice","getMaxArmy","onReady","upgradeIdCheck","points","auto","localStorage","setItem","JSON","stringify","console","log","loadData","getItem","parse","updatePersistentData","calcOfflineProgress","partsCreated","updateLongTime","removeItem","sendMessage","rootRenderTarget","plugins","interaction","resize","body","clientWidth","clientHeight","blob","Blob","LZString","compressToEncodedURIComponent","URL","createObjectURL","datestamp","toISOString","replace","importFile","file","reader","FileReader","onload","event","savegame","decompressFromEncodedURIComponent","alert","readAsText","toggleFullscreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","bossCompleted","bossLevel","levelLocked","bossStage","completed","locked","loginInUsingPlayFab","PlayFab","settings","request","TitleId","AuthTicket","services","getGameAuthToken","KongregateId","getUserId","CreateAccount","PlayFabClientSDK","LoginWithKongregate","PlayFabId","loadFromPlayFab","err","error","Data","save","ClientApi","UpdateUserData","location","reload","force","Keys","GetUserData","Value","allowPlayFabAction","GraveyardSprite","spikeSprites","spikeTimer","graveyardHealth","graveyardMaxHealth","healthBar","fence","Harpies","drawGraveyard","drawFence","drawHealthBar","background","Graphics","foreground","gameFieldSize","clear","lineStyle","moveTo","lineTo","updateHealthBar","spikeTexture","backgroundContainer","fortSprite","textureName","fortTexture","crypt","fort","fortress","citadel","graveyardPosition","graveYardLocation","graveyardCollision","numPosts","radiansPerFencePost","PI","postSprite","getRandomElementFromArray","positionWobble","pos","RotateVector2d","cacheAsBitmap","addAndRemoveBoneCollectors","addAndRemoveHarpies","spawnZombie","updatePlagueSpikes","updateSpikeSprites","plagueSpikes","addSpikeSprite","isWithinFence","BoneCollectorState","speedFactor","boneList","HarpyStates","collectDistance","collecting","boneCollector","BoneCollector","updateBoneCollector","findNearestBone","j","nearestBone","distanceToNearest","distance","updateSpeed","returning","bombs","dropped","fire","bombSprites","discardedBombSprites","bombHeight","tanks","Tanks","bombTexture","harpy","bomb","Harpy","updateHarpy","updateBomb","bombing","aliveTanks","getBomb","updateHarpySpeed","Bomb","maxWalkSpeed","minSecondsTostand","maxSecondsToStand","chanceToStayInCurrentBuilding","doctorTextures","discardedHumans","humansPerLevel","maxHumans","vipEscaping","fleeChancePerZombie","fleeTime","plagueTickTimer","healTickTimer","frozen","pandemic","graveYardPosition","drawTargets","randomSecondsToStand","addXp","testForLoot","vipText","assaultStarted","assignRandomTarget","getRandomBuilding","randomPositionInBuilding","getMaxNpcs","getMaxHumans","armymen","getMaxDoctors","getTorchChance","getAttackDamage","setupVipText","fontFamily","fontSize","fill","stroke","strokeThickness","align","populatePois","animated","doctorDeadTexture","stop","numDoctors","vipNeeded","undefined","escapeTarget","textureId","copyFrom","changeState","updateHumanSpeed","gotoAndStop","playing","humanSpeedMod","updateHuman","updateDeadHumanFading","walking","fleeing","escaping","attacking","inflictBurn","updatePlague","pandemicBullet","healHuman","doHeal","scanForZombies","zombieSpottedCount","PoliceState","radioTime","followTimer","discardedPolice","walkTexture","dogTexture","deadDogTexture","policeDogLevel","policePerLevel","shootDistance","dogScaling","isExtraPolice","maxPolice","maxDogHealth","PoliceMan","policeState","createPoliceDog","owner","following","updatePoliceDog","updatePolice","decideStateOnZombieDistance","running","shooting","radioForBackup","closestPolice","closestDistance","updateDogSpeed","hunting","ArmyState","minigun","rocketlauncher","attackingGraveyard","shotsLeft","shotTimer","discardedArmymen","armyPerLevel","shotsPerBurst","droneStrikeTimer","droneStrikeTime","droneStrike","droneActive","droneBlastRadius","isExtraArmy","maxArmy","laser","text","armyman","ArmyMan","graveYardTarget","armyState","updateArmy","updateDroneStrike","callDroneStrike","zombiesInArea","humansInArea","caller","bombsLeft","droneBomb","startedBombing","TankState","TankDirection","getMaxTanks","vertical","horizontal","turret","maxTanks","Tank","turretSprite","tankState","patrolling","updateTank","updateTankSprites","targetAngle","Generator","machines","partsPerSec","rank","total","basePrice","multi","maxAffordable","getMaxUpgrades","getCostForUpgrades","applyGenerator","produces","currRank","aliveSkeletons","spawnTimer","respawnTime","lastKillingBlow","randomSpells","lootChance","currItemId","prefixes","commonQuality","rareQuality","epicQuality","legendaryQuality","applyItemUpgrades","multiplier","SkeletonCharacter","castSpellNoMana","incinerate","se","specialEffect","loot","prefix","p","suffix","spell","sp","itemText","generateLoot","specialEffects","prefixIndex","effects","splice","tooltip","cooldown","duration","end","onCooldown","active","cooldownLeft","spellMap","Map","Spell","detonate","super","lockAllSpells","unlocked","unlockSpell","spellId","get","getSpell","getUnlockedSpells","castSpell","spellList","trophyStats","isPercentage","createTrophy","escaped","trophyId","maxTrophyToCreate","trophiesCollected","getAquiredTrophyList","burningSpeedPC","golemHealthPC","golemDamagePC","startingPC","autoshop","constructionStates","paused","autoPaused","constructionTickTimer","runeCalculations","logBase","adjustment","subtract","constructionTypes","fenceSize","plagueWorkshop","plagueLaboratory","spellTower","aviary","zombieCage","pit","constructionUpgrades","Construction","Upgrade","hasRequirement","requires","built","applyUpgrade","applyConstructionUpgrade","ownedUpgrade","join","persistUpgrade","purchaseMessage","consumeResources","costPerTick","hasEnough","shortfall","completeConstruction","completeMessage","lowestCost","fastMode","constructionAvailable","constructionComplete","ids","amountRequired","runeType","calculation","formatNumber","input","decimals","toExponential","sqrt","x1","y1","x2","y2","dx","dy","radians","cos","sin","array","g","exponent","numberOwned","resourcesOwned","numberToBuy","menuRect","clientX","clientY","top","buildings","buildingsByPopularity","buildingMap","roadSprite","roadTexture","entranceWidth","entranceDepth","cornerDistance","minBuildings","wallWidth","wallCollisionBuffer","pathFindStepSize","stepsToTake","hasHit","corner","hitbuilding","insideBuilding","treeSprites","treeTextures","armyTextures","roomNoOverlap","position1","position2","isValidPosition","makeHorizontalWall","walls","hasEntrance","wall1","wall2","wall","makeVerticalWall","addBuilding","poi","floorSprite","WHITE","rgbToHex","closestEntrance","possibleEntrances","north","inside","outside","south","west","east","center","wallTexture","buildingTextures","addCorners","corners","setGraveyardPosition","tileScale","destroy","buildingId","spaceToCreate","maxRoomSize","personSize","roomSize","foundPosition","testPosition","counter","popularity","populateBuildingMap","populateTrees","mapCols","mapRows","smallestDistance","closestBuilding","k","build","distanceBetweenPoints","getBuildingFromMap","xMod","yMod","x25","y25","wallBuffer","isInsidePoi","checkWall","collision","validX","validY","checkGraveyard","Collision","checkCollisions","closeBuilding","findBuilding","pathStepCalc","isBuildingClose","modifyVectorForCollision","willVectorHitBuilding","step","findNearestCorner","closestCorner","findAdjacentCorners","navigateAroundBuilding","currentPosition","targetPosition","targetCloseBuilding","isValidTreePosition","treesToCreate","alivePercent","treeSprite","uiContainer","vipTexture","vipSprite","grass","canvasSize","defaultScale","onDragStart","dragging","dragOffset","getLocalPosition","dragStartX","dragStartY","lastDiff","onDragEnd","lastPinchZoom","onDragMove","zombieCursor","parent","originalEvent","touches","curDiff","pinchZoom","newPosition","preventGameContainerLeavingBounds","hasMoved","gc","gcWidth","gcHeight","onClickTap","spawnAllZombies","change","coords","centerPosition","onWheel","deltaY","deltaX","zombieCursorScale","vipMatrix","Matrix","frameCount","timeSinceLastFrameCount","keys","moved","w","scrollSpeed","d","scrollGameContainer","scaleX","scaleY","posX","posY","tx","ty","render","renderVipEscape","hitArea","Rectangle","setSizes","SCALE_MODE","SCALE_MODES","NEAREST","Application","backgroundColor","antialias","resizeTo","appendChild","view","sortableChildren","RenderTexture","stage","interactive","interactiveChildren","getElementsByTagName","onwheel","oncontextmenu","setupContainers","loader","load","ticker","_delta","deltaMS","self","referrer","href","kongregateAPI","loadAPI","getAPI","addEventListener","visibilityState","onresize","onblur","onkeydown","keyCode","onkeyup","ZombieFlags","mod","scaleMod","turnTimer","detonateTimer","Zombie","discardedZombies","zombiePartition","zombieCursorText","reactionTime","spaceNeeded","cursorSprite","isDog","dogScale","numZombies","killZombie","explosionRadius","partitionInsert","partition","partitionGetNeighbours","neighbours","updateZombie","detonateZombie","updateZombieSpeed","distanceToHuman","dotProduct","dogSpeed","zombieMaxSpeed","factor","speedMagnitudeSq","zombieMaxSpeedSq","isSpaceToMove","newSpeed","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","exports","__webpack_modules__","call"],"mappings":"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","file":"bundle.js","sourcesContent":["import { CreatureFactory, GameModel, PartFactory, Skeleton, Spells, Trophies, Upgrades, KeysPressed, format2Places,\r\n  moveToolTip, formatWhole} from \"./internal\";\r\n\r\nangular.module('zombieApp', [])\r\n  .filter('decimal', function(){\r\n    return format2Places;\r\n  })\r\n  .filter('whole', function(){\r\n    return formatWhole;\r\n  })\r\n  .config(['$compileProvider', function ($compileProvider) {\r\n    $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|javascript|data|blob):/);\r\n    $compileProvider.debugInfoEnabled(false);\r\n  }])\r\n  .controller('ZombieController', ['$scope','$interval','$document',function($scope, $interval, $document) {\r\n    const skeleton = new Skeleton();\r\n    const spells = new Spells();\r\n    const partFactory = new PartFactory();\r\n    const creatureFactory = new CreatureFactory();\r\n    const upgrades = new Upgrades();\r\n    const trophies = new Trophies();\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const zm = this;\r\n    zm.model = GameModel.getInstance();\r\n    zm.skeleton = function() {\r\n      return skeleton.persistent;\r\n    }\r\n    zm.spells = spells;\r\n    zm.keysPressed = KeysPressed;\r\n\r\n    zm.files = [];\r\n    zm.messageTimer = 4;\r\n    zm.message = false;\r\n    zm.lastUpdate = 0;\r\n    zm.sidePanels = {};\r\n    zm.upgrades = [];\r\n    zm.currentShopFilter = \"blood\";\r\n    zm.currentConstructionFilter = \"available\";\r\n    zm.graveyardTab = \"minions\";\r\n    zm.trophyTab = \"all\";\r\n    zm.factoryTab = \"parts\"\r\n    zm.factoryStats = {};\r\n    zm.moveTooltip = moveToolTip;\r\n\r\n    zm.closeSidePanels = function() {\r\n      zm.currentShopFilter = \"blood\";\r\n      zm.currentConstructionFilter = \"available\";\r\n      zm.graveyardTab = \"minions\";\r\n      zm.factoryTab = \"parts\"\r\n      zm.sidePanels.options = false;\r\n      zm.sidePanels.graveyard = false;\r\n      zm.sidePanels.runesmith = false;\r\n      zm.sidePanels.prestige = false;\r\n      zm.sidePanels.construction = false;\r\n      zm.sidePanels.shop = false;\r\n      zm.sidePanels.open = false;\r\n      zm.sidePanels.factory = false;\r\n      zm.levelSelect.shown = false;\r\n    }\r\n\r\n    zm.openSidePanel = function(type : string) {\r\n      zm.closeSidePanels();\r\n      switch (type) {\r\n        case \"shop\":\r\n          zm.filterShop(zm.currentShopFilter);\r\n          zm.sidePanels.shop = true;\r\n          break;\r\n        case \"construction\":\r\n          zm.filterConstruction(zm.currentConstructionFilter);\r\n          zm.sidePanels.construction = true;\r\n          break;\r\n        case \"graveyard\":\r\n          zm.sidePanels.graveyard = true;\r\n          zm.graveyardTab = \"minions\";\r\n          zm.trophyTab = \"all\";\r\n          break;\r\n        case \"runesmith\":\r\n          zm.sidePanels.runesmith = true;\r\n          break;\r\n        case \"factory\":\r\n          zm.sidePanels.factory = true;\r\n          zm.upgrades = partFactory.generators;\r\n          zm.factoryStats = partFactory.factoryStats();\r\n          zm.factory.updateDelays();\r\n          break;\r\n        case \"prestige\":\r\n          zm.upgrades = upgrades.prestigeUpgrades.filter(upgrade => upgrade.cap == 0 || zm.currentRank(upgrade) < upgrade.cap);\r\n          zm.upgrades.push(...upgrades.prestigeUpgrades.filter(upgrade => upgrade.cap !== 0 && zm.currentRank(upgrade) >= upgrade.cap));\r\n          zm.sidePanels.prestige = true;\r\n          break;\r\n        case \"options\":\r\n          zm.sidePanels.options = true;\r\n          zm.model.downloadSaveGame();\r\n          break;\r\n      }\r\n      zm.sidePanels.open = true;\r\n    }\r\n\r\n    zm.graveyardTabSelect = function(tab : string) {\r\n      zm.graveyardTab = tab;\r\n      if (tab == 'trophies') {\r\n        zm.trophies = trophies.getTrophyList();\r\n        zm.trophyTab = \"all\";\r\n      }\r\n    }\r\n\r\n    zm.trophyTabSelect = function(tab : string) {\r\n      zm.trophyTab = tab;\r\n      switch(tab) {\r\n        case \"all\":\r\n          zm.trophies = trophies.getTrophyList();\r\n          break;\r\n        case \"collected\":\r\n          zm.trophies = trophies.getTrophyList().filter(trophy => trophy.owned);\r\n          break;\r\n        case \"uncollected\":\r\n          zm.trophies = trophies.getTrophyList().filter(trophy => !trophy.owned);\r\n          break;\r\n        case \"totals\":\r\n          zm.trophies = trophies.getTrophyTotals();\r\n          break;\r\n      }\r\n    }\r\n\r\n    zm.filterShop = function(type : string) {\r\n      zm.currentShopFilter = type;\r\n      zm.upgrades = upgrades.getUpgrades(type);\r\n    }\r\n\r\n    zm.filterConstruction = function(type : string) {\r\n      zm.currentConstructionFilter = type;\r\n      switch(type) {\r\n        case \"available\":\r\n          zm.upgrades = upgrades.getAvailableConstructions();\r\n          break;\r\n        case \"completed\":\r\n          zm.upgrades = upgrades.getCompletedConstructions();\r\n          break;\r\n      }\r\n    }\r\n\r\n    zm.resetGame = function() {\r\n      if (confirm(\"Are you sure you want to reset everything? If you have a cloud save it will also be deleted. Make sure you export your save game first.\")) {\r\n        zm.model.resetData();\r\n      }\r\n    }\r\n\r\n    zm.addBoneCollector = function() {\r\n      if (zm.model.getEnergyRate() >= 1)\r\n        zm.model.persistentData.boneCollectors++;\r\n    }\r\n\r\n    zm.subtractBoneCollector = function() {\r\n      if (zm.model.persistentData.boneCollectors > 0)\r\n        zm.model.persistentData.boneCollectors--;\r\n    }\r\n\r\n    zm.setHarpies = function(number : number) {\r\n      if ((number >= 0 && number < zm.model.persistentData.harpies) || (zm.model.getEnergyRate() >= 1 && number > 0)) {\r\n        zm.model.persistentData.harpies = number;\r\n      }\r\n    }\r\n\r\n    zm.setGraveyardZombies = function(number : number) {\r\n      if (number <= zm.maxGraveyardZombies() && number >= 0)\r\n        zm.model.persistentData.graveyardZombies = number;\r\n    }\r\n\r\n    zm.maxGraveyardZombies = function() {\r\n      return Math.floor(zm.model.energyMax / zm.model.zombieCost);\r\n    }\r\n\r\n    zm.upgradePrice = function(upgrade) {\r\n      if (zm.sidePanels.factory) {\r\n        return partFactory.purchasePrice(upgrade);\r\n      }\r\n      return upgrades.upgradePrice(upgrade);\r\n    }\r\n\r\n    // ---- Factory Functions ---- //\r\n    zm.factory = {\r\n      delays : [],\r\n      changeFactoryTab(tab : string) {\r\n        zm.factoryTab = tab;\r\n        if (tab == 'parts') {\r\n          zm.upgrades = partFactory.generators;\r\n          this.updateDelays();\r\n        } else {\r\n          zm.upgrades = creatureFactory.creatures;\r\n        }\r\n      },\r\n      buyGenerator(generator) {\r\n        if (zm.keysPressed.shift) {\r\n          partFactory.purchaseMaxGenerators(generator);\r\n        } else {\r\n          partFactory.purchaseGenerator(generator);\r\n        }\r\n        zm.factoryStats = partFactory.factoryStats();\r\n      },\r\n      generatorPrice(upgrade) {\r\n        return partFactory.purchasePrice(upgrade);\r\n      },\r\n      creaturePrice(creature) {\r\n        return creatureFactory.purchasePrice(creature);\r\n      },\r\n      creatureLevelPrice(creature) {\r\n        return creatureFactory.levelPrice(creature);\r\n      },\r\n      creaturePercent(creature) {\r\n        return Math.min(Math.round(zm.model.persistentData.parts / this.creaturePrice(creature) * 100), 100);\r\n      },\r\n      creatureLevelPercent(creature) {\r\n        return Math.min(Math.round(zm.model.persistentData.parts / this.creatureLevelPrice(creature) * 100), 100);\r\n      },\r\n      buyCreature(creature) {\r\n        return creatureFactory.startBuilding(creature);\r\n      },\r\n      creatureTooExpensive(creature) {\r\n        return !creatureFactory.canAffordCreature(creature);\r\n      },\r\n      creatureButtonText(creature) {\r\n        if (creature.building) {\r\n          return \"Building...\";\r\n        }\r\n        if (this.creatureTooExpensive(creature)) {\r\n          return formatWhole(this.creaturePrice(creature) - zm.model.persistentData.parts) + ' parts required';\r\n        } else {\r\n          return \"Build (\" + formatWhole(this.creaturePrice(creature)) + \" parts)\";\r\n        }\r\n      },\r\n      creatureLevelButtonText(creature) {\r\n        if (this.canLevelCreature(creature)) {\r\n          return \"Upgrade Level \" + (creature.level + 1) + \" (\" + formatWhole(this.creatureLevelPrice(creature)) + \" parts)\";\r\n        }\r\n        return formatWhole(this.creatureLevelPrice(creature) - zm.model.persistentData.parts) + ' parts required';\r\n      },\r\n      canBuildCreature(creature) {\r\n        if (this.creatureTooExpensive(creature))\r\n          return false;\r\n        if (creature.building)\r\n          return false;\r\n        return creatureFactory.creaturesBuildingCount() + zm.model.creatureCount < zm.model.creatureLimit;\r\n      },\r\n      canLevelCreature(creature) {\r\n        return this.creatureLevelPrice(creature) < zm.model.persistentData.parts;\r\n      },\r\n      levelCreature(creature) {\r\n        creatureFactory.levelCreature(creature);\r\n      },\r\n      autoBuild(creature, number) {\r\n        if (creature.autobuild + number >= 0 && creature.autobuild + number <= zm.model.creatureLimit) {\r\n          creatureFactory.creatureAutoBuildNumber(creature, number);\r\n        }\r\n      },\r\n      creatureStats(creature) {\r\n        return creatureFactory.creatureStats(creature);\r\n      },\r\n      updateDelays() {\r\n        this.delays = [];\r\n        for (let i = 0; i <partFactory.generatorsApplied.length; i++) {\r\n          this.delays[partFactory.generatorsApplied[i].id] = (-1 * (partFactory.generatorsApplied[i].time - partFactory.generatorsApplied[i].timeLeft)).toFixed(2);\r\n        }\r\n      }\r\n    }\r\n    // ---- Factory Functions ---- //\r\n\r\n\r\n    // ---- Level Select Functions ---- //\r\n    zm.levelSelect = {\r\n      shown : false,\r\n      levelsPerPage : 50,\r\n      levels : [],\r\n      levelRanges : [],\r\n      start : 1,\r\n      showButton() {\r\n        return zm.model.persistentData.allTimeHighestLevel > 1;\r\n      },\r\n      show() {\r\n        if (!this.shown) {\r\n          zm.closeSidePanels();\r\n          this.shown = true;\r\n          this.level = zm.model.levelInfo(zm.model.level);\r\n          this.start = Math.floor((this.level.level - 1) / this.levelsPerPage) * this.levelsPerPage + 1;\r\n          this.populate();\r\n        } else {\r\n          this.shown = false;\r\n        }\r\n      },\r\n      populate() {\r\n        this.levels = [];\r\n        this.levelRanges = [];\r\n        if (this.start > this.levelsPerPage) {\r\n          this.levelRanges.push(this.start - this.levelsPerPage);\r\n        }\r\n        this.levelRanges.push(this.start);\r\n        if (this.start + this.levelsPerPage <= zm.model.persistentData.allTimeHighestLevel + 1) {\r\n          this.levelRanges.push(this.start +  this.levelsPerPage);\r\n        }\r\n        \r\n        for (let i = this.start; i < this.start + this.levelsPerPage; i++) {\r\n          this.levels.push(zm.model.levelInfo(i));\r\n        }\r\n      },\r\n      selectRange(range) {\r\n        this.start = range;\r\n        this.populate();\r\n      },\r\n      select(level) {\r\n        this.level = level;\r\n      },\r\n      startLevel() {\r\n        zm.model.startLevel(this.level.level);\r\n        this.shown = false;\r\n      },\r\n    }\r\n    // ---- Level Select Functions ---- //\r\n\r\n    zm.addToHomeScreen = function() {\r\n      if (zm.model.deferredPrompt) {\r\n        //deferredPrompt.prompt();\r\n      }\r\n    }\r\n\r\n    zm.constructionPercent = function() {\r\n      if (zm.model.persistentData.currentConstruction) {\r\n        const time = zm.model.persistentData.currentConstruction.time - zm.model.persistentData.currentConstruction.timeRemaining;\r\n        return Math.round(time / zm.model.persistentData.currentConstruction.time * 100);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    zm.updateConstructionUpgrades = function() {\r\n      if (zm.sidePanels.construction == true)\r\n        zm.upgrades = upgrades.getAvailableConstructions();\r\n    }\r\n\r\n    zm.startConstruction = function(upgrade) {\r\n      upgrades.startConstruction(upgrade);\r\n      zm.upgrades = upgrades.getAvailableConstructions();\r\n    }\r\n\r\n    zm.playPauseConstruction = function() {\r\n      upgrades.playPauseConstruction();\r\n    }\r\n\r\n    zm.cancelConstruction = function() {\r\n      if(confirm(\"Are you sure you want to cancel construction? Used materials will not be refunded\")) {\r\n        upgrades.cancelConstruction();\r\n        zm.upgrades = upgrades.getAvailableConstructions();\r\n      }\r\n    }\r\n\r\n    zm.upgradeSubtitle = function(upgrade) {\r\n      switch (upgrade.type) {\r\n        case upgrades.types.energyRate:\r\n          return \"+\" + upgrade.effect + \" energy per second\";\r\n        case upgrades.types.energyCap:\r\n          return \"+\" + upgrade.effect + \" max energy\";\r\n        case upgrades.types.bloodCap:\r\n          return \"+\" + formatWhole(upgrade.effect) + \" max blood\";\r\n        case upgrades.types.bloodStoragePC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% max blood\";\r\n        case upgrades.types.bloodGainPC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% blood income\";\r\n        case upgrades.types.brainsGainPC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% brains income\";\r\n        case upgrades.types.bonesGainPC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% bones income\";\r\n        case upgrades.types.partsGainPC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% parts income\";\r\n        case upgrades.types.brainsStoragePC:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% max brains\";\r\n        case upgrades.types.energyCost:\r\n          return \"-\" + upgrade.effect + \" zombie energy cost\";\r\n        case upgrades.types.brainsCap:\r\n          return \"+\" + upgrade.effect + \" max brains\";\r\n        case upgrades.types.damage:\r\n          return \"+\" + upgrade.effect + \" zombie damage\";\r\n        case upgrades.types.speed:\r\n          return \"+\" + upgrade.effect + \" zombie speed\";\r\n        case upgrades.types.health:\r\n          return \"+\" + upgrade.effect + \" zombie health\";\r\n        case upgrades.types.brainRecoverChance:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% chance to recover brain\";\r\n        case upgrades.types.riseFromTheDeadChance:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% chance for corpse to become zombie\";\r\n        case upgrades.types.infectedBite:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% chance for zombies to infect their targets\";\r\n        case upgrades.types.infectedBlast:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% chance for zombies to explode on death\";\r\n        case upgrades.types.boneCollectorCapacity:\r\n          return \"+\" + upgrade.effect + \" bone collector capacity\";\r\n        case upgrades.types.zombieDmgPC:\r\n          return \"+\" + formatWhole(Math.round(upgrade.effect * 100)) + \"% zombie damage\";\r\n        case upgrades.types.zombieHealthPC:\r\n          return \"+\" + formatWhole(Math.round(upgrade.effect * 100)) + \"% zombie health\";\r\n        case upgrades.types.bonesRate:\r\n          return \"+\" + upgrade.effect + \" bones per second\";\r\n        case upgrades.types.brainsRate:\r\n          return \"+\" + upgrade.effect + \" brains per second\";\r\n        case upgrades.types.plagueDamage:\r\n          return \"+\" + formatWhole(upgrade.effect) + \" plague damage\";\r\n        case upgrades.types.spitDistance:\r\n          return \"+\" + upgrade.effect + \" spit distance\";\r\n        case upgrades.types.blastHealing:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% plague healing\";\r\n        case upgrades.types.plagueArmor:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% damage reduction\";\r\n        case upgrades.types.monsterLimit:\r\n          return \"+\" + upgrade.effect + \" creature limit\";\r\n        case upgrades.types.runicSyphon:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% runic syphon\";\r\n        case upgrades.types.gigazombies:\r\n          return \"Unlock more gigazombies\";\r\n        case upgrades.types.bulletproof:\r\n          return \"+\" + Math.round(upgrade.effect * 100) + \"% earth golem bullet reflect\";\r\n        case upgrades.types.harpySpeed:\r\n          return \"+\" + upgrade.effect + \" harpy speed\";\r\n        case upgrades.types.harpyBombs:\r\n          return \"+\" + upgrade.effect + \" harpy bombs\";\r\n        case upgrades.types.tankBuster:\r\n          return \"Anti tank harpies\";\r\n        case upgrades.types.spikeDelay:\r\n          return \"-20% spike delay\";\r\n      }\r\n      return \"\";\r\n    }\r\n\r\n    zm.currentRank = function(upgrade) {\r\n      if (zm.sidePanels.factory) {\r\n        return partFactory.currentRank(upgrade);\r\n      }\r\n      return upgrades.currentRank(upgrade);\r\n    }\r\n\r\n    zm.currentRankConstruction = function(upgrade) {\r\n      return upgrades.currentRankConstruction(upgrade);\r\n    }\r\n\r\n    zm.upgradeTooExpensive = function(upgrade) {\r\n      if (zm.sidePanels.factory) {\r\n        return !partFactory.canAffordGenerator(upgrade);\r\n      }\r\n      return !upgrades.canAffordUpgrade(upgrade) || (upgrade.cap != 0 && upgrades.currentRank(upgrade) >= upgrade.cap);\r\n    }\r\n\r\n    zm.requiredForUpgrade = function(upgrade) {\r\n      const cost = zm.upgradePrice(upgrade);\r\n\r\n      switch (upgrade.costType) {\r\n        case upgrades.costs.energy:\r\n          return formatWhole(cost - zm.model.energy) + ' energy required';\r\n        case upgrades.costs.blood:\r\n        case partFactory.costs.blood:\r\n          return formatWhole(cost - zm.model.persistentData.blood) + ' blood required';\r\n        case upgrades.costs.brains:\r\n          return formatWhole(cost - zm.model.persistentData.brains) + ' brains required';\r\n        case upgrades.costs.bones:\r\n          return formatWhole(cost - zm.model.persistentData.bones) + ' bones required';\r\n        case upgrades.costs.prestigePoints:\r\n          return formatWhole(cost - zm.model.persistentData.prestigePointsToSpend) + ' prestige points required';\r\n        case partFactory.costs.parts:\r\n          return formatWhole(cost - zm.model.persistentData.parts) + ' parts required';\r\n      }\r\n    }\r\n\r\n    zm.purchaseText = function(upgrade) {\r\n      if (zm.keysPressed.shift) {\r\n        if (zm.sidePanels.factory) {\r\n          const amount = partFactory.upgradeMaxAffordable(upgrade);\r\n          const price = partFactory.upgradeMaxPrice(upgrade, amount);\r\n          return 'Purchase ' + amount + ' (' + formatWhole(price) + ' ' + zm.costTranslate(upgrade.costType) + ')';\r\n        } else {\r\n          const amount = upgrades.upgradeMaxAffordable(upgrade);\r\n          const price = upgrades.upgradeMaxPrice(upgrade, amount);\r\n          return 'Purchase ' + amount + ' (' + formatWhole(price) + ' ' + zm.costTranslate(upgrade.costType) + ')';\r\n        }\r\n        \r\n      }\r\n      return 'Purchase (' + formatWhole(zm.upgradePrice(upgrade)) + ' ' + zm.costTranslate(upgrade.costType) + ')';\r\n    }\r\n\r\n    zm.costTranslate = function(costType) {\r\n      if (costType == upgrades.costs.prestigePoints) {\r\n        return \"points\";\r\n      }\r\n      return costType\r\n    },\r\n\r\n    zm.buyUpgrade = function(upgrade) {\r\n      if (zm.keysPressed.shift) {\r\n        upgrades.purchaseMaxUpgrades(upgrade);\r\n      } else {\r\n        upgrades.purchaseUpgrade(upgrade);\r\n      }\r\n    }\r\n\r\n    zm.upgradeStatInfo = function(upgrade) {\r\n      return upgrades.displayStatValue(upgrade);\r\n    }\r\n\r\n    zm.startGame = function() {\r\n      zm.model.startGame();\r\n    }\r\n\r\n    zm.nextLevel = function() {\r\n      zm.model.nextLevel();\r\n    }\r\n\r\n    zm.toggleAutoStart = function() {\r\n      if (zm.model.persistentData.autoStart) {\r\n        zm.model.persistentData.autoStart = false;\r\n      } else {\r\n        zm.model.persistentData.autoStart = true;\r\n      }\r\n    }\r\n\r\n    zm.toggleResolution = function(resolution) {\r\n      zm.model.persistentData.resolution = resolution;\r\n      zm.model.setResolution(zm.model.persistentData.resolution);\r\n    }\r\n\r\n    zm.getResolution = function() {\r\n      return zm.model.persistentData.resolution || 1;\r\n    }\r\n\r\n    zm.toggleZoomButtons = function() {\r\n      zm.model.persistentData.zoomButtons = !zm.model.persistentData.zoomButtons;\r\n    }\r\n\r\n    zm.zoom = function(zoom) {\r\n      zm.model.zoom(zoom);\r\n    }\r\n\r\n    zm.resetZoom = function() {\r\n      zm.model.centerGameContainer(true);\r\n    }\r\n\r\n    zm.toggleShowFps = function() {\r\n      zm.model.persistentData.showfps = !zm.model.persistentData.showfps;\r\n    }\r\n\r\n    zm.toggleParticles = function() {\r\n      zm.model.persistentData.particles = !zm.model.persistentData.particles;\r\n    }\r\n\r\n    zm.isShowPrestige = function() {\r\n      if (typeof zm.model.persistentData.prestigePointsEarned  === 'undefined')\r\n        return false;\r\n      return zm.model.persistentData.allTimeHighestLevel > 5;\r\n    }\r\n\r\n    zm.doPrestige = function() {\r\n      if (confirm(\"Are you sure?\")) {\r\n        zm.model.prestige();\r\n      }\r\n    }\r\n\r\n    zm.constructionLeadsTo = function(upgrade) {\r\n      return upgrades.constructionLeadsTo(upgrade);\r\n    } \r\n\r\n    zm.howToPlay = [\r\n      \"Energy refills over time. You need 10 energy to spawn a zombie by clicking on the ground.\",\r\n      \"Hold shift or control to spawn multiple zombies with a single click.\",\r\n      \"Whenever one of your zombies attacks a human you will collect some blood.\",\r\n      \"Killing a human or turning them into a zombie will earn you 1 brain.\",\r\n      \"You can spend these currencies in the shop to purchase upgrades for your zombie horde.\",\r\n      \"Hold shift to buy the maximum affordable number of upgrades.\",\r\n      \"The world can be dragged with the mouse to explore it. Or by using the WASD or arrow keys.\",\r\n      \"You can zoom in and out using your mouse wheel. Pinch to zoom on mobile.\",\r\n    ];\r\n\r\n    zm.updateMessages = function(timeDiff) {\r\n      if (zm.message) {\r\n        zm.messageTimer -= timeDiff;\r\n        if (zm.model.messageQueue.length > 0)\r\n          zm.messageTimer -= timeDiff;\r\n        if (zm.messageTimer < 0) {\r\n          zm.message = false;\r\n          zm.messageTimer = 4;\r\n        }\r\n      } else {\r\n        if (zm.model.messageQueue.length > 0) {\r\n          zm.message = zm.model.messageQueue.shift();\r\n          zm.messageTimer = 4;\r\n        }\r\n      }\r\n    }\r\n\r\n    zm.infusionAmount = 1000;\r\n    zm.infusionMax = false;\r\n\r\n    zm.infuseRune = function(rune, cost) {\r\n      if (zm.infusionMax) {\r\n        switch(cost) {\r\n          case \"blood\":\r\n            upgrades.infuseRune(rune, cost, zm.model.persistentData.blood);\r\n            break;\r\n          case \"brains\":\r\n            upgrades.infuseRune(rune, cost, zm.model.persistentData.brains);\r\n            break;\r\n          case \"bones\":\r\n            upgrades.infuseRune(rune, cost, zm.model.persistentData.bones);\r\n            break;\r\n        }\r\n      } else {\r\n        upgrades.infuseRune(rune, cost, zm.infusionAmount);\r\n      }\r\n    }\r\n\r\n    zm.shatterPercent = function(rune) {\r\n      return upgrades.shatterPercent(rune);\r\n    }\r\n\r\n    zm.shatterBloodCost = function(rune) {\r\n      return upgrades.shatterBloodCost(rune);\r\n    }\r\n\r\n    zm.shatterSatiate = function(runetype, rune) {\r\n      upgrades.infuseRune(runetype, \"blood\", this.shatterBloodCost(rune));\r\n    }\r\n\r\n    zm.canShatter = function() {\r\n      return upgrades.canShatter();\r\n    }\r\n\r\n    zm.doShatter = function() {\r\n      upgrades.doShatter();\r\n    }\r\n\r\n    zm.shatterEffect = function() {\r\n      return upgrades.shatterEffect() * 100;\r\n    }\r\n\r\n    zm.infuseButtonText = function() {\r\n      if (zm.infusionMax) {\r\n        return \"Max\";\r\n      } else {\r\n        return formatWhole(zm.infusionAmount);\r\n      }\r\n    }\r\n\r\n    zm.energyPercent = function() {\r\n      return Math.min(Math.round(zm.model.energy / zm.model.energyMax * 100),100);\r\n    }\r\n    zm.bloodPercent = function() {\r\n      return Math.min(Math.round(zm.model.persistentData.blood / zm.model.bloodMax * 100), 100);\r\n    }\r\n    zm.brainsPercent = function() {\r\n      return Math.min(Math.round(zm.model.persistentData.brains / zm.model.brainsMax * 100), 100);\r\n    }\r\n\r\n    zm.costAboveCap = function(upgrade, price) {\r\n      switch(upgrade.costType) {\r\n        case \"blood\":\r\n          if (price > zm.model.bloodMax) {\r\n            return \"Blood capacity too low\";\r\n          }\r\n          break;\r\n        case \"brains\":\r\n          if (price > zm.model.brainsMax) {\r\n            return \"Brains capacity too low\";\r\n          }\r\n          break;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    zm.upgradeButtonText = function(upgrade) {\r\n      if (upgrade.cap != 0 && zm.currentRank(upgrade) >= upgrade.cap)\r\n        return \"Sold Out\";\r\n        \r\n      const price = zm.upgradePrice(upgrade);\r\n\r\n      if (zm.upgradeTooExpensive(upgrade)) {\r\n        const aboveCap = zm.costAboveCap(upgrade, price);\r\n        if (aboveCap)\r\n          return aboveCap;\r\n        return zm.requiredForUpgrade(upgrade)\r\n      }\r\n        \r\n      return zm.purchaseText(upgrade, price)\r\n    }\r\n\r\n    zm.upgradePercent = function(upgrade) {\r\n      switch(upgrade.costType) {\r\n        case \"blood\":\r\n          return Math.round(Math.min(1, zm.model.persistentData.blood / zm.upgradePrice(upgrade)) * 100);\r\n        case \"brains\":\r\n          return Math.round(Math.min(1, zm.model.persistentData.brains / zm.upgradePrice(upgrade)) * 100);\r\n        case \"bones\":\r\n          return Math.round(Math.min(1, zm.model.persistentData.bones / zm.upgradePrice(upgrade)) * 100);\r\n        case \"parts\":\r\n          return Math.round(Math.min(1, zm.model.persistentData.parts / zm.upgradePrice(upgrade)) * 100);\r\n        case \"prestigePoints\":\r\n          return Math.round(Math.min(1, zm.model.persistentData.prestigePointsToSpend / zm.upgradePrice(upgrade)) * 100);\r\n      }\r\n      \r\n    }\r\n\r\n    zm.skeletonTimer = function() {\r\n      return skeleton.skeletonTimer();\r\n    }\r\n\r\n    // ---- Skeleton Functions ---- //\r\n    zm.skeletonMenu = {\r\n      isShown :false,\r\n      equipped : [],\r\n      show() {\r\n        this.isShown = !this.isShown;\r\n        if (this.isShown) {\r\n          this.updateEquippedItems();\r\n          setTimeout(function(){\r\n            const elements = document.getElementsByClassName(\"item legendary\");\r\n            for (let i = 0; i < elements.length; i++) {\r\n              // elements[i].style.animationDelay = (Math.random() * 4).toFixed(2) + \"s\";\r\n            }\r\n          },100);\r\n        }\r\n      },\r\n      acceptOffer() {\r\n        skeleton.acceptOffer();\r\n        this.isShown = false;\r\n      },\r\n      anotherOffer() {\r\n        return skeleton.persistent.skeletons > 0 && zm.model.persistentData.trophies.length >= skeleton.persistent.xpRate * 20;\r\n      },\r\n      xpPercent() {\r\n        return Math.round(Math.min(1, zm.skeleton().xp / skeleton.xpForNextLevel()) * 100);\r\n      },\r\n      xpForNextLevel() {\r\n        return skeleton.xpForNextLevel();\r\n      },\r\n      xpRate() {\r\n        return skeleton.persistent.xpRate * 100;\r\n      },\r\n      isAlive() {\r\n        return skeleton.isAlive();\r\n      },\r\n      timer() {\r\n        return Math.ceil(skeleton.skeletonTimer());\r\n      },\r\n      updateEquippedItems() {\r\n        this.equipped = [];\r\n        const helmetItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.helmet.id);\r\n        if (helmetItems.length > 0) {\r\n          this.equipped.push([helmetItems[0]]);\r\n        } else {\r\n          this.equipped.push([{name : \"Helmet Slot\", s : skeleton.lootPositions.helmet.id, id : -1}]);\r\n        }\r\n        const row2 = [];\r\n        const swordItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.sword.id);\r\n        if (swordItems.length > 0) {\r\n          row2.push(swordItems[0]);\r\n        } else {\r\n          row2.push({name : \"Sword Slot\", s : skeleton.lootPositions.sword.id, id : -2});\r\n        }\r\n        const chestItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.chest.id);\r\n        if (chestItems.length > 0) {\r\n          row2.push(chestItems[0]);\r\n        } else {\r\n          row2.push({name : \"Chest Slot\", s : skeleton.lootPositions.chest.id, id : -3});\r\n        }\r\n        const shieldItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.shield.id);\r\n        if (shieldItems.length > 0) {\r\n          row2.push(shieldItems[0]);\r\n        } else {\r\n          row2.push({name : \"Shield Slot\", s : skeleton.lootPositions.shield.id, id : -4});\r\n        }\r\n        this.equipped.push(row2);\r\n        const row3 = [];\r\n        const gloveItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.gloves.id);\r\n        if (gloveItems.length > 0) {\r\n          row3.push(gloveItems[0]);\r\n        } else {\r\n          row3.push({name : \"Gloves Slot\", s : skeleton.lootPositions.gloves.id, id : -5});\r\n        }\r\n        const legItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.legs.id);\r\n        if (legItems.length > 0) {\r\n          row3.push(legItems[0]);\r\n        } else {\r\n          row3.push({name : \"Legs Slot\", s : skeleton.lootPositions.legs.id, id : -6});\r\n        }\r\n        const bootItems = skeleton.persistent.items.filter(i => i.q && i.s == skeleton.lootPositions.boots.id);\r\n        if (bootItems.length > 0) {\r\n          row3.push(bootItems[0]);\r\n        } else {\r\n          row3.push({name : \"Boots Slot\", s : skeleton.lootPositions.boots.id, id : -7});\r\n        }        \r\n        this.equipped.push(row3);\r\n        this.equipped.push([{name : \"Destroy Items\", s : -1, id : -8}]);\r\n\r\n      },\r\n      inventoryItems() {\r\n        return skeleton.persistent.items.filter(i => !i.q).sort((a,b) => (b.r * b.l) - (a.r * a.l));\r\n      },\r\n      itemName(item) {\r\n        return item.name || skeleton.getLootName(item);\r\n      },\r\n      itemSubName(item) {\r\n        if (!item.name) {\r\n          switch (item.r) {\r\n            case skeleton.rarity.common:\r\n              return \"Common level \" + item.l + \" \" + this.itemType(item);\r\n            case skeleton.rarity.rare:\r\n              return \"Rare level \" + item.l + \" \" + this.itemType(item);\r\n            case skeleton.rarity.epic:\r\n              return \"Epic level \" + item.l + \" \" + this.itemType(item);\r\n            case skeleton.rarity.legendary:\r\n              return \"Legendary level \" + item.l + \" \" + this.itemType(item);\r\n          }\r\n        }\r\n        if (item.s == -1) {\r\n          return \"Click this to destroy all non-equipped items. Or drag items here to destroy them.\";\r\n        }\r\n      },\r\n      itemStats(item) {\r\n        return skeleton.getLootStats(item);\r\n      },\r\n      itemEffects(item) {\r\n        return skeleton.getSpecialEffects(item);\r\n      },\r\n      itemType(item) {\r\n        switch(item.s) {\r\n          case -1:\r\n            return \"trash\";\r\n          case skeleton.lootPositions.helmet.id:\r\n            return \"helmet\";\r\n          case skeleton.lootPositions.chest.id:\r\n            return \"chest\";\r\n          case skeleton.lootPositions.gloves.id:\r\n            return \"gloves\";\r\n          case skeleton.lootPositions.legs.id:\r\n            return \"legs\";\r\n          case skeleton.lootPositions.boots.id:\r\n            return \"boots\";\r\n          case skeleton.lootPositions.sword.id:\r\n            return \"sword\";\r\n          case skeleton.lootPositions.shield.id:\r\n            return \"shield\";\r\n        }\r\n      },\r\n      itemClass(item) {\r\n        return item.name ? \"empty\" : skeleton.getLootClass(item);\r\n      },\r\n      itemById(id : number) {\r\n        let itemById = null;\r\n        skeleton.persistent.items.forEach(function(item){\r\n          if (item.id == id)\r\n            itemById = item;\r\n        });\r\n        return itemById;\r\n      },\r\n      itemDropped(itemId, target) {\r\n        let draggedItem = null;\r\n        skeleton.persistent.items.forEach(function(item){\r\n          if (item.id == itemId)\r\n            draggedItem = item;\r\n        });\r\n\r\n        if (target == -1) {\r\n          skeleton.destroyItem(draggedItem);\r\n        } else {\r\n          if (draggedItem.s == target) {\r\n            skeleton.persistent.items.forEach(function(item){\r\n              if (item.s == target) {\r\n                item.q = false;\r\n              }\r\n            });\r\n            draggedItem.q = true;\r\n            upgrades.applyUpgrades();\r\n          }\r\n          this.updateEquippedItems();\r\n        }\r\n        \r\n      },\r\n      equipItem(itemClicked) {\r\n        skeleton.persistent.items.forEach(function(item){\r\n          if (item.s == itemClicked.s) {\r\n            item.q = false;\r\n          }\r\n        });\r\n        itemClicked.q = true;\r\n        upgrades.applyUpgrades();\r\n        this.updateEquippedItems();\r\n      },\r\n      trashAll() {\r\n        if (confirm(\"Are you sure you want to destroy all non-equipped items? You will earn \" + formatWhole(skeleton.xpForItems()) + \" xp\")) {\r\n          skeleton.destroyAllItems();\r\n        }\r\n      }\r\n    }\r\n    // ---- Skeleton Functions ---- //\r\n\r\n    function update() {\r\n      const updateTime = new Date().getTime();\r\n      const timeDiff = (Math.min(1000, Math.max(updateTime - zm.lastUpdate,0))) / 1000;\r\n      innerUpdate(timeDiff, updateTime);\r\n      zm.lastUpdate = updateTime;\r\n    }\r\n\r\n    function innerUpdate(timeDiff, updateTime) {\r\n      zm.model.update(timeDiff, updateTime);\r\n      zm.updateMessages(timeDiff);\r\n    }\r\n\r\n    $document.ready(function(){\r\n      $scope.updatePromise = $interval(update, 200);\r\n      upgrades.angularModel = zm;\r\n    });\r\n  }])\r\n  .directive('levelSelect',function(){\r\n    return {\r\n      templateUrl: \"./templates/levelselect.html\"\r\n    };\r\n  })\r\n  .directive('levelStats',function(){\r\n    return {\r\n      templateUrl: \"./templates/levelstats.html\"\r\n    };\r\n  })\r\n  .directive('graveyardMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/graveyardmenu.html\"\r\n    };\r\n  })\r\n  .directive('runesmithMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/runesmithmenu.html\"\r\n    };\r\n  })\r\n  .directive('optionsMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/optionsmenu.html\"\r\n    };\r\n  })\r\n  .directive('shopMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/shopmenu.html\"\r\n    };\r\n  })\r\n  .directive('constructionMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/constructionmenu.html\"\r\n    };\r\n  })\r\n  .directive('prestigeMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/prestigemenu.html\"\r\n    };\r\n  })\r\n  .directive('championsHoldMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/championshold.html\"\r\n    };\r\n  })\r\n  .directive('factoryMenu',function(){\r\n    return {\r\n      templateUrl: \"./templates/factorymenu.html\"\r\n    };\r\n  })\r\n  .directive('customOnChange', function() {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, element, attrs) {\r\n        const onChangeHandler = scope.$eval(attrs.customOnChange);\r\n        element.on('change', onChangeHandler);\r\n        element.on('$destroy', function() {\r\n          element.off();\r\n        });\r\n      }\r\n    };\r\n  })\r\n  .directive('draggableItem', ['$rootScope', function($rootScope){\r\n    return {\r\n      restrict : 'A',\r\n      link : function(scope : any, el, attrs, controller) {\r\n        \r\n        const itemId = scope.item.id;\r\n\r\n        if (attrs.draggableItem == \"true\") {          \r\n          angular.element(el).attr(\"draggable\", \"true\");          \r\n          el.bind(\"dragstart\", function (e) {\r\n            document.getElementById(\"champ-hold\").classList.toggle(\"no-tooltip\");\r\n            e.dataTransfer.setData('text', itemId);\r\n            const rect = el[0].getBoundingClientRect();\r\n            e.dataTransfer.setDragImage(el[0], rect.width/2, rect.height/2);\r\n            $rootScope.$emit(\"item-drag-start\", itemId);\r\n            setTimeout(function(){\r\n              angular.element(el)[0].style.opacity=\"0.3\";\r\n            });\r\n          });\r\n          el.bind(\"dragend\", function(e){\r\n            document.getElementById(\"champ-hold\").classList.toggle(\"no-tooltip\");\r\n            angular.element(el)[0].style.opacity=\"\";\r\n            $rootScope.$emit(\"item-drag-end\", itemId);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }])\r\n  .directive('droppableTarget', ['$rootScope', function($rootScope){\r\n    return {\r\n      restrict : 'A',\r\n      link : function(scope : any, el, attrs, controller) {\r\n      \r\n        const type = scope.item.s;\r\n\r\n        el.bind(\"dragover\", function (e) {\r\n          if (e.preventDefault) {\r\n              e.preventDefault(); // Necessary. Allows us to drop.\r\n          }\r\n\r\n          e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.\r\n          return false;\r\n        });\r\n\r\n        el.bind(\"dragenter\", function (e) {\r\n          if (e.target && e.target.classList && e.target.classList.contains(\"icon\")) {\r\n            angular.element(e.target.parentElement).addClass('over');\r\n          }\r\n          \r\n        });\r\n\r\n        el.bind(\"dragleave\", function (e) {\r\n          if (e.target && e.target.classList && e.target.classList.contains(\"icon\")) {\r\n            angular.element(e.target.parentElement).removeClass('over');\r\n          }\r\n        });\r\n\r\n        el.bind(\"drop\", function (e) {\r\n          if (e.preventDefault) {\r\n              e.preventDefault(); // Necessary. Allows us to drop.\r\n          }\r\n\r\n          if (e.stopPropagation) {\r\n              e.stopPropagation(); // Necessary. Allows us to drop.\r\n          }\r\n          if (e.target.classList.contains(\"icon\")) {\r\n            angular.element(e.target.parentElement).removeClass('over');\r\n          }\r\n          const data = e.dataTransfer.getData(\"text\");\r\n          const item = scope.zm.skeletonMenu.itemById(data);\r\n          if (item) {\r\n            const cssClass = scope.zm.skeletonMenu.itemType(item);\r\n            document.getElementsByClassName(\"equipped\")[0].classList.remove(cssClass);\r\n          }\r\n          scope.zm.skeletonMenu.itemDropped(data, type);\r\n        });\r\n        $rootScope.$on(\"item-drag-start\", function(e, result){\r\n\r\n          const item = scope.zm.skeletonMenu.itemById(result);\r\n          if (item) {\r\n            const cssClass = scope.zm.skeletonMenu.itemType(item);\r\n            document.getElementsByClassName(\"equipped\")[0].classList.add(cssClass);\r\n          }\r\n        });\r\n        $rootScope.$on(\"item-drag-end\", function(e, result){\r\n          const item = scope.zm.skeletonMenu.itemById(result);\r\n          if (item) {\r\n            const cssClass = scope.zm.skeletonMenu.itemType(item);\r\n            document.getElementsByClassName(\"equipped\")[0].classList.remove(cssClass);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }]);","import { GameObject, SpritePool } from './classes/gameobject';\r\nimport { GameModel, Graveyard, Army, Humans, ZmMap, Zombies, foregroundContainer, gameContainer, viewableArea, \r\n  backgroundSpriteContainer, characterContainer, fastDistance } from './internal';\r\n\r\nexport class Particles {\r\n\r\n  private static instance : Particles;\r\n  blood = new Blood();\r\n  smoke = new Smoke();\r\n  prestigePoints = new PrestigePoints();\r\n  bullets = new Bullets();\r\n  exclamations = new Exclamations();\r\n  blasts = new Blasts();\r\n  fragments = new Fragments();\r\n\r\n  constructor() {\r\n    if (Particles.instance)\r\n      return Particles.instance;\r\n    Particles.instance = this;\r\n  }\r\n\r\n  initialize() : void {\r\n    this.blood.initialize();\r\n    this.bullets.initialize();\r\n    this.exclamations.initialize();\r\n    this.blasts.initialize();\r\n    this.smoke.initialize();\r\n    this.fragments.initialize();\r\n    this.prestigePoints.initialize();\r\n  }\r\n\r\n  update(timeDiff : number) : void {\r\n    this.blood.update(timeDiff);\r\n    this.bullets.update(timeDiff);\r\n    this.exclamations.update(timeDiff);\r\n    this.blasts.update(timeDiff);\r\n    this.smoke.update(timeDiff);\r\n    this.fragments.update(timeDiff);\r\n    this.prestigePoints.update(timeDiff);\r\n  }\r\n}\r\n\r\nexport class PrestigePoints extends SpritePool<GameObject> {\r\n  private static instance : PrestigePoints;\r\n  constructor() {\r\n    super();\r\n    if (PrestigePoints.instance)\r\n      return PrestigePoints.instance;\r\n    PrestigePoints.instance = this;\r\n    this.create = (tex) => new GameObject(tex);\r\n  }\r\n  zmMap = new ZmMap();\r\n  gameModel : GameModel;\r\n  speed = 20;\r\n  targetElement : HTMLElement;\r\n  animElement : HTMLElement;\r\n\r\n\tinitialize() : void {\r\n    this.gameModel = GameModel.getInstance();\r\n    if (!this.container) {\r\n      this.setup(new PIXI.Container(), PIXI.Texture.from(\"pp.png\"));\r\n      foregroundContainer.addChild(this.container);      \r\n    }\r\n    this.targetElement = document.getElementById(\"prestige-button\");\r\n    this.animElement = document.getElementById(\"prestige-bg\");\r\n  }\r\n  \r\n\tupdate(timeDiff : number) : void {\r\n    if (!this.gameModel.persistentData.particles) {\r\n      this.container.visible = false;\r\n      return;\r\n    } else {\r\n      this.container.visible = true;\r\n    }\r\n    let target = {x:0, y:0};\r\n    if (this.targetElement != null) {\r\n      const rect  = this.targetElement.getBoundingClientRect();\r\n      target = {x : rect.x + rect.width / 2, y : rect.y + rect.height / 2};\r\n      target.x -= gameContainer.x;\r\n      target.y -= gameContainer.y;\r\n      target.x = target.x / gameContainer.scale.x;\r\n      target.y = target.y / gameContainer.scale.y;\r\n      \r\n    }\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff, target);\r\n      }\r\n\t\t}\r\n  }\r\n\r\n  updatePart(sprite : GameObject, timeDiff : number, target : {x:number, y:number}) : void {\r\n    const vector = this.zmMap.normalizeVector({x : target.x - sprite.x, y: target.y - sprite.y});\r\n    const xDiff = (vector.x * 300) - sprite.xSpeed;\r\n    const yDiff = (vector.y * 300) - sprite.ySpeed;\r\n    sprite.xSpeed += xDiff * timeDiff;\r\n    sprite.ySpeed += yDiff * timeDiff;\r\n    sprite.x += sprite.xSpeed * timeDiff;\r\n    sprite.y += sprite.ySpeed * timeDiff;\r\n    if (fastDistance(sprite.x, sprite.y, target.x, target.y) < 30) {\r\n      sprite.visible = false;\r\n      sprite.x = 100;\r\n      sprite.y = 100;\r\n      if (this.animElement) {\r\n        const prestigeBg = this.animElement;\r\n        prestigeBg.classList.toggle(\"levelup\");\r\n        setTimeout(function() {\r\n          prestigeBg.classList.toggle(\"levelup\");\r\n        }, 3000);\r\n      }\r\n    }\r\n  }\r\n\r\n  newPart(x : number,y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    const sprite = this.getSprite();\r\n    sprite.x = x;\r\n    sprite.y = y - 10;\r\n    sprite.visible = true;\r\n    sprite.scale.set(2, 2);\r\n    sprite.xSpeed = 0;\r\n    sprite.ySpeed = -100;\r\n  }\r\n}\r\n\r\n\r\nexport class Blood {\r\n  private static instance : Blood;\r\n  constructor() {\r\n    if (Blood.instance)\r\n      return Blood.instance;\r\n    Blood.instance = this;\r\n  }\r\n  maxParts = 500;\r\n  partCounter = 0;\r\n  partsPerSplatter = 6;\r\n  ecoPartsPerSplatter = 3;\r\n  container = null;\r\n  sprites : Fragment[] = [];\r\n  gravity = 100;\r\n  spraySpeed = 20;\r\n  fadeSpeed = 0.7;\r\n  visibleParts = 0;\r\n  viewableArea = null;\r\n  gameModel : GameModel;\r\n  texture : PIXI.Texture;\r\n  plagueTexture : PIXI.Texture;\r\n\r\n\tgetTexture(color : string) : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 1;\r\n\t\tblast.height = 1;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = color;\r\n\t\tblastCtx.fillRect(0, 0, 1, 1);\r\n\t\treturn PIXI.Texture.from(blast);\r\n  }\r\n  \r\n\tinitialize() : void {\r\n    this.gameModel = GameModel.getInstance();\r\n    this.viewableArea = viewableArea;\r\n    if (!this.container) {\r\n      this.container = new PIXI.Container();\r\n      backgroundSpriteContainer.addChild(this.container);\r\n\r\n      this.texture = this.getTexture(\"#ff0000\");\r\n      this.plagueTexture = this.getTexture(\"#00ff00\");\r\n    }\r\n\r\n    if (this.sprites.length < this.maxParts) {\r\n      for (let i = 0; i < this.maxParts; i++) {\r\n        const sprite = new Fragment(this.texture);\r\n        this.sprites.push(sprite);\r\n        sprite.visible = false;\r\n        if (Math.random() > 0.5)\r\n          sprite.scale.set(2,2);\r\n        this.container.addChild(sprite);\r\n      }\r\n    }\r\n  }\r\n  \r\n\tupdate(timeDiff : number) : void {\r\n    if (!this.gameModel.persistentData.particles) {\r\n      this.container.visible = false;\r\n      return;\r\n    } else {\r\n      this.container.visible = true;\r\n    }\r\n    this.visibleParts = 0;\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n        this.visibleParts++;\r\n      }\r\n\t\t}\r\n  }\r\n\r\n  updatePart(sprite : Fragment, timeDiff : number) : void {\r\n    if (sprite.hitFloor) {\r\n      sprite.alpha -= this.fadeSpeed * timeDiff;\r\n      if (sprite.alpha <= 0) {\r\n        sprite.visible = false;\r\n      }\r\n    } else {\r\n      sprite.ySpeed += this.gravity * timeDiff;\r\n      sprite.x += sprite.xSpeed * timeDiff;\r\n      sprite.y += sprite.ySpeed * timeDiff;\r\n      if (sprite.y >= sprite.floor) {\r\n        sprite.hitFloor = true;\r\n      }\r\n    }  \r\n  }\r\n\r\n  newPart(x : number, y : number, plague : boolean) : void {\r\n\r\n    if (this.viewableArea.hideParticle(x,y)) {\r\n      return;\r\n    }\r\n    const sprite = this.sprites[this.partCounter++];\r\n    if (this.partCounter >= this.maxParts) {\r\n      this.partCounter = 0;\r\n    }\r\n    if (plague) {\r\n      sprite.texture = this.plagueTexture;\r\n    } else {\r\n      sprite.texture = this.texture; \r\n    }\r\n    sprite.x = x;\r\n    sprite.y = y - (8 + Math.random() * 10);\r\n    sprite.floor = y;\r\n    sprite.hitFloor = false;\r\n    sprite.visible = true;\r\n    sprite.alpha = 1;\r\n    sprite.scale.set(1,1);\r\n    if (Math.random() > 0.5)\r\n      sprite.scale.set(2, 2);\r\n    const xSpeed = Math.random() * (plague ? this.spraySpeed * 1.5 : this.spraySpeed);\r\n    sprite.xSpeed = Math.random() > 0.5 ? -1 * xSpeed : xSpeed;\r\n    sprite.ySpeed = -1 * (plague ? this.spraySpeed * 1.5 : this.spraySpeed);\r\n  }\r\n\r\n  newSplatter(x : number , y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    if (this.visibleParts < 0.9 * this.maxParts) {\r\n      for (let i=0; i<this.partsPerSplatter; i++) {\r\n        this.newPart(x, y, false);\r\n      }\r\n    } else {\r\n      for (let i=0; i<this.ecoPartsPerSplatter; i++) {\r\n        this.newPart(x, y, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  newPlagueSplatter(x : number, y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    for (let i=0; i < this.partsPerSplatter; i++) {\r\n      this.newPart(x, y, true);\r\n    }\r\n  }\r\n}\r\n\r\nclass Bone extends GameObject {\r\n  fadeTime  = 0;\r\n  floor = 0;\r\n  rotSpeed = 0;\r\n  collector = null;\r\n  hitFloor = false;\r\n  collected = false;\r\n}\r\n\r\nexport class Bones {\r\n\r\n  private static instance : Bones;\r\n  constructor() {\r\n    if (Bones.instance)\r\n      return Bones.instance;\r\n    Bones.instance = this;\r\n  }\r\n\r\n  maxParts = 100;\r\n  partsPerSplatter = 3;\r\n  container = null;\r\n  sprites : Bone[] = [];\r\n  discardedSprites : Bone[] = [];\r\n  uncollected : Bone[] = [];\r\n  gravity = 100;\r\n  spraySpeed = 20;\r\n  fadeTime = 40;\r\n  fadeSpeed = 0.2;\r\n  fadeBones = false;\r\n  texture = null as PIXI.Texture;\r\n  gameModel = null;\r\n\r\n\tgetTexture() : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 4;\r\n\t\tblast.height = 1;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = \"#dddddd\";\r\n\t\tblastCtx.fillRect(0, 0, 4, 1);\r\n\t\treturn PIXI.Texture.from(blast);\r\n  }\r\n  \r\n\tinitialize() : void {\r\n    this.gameModel = GameModel.getInstance();\r\n    if (!this.container) {\r\n      this.container = new PIXI.Container();\r\n      backgroundSpriteContainer.addChild(this.container);\r\n      this.texture = this.getTexture();\r\n    }\r\n\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.sprites[i].collected = true;\r\n      this.sprites[i].visible = false;\r\n      this.container.removeChild(this.sprites[i]);\r\n    }\r\n\r\n    if (this.sprites.length < this.maxParts) {\r\n      for (let i = 0; i < this.maxParts; i++) {\r\n        const sprite = new Bone(this.texture);\r\n        sprite.visible=false;\r\n        this.sprites.push(sprite);\r\n      }\r\n    }\r\n    this.discardedSprites = this.sprites.slice();\r\n  }\r\n  \r\n\tupdate(timeDiff : number) : void {\r\n    const uncollectedBones = [];\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n        uncollectedBones.push(this.sprites[i]);\r\n      }\r\n    }\r\n    this.uncollected = uncollectedBones;\r\n    this.fadeBones = uncollectedBones.length > 200;\r\n  }\r\n\r\n  updatePart(sprite : Bone, timeDiff : number) : void {\r\n    if (sprite.collected) {\r\n      sprite.visible = false;\r\n      this.discardedSprites.push(sprite);\r\n      this.container.removeChild(sprite);\r\n      return;\r\n    }\r\n    if (sprite.hitFloor) {\r\n      \r\n      if (this.fadeBones)\r\n        sprite.fadeTime -= timeDiff;\r\n\r\n      if (sprite.fadeTime < 0 && !sprite.collector) {\r\n        sprite.alpha -= this.fadeSpeed * timeDiff;\r\n        if (sprite.alpha <= 0) {\r\n          sprite.visible = false;\r\n          this.discardedSprites.push(sprite);\r\n          this.container.removeChild(sprite);\r\n        }\r\n      }\r\n      \r\n    } else {\r\n      sprite.ySpeed += this.gravity * timeDiff;\r\n      sprite.rotation += sprite.rotSpeed * timeDiff;\r\n      sprite.x += sprite.xSpeed * timeDiff;\r\n      sprite.y += sprite.ySpeed * timeDiff;\r\n      if (sprite.y >= sprite.floor) {\r\n        sprite.hitFloor = true;\r\n      }\r\n    } \r\n  }\r\n\r\n  newPart(x : number, y : number) : void {\r\n    let sprite = null;\r\n    if (this.discardedSprites.length > 0) {\r\n      sprite = this.discardedSprites.pop();\r\n    } else {\r\n      sprite = new PIXI.Sprite(this.texture);\r\n      this.sprites.push(sprite);\r\n    }\r\n    this.container.addChild(sprite);\r\n    sprite.x = x;\r\n    sprite.y = y - (8 + Math.random() * 10);\r\n    sprite.fadeTime = Math.random() * this.fadeTime;\r\n    sprite.rotation = Math.random() * 5\r\n    sprite.rotSpeed =  -2 + Math.random() * 4;\r\n    sprite.floor = y;\r\n    sprite.hitFloor = false;\r\n    sprite.collected = false;\r\n    sprite.collector = false;\r\n    sprite.visible = true;\r\n    sprite.alpha = 1;\r\n    sprite.scale = {x:1,y:1};\r\n    if (Math.random() > 0.5)\r\n      sprite.scale = {x:1.5,y:1.5};\r\n    const xSpeed = Math.random() * this.spraySpeed;\r\n    sprite.xSpeed = Math.random() > 0.5 ? -1 * xSpeed : xSpeed;\r\n    sprite.ySpeed = -1 * this.spraySpeed;\r\n  }\r\n\r\n  newBones(x : number, y : number) : void {\r\n    if (!this.gameModel.constructions.graveyard)\r\n      return;\r\n    for (let i=0; i<this.partsPerSplatter; i++) {\r\n      this.newPart(x,y);\r\n    }\r\n  }\r\n}\r\n\r\nclass Exclamation extends PIXI.Sprite {\r\n  time = 0;\r\n  target = null;\r\n}\r\n\r\nexport class Exclamations {\r\n  private static instance : Exclamations;\r\n  constructor() {\r\n    if (Exclamations.instance)\r\n      return Exclamations.instance;\r\n    Exclamations.instance = this;\r\n  }\r\n  sprites : Exclamation[] = [];\r\n  discardedSprites : Exclamation[] = [];\r\n  maxSprites = 10;\r\n  container : PIXI.Container;\r\n  height = 20;\r\n  fadeSpeed = 4;\r\n  healTexture : PIXI.Texture;\r\n  exclamationTexture : PIXI.Texture;\r\n  radioTexture : PIXI.Texture;\r\n  fireTexture : PIXI.Texture\r\n  shieldTexture : PIXI.Texture;\r\n  poisonTexture : PIXI.Texture;\r\n\r\n  initialize() : void {\r\n    if (!this.container) {\r\n      this.container = new PIXI.Container();\r\n      foregroundContainer.addChild(this.container);\r\n  \r\n      this.healTexture = PIXI.Texture.from(\"healing.png\");\r\n      this.exclamationTexture = PIXI.Texture.from(\"exclamation.png\");\r\n      this.radioTexture = PIXI.Texture.from(\"radio.png\");\r\n      this.fireTexture = PIXI.Texture.from(\"fire.png\");\r\n      this.shieldTexture = PIXI.Texture.from(\"shield.png\");\r\n      this.poisonTexture = PIXI.Texture.from(\"poison.png\");\r\n    }\r\n    \r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.container.removeChild(this.sprites[i]);\r\n    }\r\n\r\n    if (this.sprites.length < this.maxSprites) {\r\n      for (let i = 0; i < this.maxSprites; i++) {\r\n        const sprite = new Exclamation(this.exclamationTexture);\r\n        sprite.anchor.set(0.5, 1);\r\n        this.sprites.push(sprite);\r\n        sprite.visible = false;\r\n      }\r\n    }\r\n\t\t\r\n    this.discardedSprites = this.sprites.slice();\r\n  }\r\n\r\n  newIcon(target : {x: number, y: number, hasIcon: boolean}, texture : PIXI.Texture, displayTime : number) : void {\r\n    if (target.hasIcon)\r\n      return;\r\n    let sprite : Exclamation;\r\n    if (this.discardedSprites.length > 0) {\r\n      sprite = this.discardedSprites.pop();\r\n    } else {\r\n      sprite = new Exclamation(this.exclamationTexture);\r\n      sprite.anchor.set(0.5, 1);\r\n      this.sprites.push(sprite);\r\n    }\r\n    this.container.addChild(sprite);\r\n    sprite.texture = texture;\r\n    sprite.target = target;\r\n    sprite.target.hasIcon = true;\r\n    sprite.x = target.x;\r\n    sprite.y = target.y - this.height;\r\n    sprite.visible = true;\r\n    sprite.time = displayTime;\r\n    sprite.alpha = 1;\r\n    sprite.scale.set(1.5, 1.5);\r\n  }\r\n\r\n  newHealing(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.healTexture, 1);\r\n  }\r\n\r\n  newExclamation(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.exclamationTexture, 2);\r\n  }\r\n\r\n  newRadio(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.radioTexture, 3);\r\n  }\r\n\r\n  newFire(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.fireTexture, 1);\r\n  }\r\n\r\n  newShield(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.shieldTexture, 1);\r\n  }\r\n\r\n  newPoison(target : {x: number, y: number, hasIcon: boolean}) : void {\r\n    this.newIcon(target, this.poisonTexture, 1);\r\n  }\r\n\r\n  update(timeDiff : number) : void {\r\n    for (let i=0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updateSprite(this.sprites[i], timeDiff);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateSprite(sprite : Exclamation, timeDiff : number) : void {\r\n    sprite.x = sprite.target.x;\r\n    sprite.y = sprite.target.y - this.height;\r\n    sprite.time -= timeDiff;\r\n    if (sprite.time < 0) {\r\n      sprite.alpha -= timeDiff * this.fadeSpeed;\r\n      if (sprite.alpha < 0) {\r\n        sprite.visible = false;\r\n        sprite.target.hasIcon = false;\r\n        this.discardedSprites.push(sprite);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Bullet extends GameObject {\r\n  plague = false;\r\n  rocket = false;\r\n  fireball = false;\r\n  target = null;\r\n  source = null;\r\n  hitbox = 0;\r\n  damage = 0;\r\n}\r\n\r\nexport class Bullets {\r\n  private static instance : Bullets;\r\n  constructor() {\r\n    if (Bullets.instance)\r\n      return Bullets.instance;\r\n    Bullets.instance = this;\r\n  }\r\n  zombies = new Zombies();\r\n  humans = new Humans();\r\n  graveyard = new Graveyard();\r\n  army = new Army();\r\n  maxParts = 20;\r\n  speed = 150;\r\n  hitbox = 12;\r\n  sprites : Bullet[] = [];\r\n  discardedSprites : Bullet[] = [];\r\n  fadeSpeed = 0.2;\r\n  texture : PIXI.Texture;\r\n  fireballTexture : PIXI.Texture;\r\n  container : PIXI.Container;\r\n\r\n\tgetTexture() : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 1;\r\n\t\tblast.height = 1;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = \"#ffffff\";\r\n\t\tblastCtx.fillRect(0, 0, 1, 1);\r\n\t\treturn PIXI.Texture.from(blast);\r\n  }\r\n\r\n  getFireballTexture() : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 8;\r\n\t\tblast.height = 8;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\tconst radgrad = blastCtx.createRadialGradient(4, 4, 0, 4, 4, 4);\r\n\t\tradgrad.addColorStop(0, 'rgba(255,255,0,1)');\r\n\t\tradgrad.addColorStop(0.8, 'rgba(255,0,0,0.2)');\r\n\t\tradgrad.addColorStop(1, 'rgba(255,0,0,0)');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = radgrad;\r\n\t\tblastCtx.fillRect(0, 0, 8, 8);\r\n\r\n\t\treturn PIXI.Texture.from(blast);\r\n  }\r\n  \r\n\tinitialize() : void {\r\n\r\n    if (!this.texture) {\r\n      this.texture = this.getTexture();\r\n      this.fireballTexture = this.getFireballTexture();\r\n    }\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      characterContainer.removeChild(this.sprites[i]);\r\n    }\r\n\r\n    if (this.sprites.length < this.maxParts) {\r\n      for (let i = 0; i < this.maxParts; i++) {\r\n        const sprite = new Bullet(this.texture);\r\n        sprite.scale.x = sprite.scale.y = 2;\r\n        sprite.visible = false;\r\n        this.sprites.push(sprite);\r\n      }\r\n    }\r\n\t\t\r\n    this.discardedSprites = this.sprites.slice();\r\n  }\r\n  \r\n\tupdate(timeDiff : number) : void {\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n      }\r\n\t\t}\r\n  }\r\n\r\n  updatePart(sprite : Bullet, timeDiff : number) : void {\r\n    if (fastDistance(sprite.x, sprite.y + 8, sprite.target.x, sprite.target.y) < sprite.hitbox) {\r\n      if (sprite.plague) {\r\n        this.zombies.inflictPlague(sprite.target);\r\n        this.humans.damageHuman(sprite.target, sprite.damage);\r\n      } else if (sprite.fireball) {\r\n        this.humans.burnHuman(sprite.target, sprite.damage);\r\n        this.humans.damageHuman(sprite.target, sprite.damage);\r\n      } else {\r\n        if (!sprite.rocket && sprite.target.bulletReflect && Math.random() < sprite.target.bulletReflect) {\r\n          this.newBullet(sprite.target, sprite.source, sprite.damage, false, false, false);\r\n        } else {\r\n          if (sprite.rocket) {\r\n            if (sprite.target.graveyard) this.graveyard.damageGraveyard(sprite.damage);\r\n            this.army.droneExplosion(sprite.target.x, sprite.target.y, null, sprite.damage);\r\n          } else {\r\n            if (sprite.target.zombie) this.zombies.damageZombie(sprite.target, sprite.damage, sprite.source);\r\n            if (sprite.target.human) this.humans.damageHuman(sprite.target, sprite.damage);\r\n          }\r\n        }\r\n      }\r\n      \r\n      sprite.visible = false;\r\n      this.discardedSprites.push(sprite);\r\n      characterContainer.removeChild(sprite);\r\n    } else {\r\n      sprite.x += sprite.xSpeed * timeDiff;\r\n      sprite.y += sprite.ySpeed * timeDiff;\r\n      sprite.zIndex = sprite.y;\r\n    }\r\n    sprite.alpha -= this.fadeSpeed * timeDiff;\r\n    if (sprite.alpha < 0) {\r\n      sprite.visible = false;\r\n      this.discardedSprites.push(sprite);\r\n      characterContainer.removeChild(sprite);\r\n    }\r\n  }\r\n\r\n  newBullet(source : {x:number, y:number}, target : {x:number, y: number}, damage : number, plague = false, rocket = false, fireball = false) : void {\r\n    let sprite : Bullet;\r\n    if (this.discardedSprites.length > 0) {\r\n     sprite = this.discardedSprites.pop();\r\n    } else {\r\n      sprite = new Bullet(this.texture);\r\n      sprite.scale.x = sprite.scale.y = 2;\r\n      this.sprites.push(sprite);\r\n    }\r\n    characterContainer.addChild(sprite);\r\n    sprite.texture = fireball ? this.fireballTexture : this.texture;\r\n    sprite.source = source;\r\n    sprite.x = source.x;\r\n    sprite.y = source.y - 8;\r\n    if (plague) {\r\n      sprite.y = source.y - 12;\r\n    }\r\n    sprite.target = target;\r\n    sprite.damage = damage;\r\n    sprite.visible = true;\r\n    sprite.alpha = 1;\r\n\r\n    sprite.hitbox = rocket ? this.hitbox * 1.5 : this.hitbox;\r\n\r\n    sprite.plague = plague;\r\n    sprite.rocket = rocket;\r\n    sprite.fireball = fireball;\r\n    sprite.tint = plague ? 0x00FF00 : rocket ? 0xFFEC00 : 0xFFFFFF;\r\n    sprite.scale.x = sprite.scale.y = rocket ? 2.5 : 2;\r\n    if (fireball) {\r\n      sprite.scale.x = sprite.scale.y = 1.5;\r\n    }\r\n\r\n    const xVector = target.x - sprite.x;\r\n    const yVector = (target.y - 8) - sprite.y;\r\n    const ax = Math.abs(xVector);\r\n    const ay = Math.abs(yVector);\r\n    let ratio = 1 / Math.max(ax, ay);\r\n    ratio = ratio * (1.29289 - (ax + ay) * ratio * 0.29289);\r\n    \r\n    sprite.xSpeed = xVector * ratio * this.speed;\r\n    sprite.ySpeed = yVector * ratio * this.speed;\r\n\r\n    sprite.rotation = Math.atan2(sprite.ySpeed, sprite.xSpeed);\r\n  }\r\n}\r\n\r\nexport class Blasts extends SpritePool<GameObject> {\r\n  private static instance : Blasts;\r\n  constructor() {\r\n    super();\r\n    if (Blasts.instance)\r\n      return Blasts.instance;\r\n    Blasts.instance = this;\r\n    this.create = (texture) => new GameObject(texture);\r\n  }\r\n  viewableArea = null;\r\n\r\n\tgetTexture() : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 32;\r\n\t\tblast.height = 32;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\tconst radgrad = blastCtx.createRadialGradient(16, 16, 0, 16, 16, 16);\r\n\t\tradgrad.addColorStop(0, 'rgba(255,255,255,1)');\r\n\t\tradgrad.addColorStop(0.8, 'rgba(255,255,128,0.2)');\r\n\t\tradgrad.addColorStop(1, 'rgba(255,180,0,0)');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = radgrad;\r\n\t\tblastCtx.fillRect(0, 0, 32, 32);\r\n\r\n\t\treturn PIXI.Texture.from(blast);\r\n  }\r\n  \r\n\tinitialize() : void {\r\n    this.viewableArea = viewableArea;\r\n    if (!this.texture) {\r\n      this.texture = this.getTexture();\r\n      this.container = new PIXI.Container();\r\n      foregroundContainer.addChild(this.container);\r\n      this.setup(this.container, this.texture);\r\n    }\r\n\t}\r\n\tupdate(timeDiff : number) : void {\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n      }\r\n\t\t}\r\n  }\r\n  updatePart(sprite : GameObject, timeDiff : number) : void {\r\n    if (sprite.visible) {\r\n      sprite.scale.y -= (10 * timeDiff);\r\n      sprite.scale.x = sprite.scale.y;\r\n      if (sprite.scale.x <= 0) {\r\n        this.discardSprite(sprite);\r\n      }\r\n    }\r\n  }\r\n\tnewBlast(x : number, y : number) : void {\r\n    if (this.viewableArea.hideParticle(x,y)) {\r\n      return;\r\n    }\r\n    const sprite = this.getSprite();\r\n    sprite.anchor.set(0.5,0.5);\r\n    sprite.scale.x = sprite.scale.y = 2;\r\n\t\tsprite.x = x;\r\n    sprite.y = y;\r\n    new Smoke().newCloud(x, y);\r\n  }\r\n\r\n  newDroneBlast(x : number, y : number) : void {\r\n    const sprite = this.getSprite();\r\n    sprite.scale.x = sprite.scale.y = 2;\r\n\t\tsprite.x = x;\r\n    sprite.y = y;\r\n    new Smoke().newDroneCloud(x, y);\r\n\t}\r\n}\r\n\r\n\r\nexport class Smoke extends SpritePool<GameObject> {\r\n  private static instance : Smoke;\r\n  constructor(){\r\n    super();\r\n    if (Smoke.instance)\r\n      return Smoke.instance;\r\n    Smoke.instance = this;\r\n    this.create = (texture) => new GameObject(texture);\r\n  }\r\n  tint = 0xFFFFFF;\r\n  viewableArea = null;\r\n  allowTint = false;\r\n  gameModel = null;\r\n\r\n\tgetTexture() : PIXI.Texture {\r\n\t\tconst size = 8;\r\n    const blast = document.createElement('canvas');\r\n    blast.width = size + 4;\r\n    blast.height = size + 4;\r\n    const blastCtx = blast.getContext('2d');\r\n    blastCtx.shadowBlur = 5;\r\n    blastCtx.shadowColor = \"white\";\r\n    const radgrad = blastCtx.createRadialGradient(size / 2 + 2, size / 2 + 2, 0, size / 2 + 2, size / 2 + 2, size / 2);\r\n    radgrad.addColorStop(0, 'rgba(255,255,255,0.05)');\r\n    radgrad.addColorStop(0.5, 'rgba(255,255,255,0.1)');\r\n    radgrad.addColorStop(1, 'rgba(255,255,255,0)');\r\n    blastCtx.fillStyle = radgrad;\r\n    blastCtx.fillRect(0, 0, size + 4, size + 4);\r\n    return PIXI.Texture.from(blast);\r\n  }\r\n  \r\n\tinitialize() : void {\r\n    this.gameModel = GameModel.getInstance();\r\n    this.viewableArea = viewableArea;\r\n    this.allowTint = this.gameModel.app && this.gameModel.app.renderer && this.gameModel.app.renderer.type == 1;\r\n\r\n    if (!this.texture) {\r\n      this.setup(new PIXI.Container(), this.getTexture());\r\n      foregroundContainer.addChild(this.container);\r\n    }\r\n  }\r\n  \r\n\tupdate(timeDiff : number) : void {\r\n    if (!this.gameModel.persistentData.particles) {\r\n      this.container.visible = false;\r\n      return;\r\n    } else {\r\n      this.container.visible = true;\r\n    }\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n      }\r\n\t\t}\r\n  }\r\n\r\n  updatePart(gameObject : GameObject, timeDiff : number) : void {\r\n    gameObject.scale.y -= (1.5 * timeDiff);\r\n    gameObject.scale.x = gameObject.scale.y;\r\n    gameObject.y += gameObject.ySpeed;\r\n    if (gameObject.scale.x <= 0) {\r\n      this.discardSprite(gameObject);\r\n    }\r\n  }\r\n\r\n  sizeVariance = 0.2;\r\n\r\n\tnewSmoke(x : number, y : number, variance = 0) : void {\r\n    if (this.viewableArea.hideParticle(x,y)) {\r\n      return;\r\n    }\r\n    const gameObject = this.getSprite();\r\n    \r\n    if (this.allowTint) {\r\n      gameObject.tint = this.tint;\r\n    }\r\n\r\n    gameObject.ySpeed = -0.5;\r\n    gameObject.anchor.set(0.5, 0.5);\r\n    gameObject.scale.x = gameObject.scale.y = 1.6 - this.sizeVariance + (Math.random() * this.sizeVariance * 2);\r\n\t\tgameObject.visible = true;\r\n\t\tgameObject.x = x - variance + (Math.random() * variance * 2);\r\n    gameObject.y = y - variance + (Math.random() * variance * 2);\r\n  }\r\n\r\n  newFireSmoke(x : number, y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    this.tint = 0xFFFFFF;\r\n    this.newSmoke(x, y, 3);\r\n  }\r\n\r\n  newCloud(x : number, y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    this.tint = 0x00FF00;\r\n    for (let i = 0; i < 10; i++) {\r\n      this.newSmoke(x, y, 16);\r\n    }\r\n  }\r\n\r\n  newDroneCloud(x : number, y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    this.tint = 0xFFFFFF;\r\n    for (let i = 0; i < 10; i++) {\r\n      this.newSmoke(x, y, 24);\r\n    }\r\n  }\r\n\r\n  newZombieSpawnCloud(x : number, y : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    this.tint = 0x00FF00;\r\n    for (let i = 0; i < 5; i++) {\r\n      this.newSmoke(x, y, 6);\r\n    }\r\n  }\r\n}\r\n\r\nclass Fragment extends GameObject {\r\n  hitFloor = false;\r\n  floor : number;\r\n  rotSpeed : number;\r\n}\r\n\r\nexport class Fragments extends SpritePool<Fragment> {\r\n  private static instance : Fragments;\r\n  constructor() {\r\n    super();\r\n    if (Fragments.instance)\r\n      return Fragments.instance;\r\n    Fragments.instance = this;\r\n    this.create = (texture) => new Fragment(texture);\r\n  }\r\n  partsPerSplatter = 15;\r\n  gravity = 100;\r\n  spraySpeed = 50;\r\n  fadeSpeed = 0.7;\r\n  texture : PIXI.Texture;\r\n  viewableArea = viewableArea;\r\n  gameModel : GameModel;\r\n\tgetTexture() : PIXI.Texture {\r\n\t\tconst blast = document.createElement('canvas');\r\n\t\tblast.width = 5;\r\n\t\tblast.height = 1;\r\n\t\tconst blastCtx = blast.getContext('2d');\r\n\r\n\t\t// draw shape\r\n\t\tblastCtx.fillStyle = \"#FFFFFF\";\r\n\t\tblastCtx.fillRect(0, 0, 5, 1);\r\n\t\treturn PIXI.Texture.from(blast);\r\n\t}\r\n\tinitialize() : void {\r\n    this.gameModel = GameModel.getInstance();\r\n    this.viewableArea = viewableArea;\r\n    if (!this.container) {\r\n      this.container = new PIXI.Container();\r\n      backgroundSpriteContainer.addChild(this.container);\r\n      this.texture = this.getTexture();\r\n      this.setup(this.container, this.texture);\r\n    }\r\n\t}\r\n\tupdate(timeDiff : number) : void {\r\n    if (!this.gameModel.persistentData.particles) {\r\n      this.container.visible = false;\r\n      return;\r\n    } else {\r\n      this.container.visible = true;\r\n    }\r\n\t\tfor (let i = 0; i < this.sprites.length; i++) {\r\n      if (this.sprites[i].visible) {\r\n        this.updatePart(this.sprites[i], timeDiff);\r\n      }\r\n\t\t}\r\n  }\r\n  updatePart(sprite : Fragment, timeDiff : number) : void {\r\n    if (sprite.hitFloor) {\r\n      sprite.alpha -= this.fadeSpeed * timeDiff;\r\n      if (sprite.alpha <= 0) {\r\n        this.discardSprite(sprite);\r\n      }\r\n    } else {\r\n      sprite.ySpeed += this.gravity * timeDiff;\r\n      sprite.x += sprite.xSpeed * timeDiff;\r\n      sprite.y += sprite.ySpeed * timeDiff;\r\n      if (sprite.y >= sprite.floor) {\r\n        sprite.hitFloor = true;\r\n      }\r\n      sprite.rotation += sprite.rotSpeed * timeDiff;\r\n    }    \r\n  }\r\n  newPart(x : number, y : number, tint : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    if (this.viewableArea.hideParticle(x,y)) {\r\n      return;\r\n    }\r\n    const sprite = this.getSprite();\r\n    sprite.tint = tint;\r\n    sprite.x = x;\r\n    sprite.y = y - (8 + Math.random() * 10);\r\n    sprite.floor = y;\r\n    sprite.hitFloor = false;\r\n    sprite.rotation = Math.random() * 5\r\n    sprite.rotSpeed =  -2 + Math.random() * 4;\r\n    sprite.alpha = 1;\r\n    sprite.scale.set(2, 2);\r\n    const xSpeed = Math.random() * this.spraySpeed;\r\n    sprite.xSpeed = Math.random() > 0.5 ? -1 * xSpeed : xSpeed;\r\n    sprite.ySpeed = -1 * (10 + (Math.random() * this.spraySpeed));\r\n  }\r\n  newFragmentExplosion(x : number, y : number, tint : number) : void {\r\n    if (!this.container.visible) {\r\n      return;\r\n    }\r\n    for (let i=0; i < this.partsPerSplatter; i++) {\r\n      this.newPart(x, y, tint);\r\n    }\r\n  }\r\n}","import { CharacterObject } from \"./gameobject\";\r\nimport { Human } from \"./humanclasses\";\r\n\r\nexport class Creature extends CharacterObject {\r\n    currentDirection = 0;\r\n    bulletReflect = 0;\r\n    zombieId = 0;\r\n    target : Human;\r\n    state : CreatureState;\r\n    lastKnownBuilding = null;\r\n    maxSpeed = 0;\r\n    graveyard = false;\r\n    regenTimer = 0;\r\n    level = 0;\r\n    creatureType = 0;\r\n    scaling = 0;\r\n    attackDamage = 0;\r\n    speedMultiplier = 1;\r\n    immuneToBurns = false;\r\n    zombie = true;\r\n    deadTexture : PIXI.Texture[];\r\n    textureSet = {\r\n        set:false,\r\n        down : [], up : [], left : [], right : [], dead : []\r\n    }\r\n}\r\n  \r\nexport enum CreatureState {\r\n    lookingForTarget,\r\n    movingToTarget,\r\n    attackingTarget\r\n}","export type Position = {\r\n    x: number;\r\n    y: number;\r\n    width?: number;\r\n    height?: number;\r\n}\r\n\r\nexport class Wall extends PIXI.TilingSprite {\r\n    collisionX = 0;\r\n    collisionY = 0;\r\n    collisionWidth = 0;\r\n    collisionHeight = 0;\r\n    constructor(texture: PIXI.Texture) {\r\n        super(texture);\r\n    }\r\n}\r\n\r\nexport class Building {\r\n    id = 0;\r\n    x = 0;\r\n    y = 0;\r\n    width = 0;\r\n    height = 0;\r\n    entrance = null;\r\n    container: PIXI.Container;\r\n    floorSprite: PIXI.TilingSprite;\r\n    walls: Wall[];\r\n    corners: Position[];\r\n    constructor(id: number, x: number, y: number, width: number, height: number) {\r\n        this.id = id;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nexport class CharacterTimers {\r\n    attack = 0;\r\n    scan = 0;\r\n    smoke = 0;\r\n    burnTick = 0;\r\n    ability = 0;\r\n    dogStun = 0;\r\n    target = 0;\r\n}\r\n\r\nexport class CharacterFlags {\r\n    burning = false;\r\n    infected = false;\r\n    dead = false;\r\n}\r\n\r\nexport class CharacterObject extends PIXI.AnimatedSprite {\r\n    xSpeed = 0;\r\n    ySpeed = 0;\r\n    health = 0;\r\n    maxHealth = 0;\r\n    zombie = false;\r\n    targetVector = { x: 0, y: 0 };\r\n    burnDamage = 0;\r\n    currentPoi : Building;\r\n    hasIcon = false;\r\n    flags = new CharacterFlags();\r\n    timer = new CharacterTimers();\r\n    constructor(textures: PIXI.Texture[]) {\r\n        super(textures);\r\n    }\r\n    /**\r\n     * Resets speed, alpha, visibility, burnDamage, currentPoi, dead flag, burning flag, infected flag\r\n     */\r\n    reset() : void {\r\n        this.xSpeed = 0;\r\n        this.ySpeed = 0;\r\n        this.alpha = 1;\r\n        this.visible = true;\r\n        this.burnDamage = 0;\r\n        this.currentPoi = null;\r\n        this.flags.dead = false;\r\n        this.flags.burning = false;\r\n        this.flags.infected = false;\r\n    }\r\n}\r\n\r\nexport class GameObject extends PIXI.Sprite {\r\n    xSpeed = 0;\r\n    ySpeed = 0;\r\n    constructor(texture: PIXI.Texture) {\r\n        super(texture);\r\n    }\r\n}\r\n\r\nexport class SpritePool<T extends PIXI.Sprite> {\r\n    sprites: T[] = [];\r\n    discardedSprites: T[] = [];\r\n    container: PIXI.Container;\r\n    texture: PIXI.Texture;\r\n    create: (texture: PIXI.Texture) => T;\r\n\r\n    setup(container: PIXI.Container, texture: PIXI.Texture): void {\r\n        this.container = container;\r\n        this.texture = texture;\r\n    }\r\n\r\n    discardSprite(gameObject: T): void {\r\n        gameObject.visible = false;\r\n        this.discardedSprites.push(gameObject);\r\n    }\r\n\r\n    getSprite(): T {\r\n        if (this.discardedSprites.length > 0) {\r\n            const gameObject = this.discardedSprites.pop();\r\n            gameObject.visible = true;\r\n            return gameObject;\r\n        }\r\n        const gameObject = this.create(this.texture);\r\n        this.container.addChild(gameObject);\r\n        this.sprites.push(gameObject);\r\n        return gameObject;\r\n    }\r\n\r\n}","import { Creature } from \"./creatureclasses\";\r\nimport { Building, CharacterFlags, CharacterObject, CharacterTimers } from \"./gameobject\";\r\n\r\nexport enum HumanState {\r\n    standing, walking, attacking, fleeing, escaping\r\n}\r\n\r\nexport class VIPText extends PIXI.Text {\r\n    human = null;\r\n    yOffset = 0;\r\n}\r\n\r\nexport class HumanTimers extends CharacterTimers {\r\n    flee = 0;\r\n    standing = 0;\r\n    target = 0;\r\n    plagueTick = 0;\r\n    healTick = 0;\r\n}\r\n\r\nexport class HumanFlags extends CharacterFlags {\r\n    dog = false;\r\n    doctor = false;\r\n    tank = false;\r\n    vip = false;\r\n    torchBearer = false;\r\n}\r\n\r\nexport class Human extends CharacterObject {\r\n    maxSpeed = 0;\r\n    deadTexture: PIXI.Texture[];\r\n    flags = new HumanFlags();\r\n    target = null;\r\n    speedMod = 0;\r\n    human = true;\r\n    plagueTicks = 0;\r\n    plagueDamage = 0;\r\n    visionDistance = 0;\r\n    lastKnownBuilding: Building;\r\n    zombieTarget: Creature;\r\n    state: HumanState;\r\n    timer = new HumanTimers();\r\n}","import { Creatures, GameModel } from './internal';\n\nexport class CreatureFactory {\n\n  private static instance : CreatureFactory;\n  constructor() {\n    if (CreatureFactory.instance)\n      return CreatureFactory.instance;\n    CreatureFactory.instance = this;\n  }\n\n  gameModel = GameModel.getInstance();\n  // creature = new Creatures();\n\n  spawnedSavedCreatures = false;\n\n  types = {\n    earthGolem:1,\n    airGolem:2,\n    fireGolem:3,\n    waterGolem:4\n  };\n\n  creatures = [\n    new Creature(1, this.types.earthGolem, \"Earth Golem\", 3000, 75, 30, 800, \"A golem born from rocks and mud, able to take a lot of punishment and taunt enemies to attack it\"),\n    new Creature(2, this.types.airGolem, \"Air Golem\", 1200, 110, 45, 900, \"A fast moving golem able to cover large distances and chase targets down\"),\n    new Creature(3, this.types.fireGolem, \"Fire Golem\", 1200, 130, 32, 1000, \"A fireball spewing golem that ignites everything it touches\"),\n    new Creature(4, this.types.waterGolem, \"Water Golem\", 1500, 90, 30, 1100, \"A calming golem that restores health to nearby units\")\n  ];\n\n  creatureScaling = 1.75;\n  creatureCostScaling = 2;\n\n  update(timeDiff : number) : void {\n    const creatures = new Creatures();\n    const creatureCount = creatures.creatureCount;\n    for (let i = 0; i < this.creatures.length; i++) {\n      if (this.creatures[i].building) {\n        this.creatures[i].timeLeft -= timeDiff;\n        if (this.creatures[i].timeLeft < 0) {\n          this.spawnCreature(this.creatures[i]);\n          this.creatures[i].building = false;\n        }\n      } else {\n        if (typeof creatureCount[this.creatures[i].type] !== 'undefined' && creatureCount[this.creatures[i].type] < this.creatures[i].autobuild) {\n          this.startBuilding(this.creatures[i]);\n        }\n      }\n      if (this.gameModel.persistentData.creatureLevels[this.creatures[i].id])\n        this.creatures[i].level = this.gameModel.persistentData.creatureLevels[this.creatures[i].id];\n    }\n  }\n\n  purchasePrice(creature : Creature) : number {\n    return creature.baseCost * Math.pow(this.creatureCostScaling, creature.level - 1);\n  }\n\n  levelPrice(creature : Creature) : number {\n    return creature.baseCost * Math.pow(this.creatureCostScaling, creature.level) * 5;\n  }\n\n  levelCreature(creature : Creature) : void {\n    if (this.levelPrice(creature) < this.gameModel.persistentData.parts) {\n      this.gameModel.persistentData.parts -= this.levelPrice(creature);\n      creature.level++;\n      this.gameModel.persistentData.creatureLevels[creature.id] = creature.level;\n    }\n  }\n\n  canAffordCreature(creature : Creature) : boolean {\n    return this.purchasePrice(creature) < this.gameModel.persistentData.parts;\n  }\n\n  creaturesBuildingCount() : number {\n    let count = 0;\n    for (let i = 0; i < this.creatures.length; i++) {\n      if (this.creatures[i].building) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  startBuilding(creature : Creature) : void {\n    if (creature.building) {\n      return;\n    }\n    if (!this.canAffordCreature(creature)) {\n      return;\n    }\n    if (this.creaturesBuildingCount() + this.gameModel.creatureCount >= this.gameModel.creatureLimit) {\n      return;\n    }\n    creature.building = true;\n    creature.timeLeft = creature.time;\n    this.gameModel.persistentData.parts -= this.purchasePrice(creature);\n  }\n\n  creatureAutoBuildNumber(creature : Creature, number : number) : void {\n    if (creature.autobuild + number >= 0) {\n      creature.autobuild += number;\n      this.gameModel.persistentData.creatureAutobuild[creature.id] = creature.autobuild;\n    }\n  }\n\n  updateAutoBuild() : void {\n    for (let i = 0; i < this.creatures.length; i++) {\n      this.creatures[i].autobuild = this.gameModel.persistentData.creatureAutobuild[this.creatures[i].id] || 0;\n    }\n  }\n\n  resetLevels() : void {\n    for (let i = 0; i < this.creatures.length; i++) {\n      this.creatures[i].level = 1;\n    }\n  }\n\n  spawnCreature(creature : Creature) : void {\n    const creatures = new Creatures();\n    const health = creature.baseHealth * Math.pow(this.creatureScaling, creature.level - 1) * this.gameModel.golemHealthPCMod;\n    const damage = creature.baseDamage * Math.pow(this.creatureScaling, creature.level - 1) * this.gameModel.golemDamagePCMod;\n    creatures.spawnCreature(health, damage, creature.speed, creature.type, creature.level);\n  }\n\n  spawnSavedCreatures() : void {\n    if (!this.spawnedSavedCreatures) {\n      let creaturesSpawned = 0;\n      for (let i=0; i < this.gameModel.persistentData.savedCreatures.length; i++) {\n        creaturesSpawned++\n        if (creaturesSpawned <= this.gameModel.creatureLimit) {\n          const savedCreature = this.gameModel.persistentData.savedCreatures[i];\n          const creature = this.creatures.filter(c => c.type == savedCreature.t)[0];\n          creature.level = savedCreature.l;\n          this.spawnCreature(creature);\n        }\n      }\n      this.spawnedSavedCreatures = true;\n    }\n  }\n\n  creatureStats(creature : Creature) : {thisLevel:CreatureStats,nextLevel:CreatureStats} {\n    return {\n      thisLevel : {\n        level : creature.level,\n        health : creature.baseHealth * Math.pow(this.creatureScaling, creature.level - 1) * this.gameModel.golemHealthPCMod,\n        damage : creature.baseDamage * Math.pow(this.creatureScaling, creature.level - 1) * this.gameModel.golemDamagePCMod,\n        cost : creature.baseCost * Math.pow(this.creatureCostScaling, creature.level - 1)\n      },\n      nextLevel : {\n        level : creature.level + 1,\n        health : creature.baseHealth * Math.pow(this.creatureScaling, creature.level) * this.gameModel.golemHealthPCMod,\n        damage : creature.baseDamage * Math.pow(this.creatureScaling, creature.level) * this.gameModel.golemDamagePCMod,\n        cost : creature.baseCost * Math.pow(this.creatureCostScaling, creature.level)\n      }\n    }\n  } \n}\n\ntype CreatureStats = {\n  level:number, health:number, damage:number, cost:number\n}\n\nclass Creature {\n  id : number;\n  type : number;\n  name : string;\n  baseHealth : number;\n  baseDamage : number;\n  speed : number;\n  baseCost : number;\n  description : string;\n  time : number;\n  building : boolean;\n  timeLeft : number;\n  autobuild : number;\n  level : number;\n  constructor(id : number, type : number, name : string, baseHealth : number, baseDamage : number, speed : number, baseCost : number, \n      description : string) {\n    this.id = id;\n    this.type = type;\n    this.name = name;\n    this.baseHealth = baseHealth;\n    this.baseDamage = baseDamage;\n    this.speed = speed;\n    this.baseCost = baseCost;\n    this.description = description;\n    this.time = 3;\n    this.building = false;\n    this.timeLeft = 10;\n    this.autobuild = 0;\n    this.level = 1;\n  }\n}","import { Creature, CreatureState } from \"./classes/creatureclasses\";\r\nimport { CharacterFlags } from \"./classes/gameobject\";\r\nimport { Bullets, Smoke, fastDistance, magnitude, CreatureFactory, GameModel, Graveyard, Humans, ZmMap,\r\n  Blasts, Blood, Bones, Exclamations, characterContainer, Zombies } from \"./internal\";\r\n\r\n\r\nexport class Creatures {\r\n  private static instance : Creatures;\r\n  constructor() {\r\n    if (Creatures.instance)\r\n      return Creatures.instance;\r\n    Creatures.instance = this;\r\n  }\r\n  creatureFactory = new CreatureFactory();\r\n  map : ZmMap;\r\n  model : GameModel;\r\n  graveyard : Graveyard;\r\n  smoke : Smoke;\r\n  bullets : Bullets;\r\n  humans : Humans;\r\n  zombies = new Zombies();\r\n  exclamations : Exclamations;\r\n  blood : Blood;\r\n  bones : Bones;\r\n  blasts : Blasts;\r\n  creatures : Creature[] = [];\r\n  creatureCount = [];\r\n  aliveCreatures : Creature[] = [];\r\n  aliveZombies = [];\r\n  graveyardAttackers = [];\r\n  discardedSprites : Creature[] = [];\r\n  aliveHumans = [];\r\n  scaling = 1.6;\r\n  moveTargetDistance = 15;\r\n  attackDistance = 20;\r\n  attackSpeed = 3;\r\n  targetDistance = 100;\r\n  fadeSpeed = 0.1;\r\n  currId = 1;\r\n  scanTime = 3;\r\n  creatureTypes = this.creatureFactory.types;\r\n  golemTextures = {\r\n    set:false,\r\n    down : [] as PIXI.Texture[],\r\n    up : [] as PIXI.Texture[],\r\n    left : [] as PIXI.Texture[],\r\n    right : [] as PIXI.Texture[],\r\n    dead : [] as PIXI.Texture[]\r\n  };\r\n  directions = {\r\n    down:1,\r\n    up:2,\r\n    right:3,\r\n    left:4,\r\n    dead:5\r\n  };\r\n  burnTickTimer = 5;\r\n  smokeTimer = 0.3;\r\n  fastDistance = fastDistance;\r\n  magnitude = magnitude;\r\n  damageZombie = this.zombies.damageZombie;\r\n  searchClosestTarget = this.zombies.searchClosestTarget;\r\n  updateBurns = this.zombies.updateBurns;\r\n  updateZombieRegen = this.zombies.updateZombieRegen;\r\n  causePlagueExplosion = this.zombies.causePlagueExplosion;\r\n  inflictPlague = this.zombies.inflictPlague;\r\n  healZombie = this.zombies.healZombie;\r\n\r\n  populate() : void {\r\n    this.map = new ZmMap();\r\n    this.model = GameModel.getInstance();\r\n    this.graveyard = new Graveyard();\r\n    this.smoke = new Smoke();\r\n    this.bullets = new Bullets();\r\n    this.humans = new Humans();\r\n    this.exclamations = new Exclamations();\r\n    this.blood = new Blood();\r\n    this.bones = new Bones();\r\n    this.blasts = new Blasts();\r\n\r\n    if (!this.golemTextures.set) {\r\n      this.golemTextures.down = [];\r\n      this.golemTextures.up = [];\r\n      this.golemTextures.right = [];\r\n      this.golemTextures.dead = [];\r\n      for (let i=0; i < 3; i++) {\r\n        this.golemTextures.down.push(PIXI.Texture.from('golem' + i + '.png'));\r\n      }\r\n      for (let i=3; i < 6; i++) {\r\n        this.golemTextures.up.push(PIXI.Texture.from('golem' + i + '.png'));\r\n      }\r\n      for (let i=6; i < 9; i++) {\r\n        this.golemTextures.right.push(PIXI.Texture.from('golem' + i + '.png'));\r\n      }\r\n      this.golemTextures.dead.push(PIXI.Texture.from('golem9.png'));\r\n      this.golemTextures.set = true;\r\n    }\r\n\r\n    // reset creature position at start of level\r\n    const creatures = [];\r\n    for (let i = 0; i < this.creatures.length; i++) {\r\n      if (!this.model.constructions.monsterFactory) {\r\n        this.discardedSprites.push(this.creatures[i]);\r\n        characterContainer.removeChild(this.creatures[i]);\r\n      } else {\r\n        if (!this.creatures[i].flags.dead) {\r\n          creatures.push(this.creatures[i]);\r\n          this.creatures[i].x = this.graveyard.sprite.x;\r\n          this.creatures[i].zIndex = this.creatures[i].y = this.graveyard.sprite.y + (this.graveyard.level > 2 ? 8 : 0);\r\n          this.creatures[i].target = null;\r\n          this.creatures[i].state = CreatureState.lookingForTarget;\r\n        } else {\r\n          this.discardedSprites.push(this.creatures[i]);\r\n          characterContainer.removeChild(this.creatures[i]);\r\n        }\r\n      }\r\n    }\r\n    this.creatures = creatures;\r\n    this.aliveCreatures = [];\r\n\r\n    this.creatureFactory.spawnSavedCreatures();\r\n  }\r\n\r\n  spawnCreature(health : number, damage : number, speed : number, type : number, level : number) : void {\r\n\r\n    if (this.model.creatureCount >= this.model.creatureLimit) {\r\n      return;\r\n    }\r\n\r\n    let creature : Creature;\r\n    if (this.discardedSprites.length > 0) {\r\n      creature = this.discardedSprites.pop();\r\n      creature.textures = this.golemTextures.down;\r\n    } else {\r\n      creature = new Creature(this.golemTextures.down);\r\n    }\r\n    switch(type) {\r\n      case this.creatureTypes.earthGolem:\r\n        creature.tint = 0xA87f32;\r\n        creature.bulletReflect = this.model.bulletproofChance;\r\n        break;\r\n      case this.creatureTypes.airGolem:\r\n        creature.tint = 0x9CA5B8;\r\n        break;\r\n      case this.creatureTypes.fireGolem:\r\n        creature.tint = 0xDB471A;\r\n        creature.immuneToBurns = true;\r\n        break;\r\n      case this.creatureTypes.waterGolem:\r\n        creature.tint = 0x4d86e8;\r\n        creature.immuneToBurns = true;\r\n        break;\r\n    }\r\n    creature.flags = new CharacterFlags();\r\n    creature.burnDamage = 0;\r\n    creature.level = level;\r\n    creature.textureSet = this.golemTextures;\r\n    creature.deadTexture = this.golemTextures.dead;\r\n    creature.currentDirection = this.directions.down;\r\n    creature.creatureType = type;\r\n    creature.lastKnownBuilding = false;\r\n    creature.alpha = 1;\r\n    creature.animationSpeed = 0.15;\r\n    creature.anchor.set(8.5/16,1);\r\n    creature.position.set(this.graveyard.sprite.x, this.graveyard.sprite.y + (this.graveyard.level > 2 ? 8 : 0));\r\n    creature.target = null;\r\n    creature.zIndex = creature.position.y;\r\n    creature.visible = true;\r\n    creature.maxHealth = creature.health = health;\r\n    creature.attackDamage = damage;\r\n    creature.regenTimer = 5;\r\n    creature.state = CreatureState.lookingForTarget;\r\n    creature.scaling = this.scaling;\r\n    creature.scale.set(creature.scaling, creature.scaling);\r\n    creature.xSpeed = 0;\r\n    creature.ySpeed = 0;\r\n    creature.speedMultiplier = 1;\r\n    creature.maxSpeed = speed;\r\n    creature.timer.ability = Math.random() * 4;\r\n    creature.timer.attack = 0;\r\n    creature.timer.scan = 0;\r\n    creature.timer.burnTick = this.burnTickTimer;\r\n    creature.timer.smoke = this.smokeTimer;\r\n    creature.play();\r\n    creature.zombieId = this.currId++;\r\n    this.creatures.push(creature);\r\n    characterContainer.addChild(creature);\r\n    this.smoke.newZombieSpawnCloud(creature.x, creature.y - 2);\r\n    this.model.creatureCount++;\r\n  }\r\n\r\n  update(timeDiff : number) : void {\r\n    let aliveCreatures = 0;\r\n    this.aliveHumans = this.humans.aliveHumans;\r\n    this.graveyardAttackers = this.humans.graveyardAttackers;\r\n    this.aliveZombies = this.zombies.aliveZombies;\r\n    this.creatureCount = [];\r\n    for (let i = 0; i < this.creatureFactory.creatures.length; i++) {\r\n      this.creatureCount[this.creatureFactory.creatures[i].type] = 0;\r\n    }\r\n\r\n    this.model.persistentData.savedCreatures = [];\r\n\r\n    for (let i=0; i < this.creatures.length; i++) {\r\n      if (this.creatures[i].visible) {\r\n        this.updateCreature(this.creatures[i], timeDiff);\r\n      }\r\n    }\r\n    for (let i=0; i < this.creatures.length; i++) {\r\n      if (this.creatures[i].visible) {\r\n        if (!this.creatures[i].flags.dead) {\r\n          this.aliveZombies.push(this.creatures[i]);\r\n          aliveCreatures++;\r\n          this.creatureCount[this.creatures[i].creatureType]++;\r\n          this.model.persistentData.savedCreatures.push({\r\n            t:this.creatures[i].creatureType,\r\n            l:this.creatures[i].level\r\n          });\r\n        }\r\n      }\r\n    }\r\n    this.model.creatureCount = aliveCreatures;\r\n  }  \r\n\r\n  updateCreature(creature : Creature, timeDiff : number) : void {\r\n    if (creature.flags.dead) {\r\n      if (!creature.visible)\r\n        return;\r\n      \r\n      creature.alpha -= this.fadeSpeed * timeDiff;\r\n      if (creature.alpha < 0) {\r\n        creature.visible = false;\r\n        characterContainer.removeChild(creature);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    creature.timer.attack -= timeDiff;\r\n    creature.timer.scan -= timeDiff;\r\n    creature.timer.ability -= timeDiff;\r\n    \r\n    if (this.model.runeEffects.healthRegen > 0) {\r\n      this.updateZombieRegen(creature, timeDiff);\r\n    }\r\n    \r\n    if (creature.flags.burning && !creature.immuneToBurns) {\r\n      this.updateBurns(creature, timeDiff);\r\n    }\r\n    \r\n    if (creature.timer.ability < 0) {\r\n      creature.timer.ability = 4;\r\n      switch(creature.creatureType) {\r\n        case this.creatureTypes.earthGolem:\r\n          this.golemTaunt(creature);\r\n          break;\r\n        case this.creatureTypes.waterGolem:\r\n          this.golemHeal(creature);\r\n          break;\r\n        case this.creatureTypes.fireGolem:\r\n          this.golemFireball(creature);\r\n          break;\r\n      }\r\n    }\r\n\r\n    if ((!creature.target || creature.target.flags.dead) && creature.timer.scan < 0) {\r\n      creature.state = CreatureState.lookingForTarget;\r\n    }\r\n\r\n    switch(creature.state) {\r\n\r\n      case CreatureState.lookingForTarget:\r\n\r\n        this.searchClosestTarget(creature);\r\n        if (creature.target) {\r\n          creature.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n\r\n      case CreatureState.movingToTarget: {\r\n        const distanceToHumanTarget = this.fastDistance(creature.position.x, creature.position.y, creature.target.x, creature.target.y);\r\n\r\n        if (distanceToHumanTarget < this.attackDistance) {\r\n          creature.state = CreatureState.attackingTarget;\r\n          break;\r\n        }\r\n\r\n        if (distanceToHumanTarget > this.attackDistance * 3 && creature.timer.scan < 0) {\r\n          this.searchClosestTarget(creature);\r\n        }\r\n        this.updateCreatureSpeed(creature, timeDiff);\r\n\r\n        break;\r\n      }\r\n      case CreatureState.attackingTarget: {\r\n        const distanceToTarget = this.fastDistance(creature.position.x, creature.position.y, creature.target.x, creature.target.y);\r\n        if (distanceToTarget < this.attackDistance) {\r\n          creature.scale.x = creature.target.x > creature.x ? creature.scaling : -creature.scaling;\r\n          if (creature.timer.attack < 0) {\r\n            this.humans.damageHuman(creature.target, this.calculateDamage(creature));\r\n            if (creature.creatureType == this.creatureTypes.fireGolem) {\r\n              this.humans.burnHuman(creature.target, creature.attackDamage / 2);\r\n            }\r\n            creature.timer.attack = this.attackSpeed * this.model.runeEffects.attackSpeed;\r\n            if (creature.flags.burning) {\r\n              creature.timer.attack *= (1 / this.model.burningSpeedMod);\r\n            }\r\n          }\r\n          if (distanceToTarget > this.attackDistance / 2) {\r\n            this.updateCreatureSpeed(creature, timeDiff);\r\n          }\r\n        } else {\r\n          creature.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  getCreatureDirection(creature : Creature) : number {\r\n    if(Math.abs(creature.xSpeed) > Math.abs(creature.ySpeed)) {\r\n      //left right\r\n      if (creature.xSpeed < 0) {\r\n        return this.directions.left;\r\n      }\r\n      return this.directions.right;\r\n    } else {\r\n      // up down\r\n      if (creature.ySpeed < 0) {\r\n        return this.directions.up;\r\n      }\r\n      return this.directions.down;\r\n    }\r\n  }\r\n\r\n  changeTextureDirection(creature : Creature) : void {\r\n    const direction = this.getCreatureDirection(creature);\r\n    if (direction !== creature.currentDirection) {\r\n      switch(direction) {\r\n        case this.directions.up:\r\n          creature.textures = creature.textureSet.up;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.down:\r\n          creature.textures = creature.textureSet.down;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.right:\r\n          creature.textures = creature.textureSet.right;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.left:\r\n          creature.textures = creature.textureSet.right;\r\n          creature.scale.x = -creature.scaling;\r\n          break;\r\n      }\r\n      creature.currentDirection = direction;\r\n      creature.play();\r\n    }\r\n  }\r\n\r\n  updateCreatureSpeed(creature : Creature, timeDiff : number) : void {\r\n    if (creature.timer.dogStun && creature.timer.dogStun > 0) {\r\n      creature.timer.dogStun -= timeDiff;\r\n      return;\r\n    }\r\n\r\n    if (!creature.timer.target || !creature.targetVector) {\r\n      creature.timer.target = 0;\r\n    }\r\n    creature.timer.target-=timeDiff;\r\n    if (creature.timer.target <= 0) {\r\n      creature.targetVector = this.map.howDoIGetToMyTarget(creature, creature.target);\r\n      creature.timer.target = 0.2;\r\n    }\r\n\r\n    const speedMod = creature.speedMultiplier * creature.maxSpeed;\r\n    \r\n    creature.xSpeed = creature.targetVector.x * speedMod;\r\n    creature.ySpeed = creature.targetVector.y * speedMod;\r\n\r\n    creature.position.x += creature.xSpeed * timeDiff;\r\n    creature.position.y += creature.ySpeed * timeDiff;\r\n    creature.zIndex = creature.position.y;\r\n    this.changeTextureDirection(creature);\r\n  }\r\n\r\n  calculateDamage(creature : Creature) : number {\r\n    let damage = creature.attackDamage;\r\n    if (this.model.runeEffects.critChance > 0 && Math.random() < this.model.runeEffects.critChance) {\r\n      damage *= this.model.runeEffects.critDamage;\r\n    }\r\n    return damage;\r\n  }\r\n\r\n  golemTaunt(creature : Creature) : void {\r\n    for (let i=0; i < this.aliveHumans.length; i++) {\r\n      if (Math.abs(this.aliveHumans[i].x - creature.x) < this.targetDistance) {\r\n        if (Math.abs(this.aliveHumans[i].y - creature.y) < this.targetDistance) {\r\n          if (!this.aliveHumans[i].vip) {\r\n            this.aliveHumans[i].zombieTarget = creature;\r\n            this.aliveHumans[i].target = creature;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  golemHeal(creature : Creature) : void {\r\n    const healingDone = creature.attackDamage;\r\n    for (let i = 0; i < this.aliveZombies.length; i++) {\r\n      if (Math.abs(this.aliveZombies[i].x - creature.x) < this.targetDistance) {\r\n        if (Math.abs(this.aliveZombies[i].y - creature.y) < this.targetDistance) {\r\n          this.healZombie(this.aliveZombies[i], healingDone);\r\n        }\r\n      }\r\n    }\r\n    for (let i=0; i < this.creatures.length; i++) {\r\n      if (!this.creatures[i].flags.dead && this.creatures[i].visible) {\r\n        if (Math.abs(this.creatures[i].x - creature.x) < this.targetDistance) {\r\n          if (Math.abs(this.creatures[i].y - creature.y) < this.targetDistance) {\r\n            this.healZombie(this.creatures[i], healingDone);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  golemFireball(creature : Creature) : void {\r\n    let fireBalls = 5;\r\n    for (let i=0; i < this.aliveHumans.length; i++) {\r\n      if (fireBalls > 0) {\r\n        if (Math.abs(this.aliveHumans[i].x - creature.x) < this.targetDistance) {\r\n          if (Math.abs(this.aliveHumans[i].y - creature.y) < this.targetDistance) {\r\n            fireBalls--;\r\n            this.bullets.newBullet(creature, this.aliveHumans[i], creature.attackDamage / 2, false, false, true);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","import {zoom, centerGameContainer, update, setGameFieldSizeForLevel, Trophies, Particles, Bones, CreatureFactory, BoneCollectors, \r\n  Graveyard, Spells, PartFactory, Creatures, Skeleton, Upgrades, Zombies, Army, Humans, Police, formatWhole} from './internal';\r\n\r\nexport class GameModel {\r\n\r\n  private static instance : GameModel;\r\n  private constructor() {\r\n    //\r\n  }\r\n  static getInstance() : GameModel {\r\n    if (!GameModel.instance) {\r\n      GameModel.instance = new GameModel();\r\n      GameModel.instance.particles = new Particles();\r\n      GameModel.instance.trophies = new Trophies();\r\n      GameModel.instance.bones = new Bones();\r\n      GameModel.instance.creatureFactory = new CreatureFactory();\r\n      GameModel.instance.creatures = new Creatures();\r\n      GameModel.instance.boneCollectors = new BoneCollectors();\r\n      GameModel.instance.graveyard = new Graveyard();\r\n      GameModel.instance.spells = new Spells();\r\n      GameModel.instance.partFactory = new PartFactory();\r\n      GameModel.instance.skeleton = new Skeleton();\r\n      GameModel.instance.upgrades = new Upgrades();\r\n      GameModel.instance.zombies = new Zombies();\r\n      GameModel.instance.humans = new Humans();\r\n      GameModel.instance.police = new Police();\r\n      GameModel.instance.army = new Army();\r\n    }\r\n      \r\n    return GameModel.instance;\r\n  }\r\n  particles: Particles;\r\n  trophies: Trophies;\r\n  bones: Bones;\r\n  creatureFactory: CreatureFactory;\r\n  creatures: Creatures;\r\n  boneCollectors: BoneCollectors;\r\n  graveyard: Graveyard;\r\n  spells: Spells;\r\n  partFactory: PartFactory;\r\n  skeleton: Skeleton;\r\n  upgrades: Upgrades;\r\n  zombies: Zombies;\r\n  humans: Humans;\r\n  police: Police;\r\n  army: Army;\r\n  app : PIXI.Application;\r\n  storageName = \"ZombieData\";\r\n  kongregate = null;\r\n  playFabId = null;\r\n  titleId = \"772D8\";\r\n  hidden = false;\r\n  autoShatter = false;\r\n  energy = 0;\r\n  energyMax = 10;\r\n  energyRate = 1;\r\n  brainsRate = 0;\r\n  bonesRate = 0;\r\n  energySpellMultiplier = 1;\r\n  prestigePointsEarned = 0;\r\n  zombieCost = 10;\r\n  bonesPCMod = 1;\r\n  partsPCMod = 1;\r\n  bloodMax = 1000;\r\n  bloodPCMod = 1;\r\n  bloodStorePCMod = 1;\r\n  brainsMax = 50;\r\n  brainsPCMod = 1;\r\n  brainsStorePCMod = 1;\r\n  zombieHealth = 100;\r\n  zombieHealthPCMod = 1;\r\n  zombieDamage = 10;\r\n  zombieDamagePCMod = 1;\r\n  zombieSpeed = 10;\r\n  zombieCages = 0;\r\n  zombiesInCages = 0;\r\n  golemDamagePCMod = 1;\r\n  golemHealthPCMod = 1;\r\n  plagueDamageMod = 0;\r\n  graveyardHealthMod = 1;\r\n  burningSpeedMod = 1;\r\n  startingResources = 0;\r\n  blastHealing = 0;\r\n  plagueDmgReduction = 0;\r\n  brainRecoverChance = 0;\r\n  riseFromTheDeadChance = 0;\r\n  infectedBiteChance = 0;\r\n  infectedBlastChance = 0;\r\n  spitDistance = 0;\r\n  spikeDelay = 5;\r\n  startTimer = 0;\r\n  fenceRadius = 50;\r\n  constructions = {} as any;\r\n  construction = 0;\r\n  boneCollectorCapacity = 10;\r\n  frameRate = 0;\r\n  humanCount = 50;\r\n  zombieCount = 0;\r\n  creatureCount = 0;\r\n  creatureLimit = 1;\r\n  harpySpeed = 75;\r\n  tankBuster = false;\r\n  harpyBombs = 1;\r\n  stats = null;\r\n  runicSyphon = {\r\n    percentage: 0,\r\n    blood: 0,\r\n    bones: 0,\r\n    brains: 0\r\n  };\r\n  gigazombies = false;\r\n  endLevelTimer = 3;\r\n  endLevelDelay = 3;\r\n  messageQueue = [];\r\n  offlineMessage = \"\";\r\n  runeEffects = {\r\n    attackSpeed : 1,\r\n    critChance : 0,\r\n    critDamage : 0,\r\n    damageReduction : 1,\r\n    healthRegen : 0,\r\n    damageReflection : 0\r\n  };\r\n  encodedContent = \"\";\r\n  savefilename = \"\";\r\n  blob : Blob;\r\n  autoUpgrades = false;\r\n  autoconstruction = false;\r\n  autoconstructionUnlocked = false;\r\n  levelResourcesAdded = false;\r\n  bulletproofChance = 0;\r\n  gameSpeed = 1;\r\n  \r\n  level = 1;\r\n  \r\n  currentState = \"startGame\";\r\n\r\n  states = {\r\n    playingLevel : \"playingLevel\",\r\n    levelCompleted : \"levelCompleted\",\r\n    startGame : \"startGame\",\r\n    prestiged : \"prestiged\",\r\n    failed : \"failed\"\r\n  };\r\n\r\n  baseStats = {\r\n    energyRate : 1,\r\n    brainsRate : 0,\r\n    bonesRate : 0,\r\n    energyMax : 10,\r\n    bloodMax : 1000,\r\n    brainsMax : 50,\r\n    zombieCost : 10,\r\n    zombieHealth : 100,\r\n    zombieDamage : 10,\r\n    zombieSpeed : 10,\r\n    level : 1,\r\n    graveyard : 0,\r\n    construction : 0,\r\n    boneCollectorCapacity : 10\r\n  };\r\n\r\n  zoom = zoom;\r\n  centerGameContainer = centerGameContainer;\r\n\r\n  resetToBaseStats() : void {\r\n    this.energyRate = this.baseStats.energyRate;\r\n    this.brainsRate = this.baseStats.brainsRate;\r\n    this.bonesRate = this.baseStats.bonesRate;\r\n    this.energyMax = this.baseStats.energyMax;\r\n    this.bloodMax = this.baseStats.bloodMax;\r\n    this.brainsMax = this.baseStats.brainsMax;\r\n    this.zombieHealth = this.baseStats.zombieHealth;\r\n    this.zombieDamage = this.baseStats.zombieDamage;\r\n    this.zombieSpeed = this.baseStats.zombieSpeed;\r\n    this.zombieCost = this.baseStats.zombieCost;\r\n    this.zombieCages = 0;\r\n    this.brainRecoverChance = 0;\r\n    this.riseFromTheDeadChance = 0;\r\n    this.infectedBiteChance = 0;\r\n    this.infectedBlastChance = 0;\r\n    this.construction = this.baseStats.construction;\r\n    this.constructions = {};\r\n    this.boneCollectorCapacity = this.baseStats.boneCollectorCapacity;\r\n    this.bonesPCMod = 1;\r\n    this.partsPCMod = 1;\r\n    this.bloodPCMod = 1;\r\n    this.bloodStorePCMod = 1;\r\n    this.brainsPCMod = 1;\r\n    this.brainsStorePCMod = 1;\r\n    this.zombieHealthPCMod = 1;\r\n    this.zombieDamagePCMod = 1;\r\n    this.golemHealthPCMod = 1;\r\n    this.golemDamagePCMod = 1;\r\n    this.plagueDamageMod = 0;\r\n    this.burningSpeedMod = 1;\r\n    this.startingResources = 0;\r\n    this.fenceRadius = 50;\r\n    this.spitDistance = 0;\r\n    this.spikeDelay = 5;\r\n    this.blastHealing = 0;\r\n    this.plagueDmgReduction = 1;\r\n    this.creatureLimit = 1;\r\n    this.runicSyphon.percentage = 0;\r\n    this.autoconstructionUnlocked = false;\r\n    this.autoUpgrades = false;\r\n    this.graveyardHealthMod = 1;\r\n    this.bulletproofChance = 0;\r\n    this.gigazombies = false;\r\n    this.harpySpeed = 75;\r\n    this.tankBuster = false;\r\n    this.harpyBombs = 1;\r\n  }\r\n\r\n  addEnergy(value : number) : void {\r\n    this.energy += value;\r\n    if (this.energy > this.energyMax)\r\n      this.energy = this.energyMax;\r\n  }\r\n\r\n  addBlood(value : number) : void {\r\n    if (isNaN(this.persistentData.blood)) {\r\n      this.persistentData.blood = 0;  \r\n    }\r\n    if (isNaN(value))\r\n      return;\r\n    this.persistentData.blood += (value * this.bloodPCMod);\r\n    if (this.persistentData.blood > this.bloodMax) {\r\n      this.persistentData.blood = this.bloodMax;\r\n      if (this.constructions.runesmith && this.runicSyphon.percentage > 0) {\r\n        this.runicSyphon.blood += value * this.bloodPCMod;\r\n      }\r\n    }\r\n\r\n    if (this.runicSyphon.percentage > 0) {\r\n      this.runicSyphon.blood += value * this.bloodPCMod * this.runicSyphon.percentage;\r\n    }\r\n  }\r\n\r\n  addBrains(value : number) : void {\r\n    if (isNaN(this.persistentData.brains)) {\r\n      this.persistentData.brains = 0;  \r\n    }\r\n    if (isNaN(value))\r\n      return;\r\n    this.persistentData.brains += (value * this.brainsPCMod);\r\n\r\n    if (this.persistentData.brains > this.brainsMax) {\r\n      this.persistentData.brains = this.brainsMax;\r\n      if (this.constructions.runesmith && this.runicSyphon.percentage > 0) {\r\n        this.runicSyphon.brains += value * this.brainsPCMod;\r\n      }\r\n    }\r\n\r\n    if (this.runicSyphon.percentage > 0) {\r\n      this.runicSyphon.brains += value * this.brainsPCMod * this.runicSyphon.percentage;\r\n    }\r\n  }\r\n\r\n  addBones(value : number) : void {\r\n    if (isNaN(this.persistentData.bones)) {\r\n      this.persistentData.bones = 0;  \r\n    }\r\n    if (isNaN(value))\r\n      return;\r\n    this.persistentData.bones += (value * this.bonesPCMod);\r\n    this.persistentData.bonesTotal += (value * this.bonesPCMod);\r\n\r\n    if (this.runicSyphon.percentage > 0) {\r\n      this.runicSyphon.bones += value * this.bonesPCMod * this.runicSyphon.percentage;\r\n    }\r\n  }\r\n\r\n  getHumanCount() : number {\r\n    return this.humanCount;\r\n  }\r\n\r\n  getEnergyRate() : number {\r\n    return (this.energySpellMultiplier * this.energyRate) - (this.persistentData.boneCollectors + this.persistentData.harpies);\r\n  }\r\n\r\n  update(timeDiff : number, updateTime : number) : void {\r\n\r\n    // spell update before gamespeed modifier\r\n    this.spells.updateSpells(timeDiff);\r\n\r\n    timeDiff *= this.gameSpeed;\r\n\r\n    if (this.hidden) { // force PIXI update\r\n      update(timeDiff, this.app);\r\n    }\r\n\r\n    this.partFactory.update(timeDiff);\r\n    \r\n    this.autoRemoveCollectorsHarpies();\r\n    this.addEnergy(this.getEnergyRate() * timeDiff);\r\n\r\n    if (this.currentState == this.states.playingLevel) {\r\n      this.addBones(this.bonesRate * timeDiff);\r\n      this.addBrains(this.brainsRate * timeDiff);\r\n      this.upgrades.updateRunicSyphon(this.runicSyphon);\r\n      \r\n      if (this.lastSave + 30000 < updateTime) {\r\n        this.saveData();\r\n        this.lastSave = updateTime;\r\n      }\r\n\r\n      if (this.lastPlayFabSave + 1200000 < updateTime) {\r\n        this.saveToPlayFab();\r\n      }\r\n  \r\n      if (this.getHumanCount() <= 0) {\r\n\r\n        if (this.endLevelTimer < 0) {\r\n          if (this.isBossStage(this.level) && this.trophies.doesLevelHaveTrophy(this.level)) {\r\n            this.trophies.trophyAquired(this.level);\r\n          }\r\n          this.prestigePointsEarned = this.prestigePointsForLevel(this.level);\r\n          this.currentState = this.states.levelCompleted;\r\n          this.levelResourcesAdded = false;\r\n          this.calculateEndLevelBones();\r\n          this.calculateEndLevelZombieCages();\r\n          if (this.persistentData.levelsCompleted.indexOf(this.level) == -1) {\r\n            this.addPrestigePoints(this.prestigePointsForLevel(this.level));\r\n            this.persistentData.levelsCompleted.push(this.level);\r\n          }\r\n          this.persistentData.levelUnlocked = this.level + 1;\r\n          if (!this.persistentData.allTimeHighestLevel || this.level > this.persistentData.allTimeHighestLevel) {\r\n            this.persistentData.allTimeHighestLevel = this.level;\r\n            if (window.kongregate) {\r\n              window.kongregate.stats.submit(\"level\", this.persistentData.allTimeHighestLevel);\r\n            }\r\n          }\r\n          this.startTimer = 3;\r\n        } else {\r\n          this.endLevelTimer -= timeDiff;\r\n        } \r\n      }\r\n      this.upgrades.updateConstruction(timeDiff);\r\n      this.upgrades.updateAutoUpgrades();\r\n      this.creatureFactory.update(timeDiff);\r\n    }\r\n    if (this.currentState == this.states.levelCompleted) {\r\n      this.startTimer -= timeDiff;\r\n      if (this.startTimer < 0 && this.persistentData.autoStart) {\r\n        this.nextLevel();\r\n      }\r\n    }\r\n    if (this.currentState == this.states.failed) {\r\n      this.startTimer -= timeDiff;\r\n      if (this.startTimer < 0 && this.persistentData.autoStart) {\r\n        this.startLevel(this.level - 1);\r\n      }\r\n    }\r\n    this.updateStats();\r\n  }\r\n\r\n  calculateEndLevelBones() : void {\r\n    let endLevelBones = 0;\r\n    if (this.persistentData.boneCollectors > 0 && this.bones.uncollected) {\r\n      endLevelBones = this.bones.uncollected.length;\r\n      this.addBones(endLevelBones);\r\n    }\r\n  }\r\n\r\n  calculateEndLevelZombieCages() : void {\r\n    if (this.zombieCages > 0) {\r\n      this.zombiesInCages += this.zombieCount;\r\n      if (this.zombiesInCages > this.zombieCages)\r\n        this.zombiesInCages = this.zombieCages;\r\n    }\r\n  }\r\n \r\n  autoRemoveCollectorsHarpies() : void {\r\n    if (this.getEnergyRate() < 0) {\r\n      const energyRate = this.getEnergyRate();\r\n      if (this.persistentData.harpies > 0) {\r\n        this.persistentData.harpies -= Math.round(Math.abs(energyRate));\r\n        if (this.persistentData.harpies < 0) {\r\n          this.persistentData.harpies = 0;\r\n        }\r\n      }\r\n      if (this.getEnergyRate() < 0 && this.persistentData.boneCollectors > 0) {\r\n        this.persistentData.boneCollectors--;\r\n      }\r\n    }\r\n  }\r\n\r\n  releaseCagedZombies() : void {\r\n    if (this.currentState == this.states.playingLevel) {\r\n      for (let i=0; i < this.zombiesInCages; i++) {\r\n        this.zombies.createZombie(this.graveyard.sprite.x, this.graveyard.sprite.y);\r\n      }\r\n      this.zombiesInCages = 0;\r\n    }\r\n  }\r\n\r\n  sacrificeCagedZombies() : void {\r\n    this.addBlood(this.cagedZombieSacrificeValue().blood);\r\n    this.addBrains(this.cagedZombieSacrificeValue().brains);\r\n    this.addBones(this.cagedZombieSacrificeValue().bones);\r\n    this.zombiesInCages = 0;\r\n  }\r\n\r\n  cagedZombieSacrificeValue() : {blood:number, brains:number, bones:number} {\r\n    return {\r\n      blood:this.zombiesInCages * this.zombieHealth * 0.5,\r\n      brains:this.zombiesInCages,\r\n      bones:this.zombiesInCages * 3\r\n    }\r\n  }\r\n\r\n  startLevel(level : number) : void {\r\n    this.level = level;\r\n    this.startGame();\r\n  }\r\n\r\n  startGame() : void {\r\n    this.currentState = this.states.playingLevel;\r\n    this.setupLevel();\r\n    this.updatePlayingLevel();\r\n  }\r\n\r\n  nextLevel() : void {\r\n    this.level++;\r\n    this.currentState = this.states.playingLevel;\r\n    this.setupLevel();\r\n    this.updatePlayingLevel();\r\n    if(this.persistentData.autoRelease) {\r\n      this.releaseCagedZombies();\r\n    }\r\n  }\r\n\r\n  setupLevel() : void {\r\n    this.endLevelTimer = this.endLevelDelay;\r\n    setGameFieldSizeForLevel();\r\n    this.particles.initialize();\r\n    this.humans.populate();\r\n    this.zombies.populate();\r\n    this.graveyard.initialize();\r\n    setTimeout(centerGameContainer,10);\r\n    this.upgrades.applyUpgrades();\r\n    this.upgrades.updateRuneEffects();\r\n    this.partFactory.applyGenerators();\r\n    this.creatures.populate();\r\n    this.skeleton.populate();\r\n    this.addStartLevelResources();\r\n    this.populateStats();\r\n  }\r\n\r\n  populateStats() : void {\r\n    this.stats = {\r\n      skeleton : {\r\n        show : this.skeleton.persistent.skeletons > 0,\r\n        health : this.zombieHealth * 10,\r\n        damage : this.zombieDamage * 10,\r\n        speed: this.skeleton.moveSpeed\r\n      },\r\n      zombie : {\r\n        health : this.zombieHealth,\r\n        damage : this.zombieDamage,\r\n        speed : this.zombieSpeed\r\n      },\r\n      human : {\r\n        health : this.humans.getMaxHealth(this.level),\r\n        damage : this.humans.attackDamage,\r\n        speed : this.humans.maxRunSpeed\r\n      },\r\n      police : {\r\n        show : this.police.getMaxPolice() > 0,\r\n        health : this.police.getMaxHealth(),\r\n        damage : this.police.attackDamage,\r\n        speed : this.police.maxRunSpeed\r\n      },\r\n      army : {\r\n        show : this.army.getMaxArmy() > 0,\r\n        health : this.army.getMaxHealth(),\r\n        damage : this.army.attackDamage,\r\n        speed : this.army.maxRunSpeed\r\n      }\r\n    }\r\n  }\r\n\r\n  updateStats() : void {\r\n    if (this.stats) {\r\n      this.stats.zombie.health = this.zombieHealth;\r\n      this.stats.zombie.damage = this.zombieDamage;\r\n      this.stats.zombie.speed = this.zombieSpeed;\r\n      this.stats.zombie.count = this.zombieCount;\r\n      this.stats.skeleton.health = this.zombieHealth * 10;\r\n      this.stats.skeleton.damage = this.zombieDamage * 10;\r\n      this.stats.skeleton.speed = this.skeleton.moveSpeed;\r\n    }\r\n  }\r\n\r\n  vipEscaped() : void {\r\n    if (!this.persistentData.vipEscaped) {\r\n      this.persistentData.vipEscaped = [];\r\n    }\r\n    this.persistentData.vipEscaped.push(this.level);\r\n    this.saveData();\r\n  }\r\n\r\n  updatePlayingLevel() : void {\r\n    this.saveData();\r\n  }\r\n\r\n  addStartLevelResources() : void {\r\n    this.energy = this.energyMax;\r\n\r\n    if (!this.levelResourcesAdded) {\r\n      this.persistentData.blood += this.startingResources * 500;\r\n      if (this.persistentData.blood > this.bloodMax)\r\n        this.persistentData.blood = this.bloodMax;\r\n\r\n      this.persistentData.brains += this.startingResources * 50;\r\n      if (this.persistentData.brains > this.brainsMax)\r\n        this.persistentData.brains = this.brainsMax;\r\n\r\n      this.persistentData.bones += this.startingResources * 200;\r\n      this.persistentData.bonesTotal += this.startingResources * 200;\r\n\r\n      this.levelResourcesAdded = true;\r\n    }\r\n  }\r\n\r\n  onReady() : void {\r\n    this.upgrades.upgradeIdCheck();\r\n  }\r\n\r\n  lastSave = 0;\r\n  lastPlayFabSave = Date.now() - 15000;\r\n\r\n  persistentData = {\r\n    saveCreated : Date.now(),\r\n    dateOfSave : Date.now(),\r\n    autoStart : false,\r\n    levelUnlocked : 1,\r\n    allTimeHighestLevel : 0,\r\n    blood : 0,\r\n    brains : 0,\r\n    bones: 0,\r\n    parts: 0,\r\n    bonesTotal : 0,\r\n    upgrades : [],\r\n    constructions : [],\r\n    prestigePointsEarned : 0,\r\n    prestigePointsToSpend : 0,\r\n    boneCollectors : 0,\r\n    graveyardZombies : 1,\r\n    harpies : 0,\r\n    resolution : 1,\r\n    zoomButtons : false,\r\n    particles : true,\r\n    generators : [],\r\n    currentConstruction : null,\r\n    creatureLevels : [],\r\n    creatures : [],\r\n    creatureAutobuild : [],\r\n    savedCreatures : [],\r\n    levelsCompleted : [],\r\n    showfps : false,\r\n    runeshatter : 0,\r\n    runes : {life : {\r\n      blood : 0,\r\n      brains : 0,\r\n      bones : 0\r\n    }, death : {\r\n      blood : 0,\r\n      brains : 0,\r\n      bones : 0\r\n    }},\r\n    trophies : [],\r\n    vipEscaped : [],\r\n    autoRelease : false,\r\n    skeleton : null\r\n  };\r\n\r\n  addPrestigePoints(points : number) : void {\r\n    if (typeof this.persistentData.prestigePointsEarned == 'undefined') {\r\n      this.persistentData.prestigePointsEarned = 0;\r\n      this.persistentData.prestigePointsToSpend = 0;\r\n    }\r\n    this.persistentData.prestigePointsEarned += points;\r\n  }\r\n\r\n  prestige() : void {\r\n    if (this.persistentData.prestigePointsEarned > 0) {\r\n      this.persistentData.levelUnlocked = 1;\r\n      this.persistentData.blood = 0;\r\n      this.persistentData.brains = 0;\r\n      this.persistentData.bones = 0;\r\n      this.persistentData.parts = 0;\r\n      this.persistentData.generators = [];\r\n      this.persistentData.bonesTotal = 0;\r\n      this.persistentData.upgrades = this.persistentData.upgrades.filter(upgrade => upgrade.costType == this.upgrades.costs.prestigePoints);\r\n      this.persistentData.constructions = [];\r\n      this.persistentData.boneCollectors = 0;\r\n      this.persistentData.currentConstruction = false;\r\n      this.persistentData.harpies = 0;\r\n      this.persistentData.graveyardZombies = 1;\r\n      this.persistentData.prestigePointsToSpend += this.persistentData.prestigePointsEarned;\r\n      this.persistentData.prestigePointsEarned = 0;\r\n      this.persistentData.runes = null;\r\n      this.persistentData.vipEscaped = [];\r\n      this.persistentData.creatureLevels = [];\r\n      this.persistentData.creatureAutobuild = [];\r\n      this.persistentData.levelsCompleted = [];\r\n      this.persistentData.runeshatter = 0;\r\n      this.zombiesInCages = 0;\r\n      this.autoconstruction = false;\r\n      this.levelResourcesAdded = false;\r\n      this.gigazombies = false;\r\n      this.runeEffects = {\r\n        attackSpeed : 1,\r\n        critChance : 0,\r\n        critDamage : 0,\r\n        damageReduction : 1,\r\n        healthRegen : 0,\r\n        damageReflection : 0\r\n      };\r\n      this.boneCollectors.update(0.1);\r\n      this.partFactory.generatorsApplied = [];\r\n      this.creatureFactory.updateAutoBuild();\r\n      this.creatureFactory.resetLevels();\r\n      this.level = 1;\r\n      this.currentState = this.states.prestiged;\r\n      this.setupLevel();\r\n      this.saveData();\r\n      for (let i = 0; i < this.upgrades.upgrades.length; i++) {\r\n        this.upgrades.upgrades[i].auto = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  saveData() : void {\r\n    this.persistentData.dateOfSave = Date.now();\r\n    try {\r\n      localStorage.setItem(this.storageName, JSON.stringify(this.persistentData));\r\n      localStorage.setItem(this.skeleton.storageName, JSON.stringify(this.skeleton.persistent));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  loadData() : void {\r\n    try {\r\n      if (localStorage.getItem(this.storageName) !== null) {\r\n        this.persistentData = JSON.parse(localStorage.getItem(this.storageName));\r\n        this.level = this.persistentData.levelUnlocked;\r\n        if (localStorage.getItem(this.skeleton.storageName) !== null) {\r\n          this.skeleton.persistent = JSON.parse(localStorage.getItem(this.skeleton.storageName));\r\n        }\r\n        this.updatePersistentData();\r\n        this.calcOfflineProgress();\r\n      } \r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  calcOfflineProgress() : void {\r\n    this.upgrades.applyUpgrades();\r\n    this.upgrades.updateRuneEffects();\r\n    this.partFactory.applyGenerators();\r\n    if (this.constructions.partFactory) {\r\n      const timeDiff = (Date.now() - this.persistentData.dateOfSave) / 1000;\r\n      const partsCreated = this.partFactory.updateLongTime(timeDiff);\r\n      if (partsCreated > 0) {\r\n        this.offlineMessage = \"Your factory has generated \" + formatWhole(partsCreated) + \" parts while you were away\";\r\n        this.persistentData.parts += partsCreated;\r\n      }\r\n    }\r\n  }\r\n\r\n  resetData() : void {\r\n    try {\r\n      localStorage.removeItem(this.storageName);\r\n      localStorage.removeItem(this.skeleton.storageName);\r\n      this.saveToPlayFab(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  updatePersistentData() : void {\r\n    if (!this.persistentData.constructions) {\r\n      this.persistentData.constructions = [];\r\n    }\r\n    if (!this.persistentData.generators) {\r\n      this.persistentData.generators = [];\r\n    }\r\n    if (!this.persistentData.parts) {\r\n      this.persistentData.parts = 0;\r\n    }\r\n    if (!this.persistentData.creatureLevels) {\r\n      this.persistentData.creatureLevels = [];\r\n    }\r\n    if (!this.persistentData.creatureAutobuild) {\r\n      this.persistentData.creatureAutobuild = [];\r\n    }\r\n    if (!this.persistentData.savedCreatures) {\r\n      this.persistentData.savedCreatures = [];\r\n    }\r\n    if (!this.persistentData.levelsCompleted) {\r\n      this.persistentData.levelsCompleted = [];\r\n    }\r\n    if (!this.persistentData.saveCreated) {\r\n      this.persistentData.saveCreated = Date.now();\r\n    }\r\n    if (typeof this.persistentData.particles == 'undefined') {\r\n      this.persistentData.particles = true;\r\n    }\r\n    if (!this.persistentData.runeshatter) {\r\n      this.persistentData.runeshatter = 0;\r\n    }\r\n    this.creatureFactory.updateAutoBuild();\r\n  }\r\n\r\n  sendMessage(message : string) : void {\r\n    if (this.messageQueue.indexOf(message) == -1) {\r\n      this.messageQueue.push(message);\r\n    }\r\n  }\r\n\r\n  setResolution(resolution : number) : void {\r\n    if(!this.app)\r\n      return;\r\n\r\n    this.app.renderer.resolution = resolution;\r\n\r\n    if ((this.app.renderer as any).rootRenderTarget)\r\n      (this.app.renderer as any).rootRenderTarget.resolution = resolution;\r\n\r\n    this.app.renderer.plugins.interaction.resolution = resolution;\r\n    this.app.renderer.resize(document.body.clientWidth, document.body.clientHeight);\r\n  }\r\n\r\n  downloadSaveGame() : void {\r\n    this.persistentData.skeleton = this.skeleton.persistent;\r\n    this.blob = new Blob([LZString.compressToEncodedURIComponent(JSON.stringify(this.persistentData))], {type: \"octet/stream\"});\r\n    delete this.persistentData.skeleton;\r\n    this.encodedContent = window.URL.createObjectURL(this.blob);\r\n    const datestamp = new Date().toISOString().replace(/:|T|Z|\\./g,\"\");\r\n    this.savefilename = \"incremancer-\" + datestamp + \".sav\";\r\n  }\r\n\r\n  importFile() : void {\r\n    const files = document.getElementById(\"import-file\").files;\r\n\r\n    if (files && files.length == 1) {\r\n      const file = files[0];\r\n      const reader = new FileReader();\r\n      const model = GameModel.getInstance();\r\n      reader.onload = function(event) {\r\n        const savegame = JSON.parse(LZString.decompressFromEncodedURIComponent(event.target.result));\r\n        if (savegame.dateOfSave) {\r\n          if (savegame.skeleton) {\r\n            model.skeleton.persistent = savegame.skeleton;\r\n            delete savegame.skeleton;\r\n          }\r\n          model.persistentData = savegame;          \r\n          model.updatePersistentData();\r\n          model.saveToPlayFab();\r\n          model.level = model.persistentData.levelUnlocked;\r\n          model.creatureFactory.spawnedSavedCreatures = false;\r\n          model.setupLevel();\r\n        } else {\r\n          alert(\"Error loading save game\");\r\n        }\r\n      };\r\n      reader.readAsText(file);\r\n    }\r\n  }\r\n\r\n  toggleFullscreen() : void {\r\n    if (document.fullscreenElement ||\r\n        document.webkitFullscreenElement ||\r\n        document.mozFullScreenElement ||\r\n        document.msFullscreenElement) {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      } else if (document.webkitExitFullscreen) {\r\n        document.webkitExitFullscreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.msExitFullscreen) {\r\n        document.msExitFullscreen();\r\n      }\r\n    } else {\r\n      const i = document.body;\r\n      if (i.requestFullscreen) {\r\n        i.requestFullscreen();\r\n      } else if (i.webkitRequestFullscreen) {\r\n        i.webkitRequestFullscreen();\r\n      } else if (i.mozRequestFullScreen) {\r\n        i.mozRequestFullScreen();\r\n      } else if (i.msRequestFullscreen) {\r\n        i.msRequestFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  prestigePointsForLevel(level : number) : number {\r\n    if (this.persistentData.levelsCompleted.indexOf(level) > -1) {\r\n      return 0;\r\n    } else {\r\n      return level;\r\n    }\r\n  }\r\n\r\n  bossCompleted(level : number) : boolean {\r\n    const bossLevel = Math.floor((level - 1) / 50) * 50;\r\n\r\n    if (bossLevel < 50)\r\n      return true;\r\n\r\n    return this.persistentData.levelsCompleted.indexOf(bossLevel) > -1;\r\n  }\r\n\r\n  levelLocked(level : number) : boolean {\r\n    return level > this.persistentData.allTimeHighestLevel + 1 || !this.bossCompleted(level);\r\n  }\r\n\r\n  isBossStage(level : number) : boolean {\r\n    return level > 0 && level % 50 == 0;\r\n  }\r\n\r\n  levelInfo(level : number) : {level:number, bossStage : boolean, completed : boolean, locked : boolean, trophy : boolean} {\r\n    return {\r\n      level : level,\r\n      bossStage : this.isBossStage(level),\r\n      completed : this.persistentData.levelsCompleted.indexOf(level) > -1,\r\n      locked : this.levelLocked(level),\r\n      trophy : this.trophies.doesLevelHaveTrophy(level)\r\n    }\r\n  }\r\n\r\n  loginInUsingPlayFab() : void {\r\n\r\n    if (window.kongregate) {\r\n\r\n      try {\r\n        // Setting up playfab title ID\r\n        PlayFab.settings.titleId = this.titleId;\r\n\r\n        // forming request\r\n        const request = {\r\n          TitleId: PlayFab.settings.titleId,\r\n          AuthTicket: window.kongregate.services.getGameAuthToken(),\r\n          KongregateId : window.kongregate.services.getUserId(),\r\n          CreateAccount: true\r\n        };\r\n\r\n        const model = this;\r\n\r\n        // Invoke LoginWithKongregate API call and visualize both results (success or failue)\r\n        PlayFabClientSDK.LoginWithKongregate(request,\r\n          function(result){\r\n            if (result && result.data && result.data.PlayFabId) {\r\n              model.playFabId = result.data.PlayFabId;\r\n              model.loadFromPlayFab();\r\n            }\r\n          },\r\n          function(err){\r\n            console.log(err);\r\n          }\r\n        );\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  saveToPlayFab(remove = false) : void {\r\n    this.lastPlayFabSave = Date.now();\r\n    if (this.playFabId) {\r\n      const trophies = this.persistentData.trophies;\r\n      delete this.persistentData.trophies;\r\n      const request = {\r\n        TitleId : this.titleId,\r\n        PlayFabId : this.playFabId,\r\n        Data : {\r\n          save : remove ? false : LZString.compressToEncodedURIComponent(JSON.stringify(this.persistentData)),\r\n          trophies : remove ? false : LZString.compressToEncodedURIComponent(JSON.stringify(trophies)),\r\n          skeleton : remove ? false : LZString.compressToEncodedURIComponent(JSON.stringify(this.skeleton.persistent))\r\n        }\r\n      }\r\n      this.persistentData.trophies = trophies;\r\n      try {\r\n        const model = this;\r\n        PlayFab.ClientApi.UpdateUserData(request,\r\n          function(result){\r\n            if (remove) {\r\n              model.resetToBaseStats();\r\n              model.setupLevel();\r\n              window.location.reload();\r\n            } else {\r\n              model.messageQueue.push(\"Game Saved to Cloud\");\r\n            }\r\n          },\r\n          function(err){\r\n            console.log(err);\r\n          }\r\n        );\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    } else {\r\n      if (remove) {\r\n        this.resetToBaseStats();\r\n        this.setupLevel();\r\n        window.location.reload();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  loadFromPlayFab(force = false) : void {\r\n    if (this.playFabId) {\r\n      const request = {\r\n        TitleId : this.titleId,\r\n        PlayFabId : this.playFabId,\r\n        Keys : [\"save\",\"trophies\",\"skeleton\"]\r\n      }\r\n      try {\r\n        const model = this;\r\n        PlayFab.ClientApi.GetUserData(request,\r\n          function(result){\r\n            if (result.data.Data.save) {\r\n              const savegame = JSON.parse(LZString.decompressFromEncodedURIComponent(result.data.Data.save.Value));\r\n              // playfab save is older so overwrite\r\n              if (force || savegame.saveCreated < model.persistentData.saveCreated || (savegame.saveCreated == model.persistentData.saveCreated && savegame.dateOfSave > model.persistentData.dateOfSave)) {\r\n                model.persistentData = savegame;\r\n                if (result.data.Data.trophies) {\r\n                  model.persistentData.trophies = JSON.parse(LZString.decompressFromEncodedURIComponent(result.data.Data.trophies.Value));\r\n                }\r\n                if (result.data.Data.skeleton) {\r\n                  model.skeleton.persistent = JSON.parse(LZString.decompressFromEncodedURIComponent(result.data.Data.skeleton.Value));\r\n                }\r\n                model.level = model.persistentData.levelUnlocked;\r\n                model.updatePersistentData();\r\n                model.calcOfflineProgress();\r\n                model.setupLevel();\r\n                model.messageQueue.push(\"Game Loaded from Cloud\");\r\n              }\r\n            }\r\n          },\r\n          function(err){\r\n            console.log(err);\r\n          }\r\n        );\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  allowPlayFabAction() : boolean {\r\n    return this.lastPlayFabSave + 15000 < Date.now();\r\n  }\r\n}","import { Human } from './classes/humanclasses';\r\nimport {\r\n  foregroundContainer, gameFieldSize, characterContainer, backgroundContainer, ZmMap, Blood, Bones, Smoke, GameModel,\r\n  Zombies, Humans, Tanks, fastDistance, RotateVector2d, getRandomElementFromArray\r\n} from './internal';\r\n\r\nexport class GraveyardSprite extends PIXI.Sprite {\r\n  graveyard = true;\r\n}\r\n\r\nexport class Graveyard {\r\n\r\n  private static instance: Graveyard;\r\n\r\n  constructor() {\r\n    if (Graveyard.instance)\r\n      return Graveyard.instance;\r\n    Graveyard.instance = this;\r\n  }\r\n  spikeTexture : PIXI.Texture;\r\n  boneCollectors : BoneCollectors;\r\n  bones : Bones;\r\n  gameModel : GameModel;\r\n  zmMap : ZmMap;\r\n  zombies : Zombies;\r\n  smoke : Smoke;\r\n  harpies : Harpies;\r\n  blood : Blood;\r\n  humans : Humans;\r\n\r\n  sprite : GraveyardSprite;\r\n  fortSprite : PIXI.Sprite;\r\n  spikeSprites = [];\r\n  level = 1;\r\n  spikeTimer = 5;\r\n  fenceRadius = 50;\r\n  fastDistance = fastDistance;\r\n\r\n  graveyardHealth = 0;\r\n  graveyardMaxHealth = 0;\r\n  target = {\r\n    graveyard: true,\r\n    x: 0,\r\n    y: 0\r\n  };\r\n\r\n  healthBar = null;\r\n\r\n  initialize(): void {\r\n    this.boneCollectors = new BoneCollectors();\r\n    this.zmMap = new ZmMap();\r\n    this.zombies = new Zombies();\r\n    this.bones = new Bones();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.smoke = new Smoke();\r\n    this.harpies = new Harpies();\r\n    this.blood = new Blood();\r\n    this.humans = new Humans();\r\n    if (typeof this.gameModel.persistentData.graveyardZombies == 'undefined') {\r\n      this.gameModel.persistentData.graveyardZombies = 1;\r\n    }\r\n\r\n    this.drawGraveyard();\r\n    this.drawFence();\r\n    this.drawHealthBar();\r\n    this.bones.initialize();\r\n    this.boneCollectors.populate();\r\n    this.harpies.populate();\r\n  }\r\n\r\n  damageGraveyard(damage: number): void {\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      this.graveyardHealth -= damage;\r\n      if (this.graveyardHealth < 0) {\r\n        this.gameModel.currentState = this.gameModel.states.failed;\r\n        this.gameModel.startTimer = 3;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawHealthBar(): void {\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      this.gameModel.sendMessage(\"Defend the Graveyard!\");\r\n      this.graveyardHealth = this.graveyardMaxHealth = this.gameModel.zombieHealth * 100 * this.gameModel.graveyardHealthMod;\r\n      if (!this.healthBar) {\r\n        this.healthBar = {\r\n          container: new PIXI.Container(),\r\n          background: new PIXI.Graphics(),\r\n          foreground: new PIXI.Graphics(),\r\n          percentage: 100\r\n        }\r\n        this.healthBar.container.addChild(this.healthBar.background);\r\n        this.healthBar.container.addChild(this.healthBar.foreground);\r\n        foregroundContainer.addChild(this.healthBar.container);\r\n      }\r\n\r\n      this.target.x = gameFieldSize.x / 2;\r\n      this.target.y = gameFieldSize.y / 2;\r\n\r\n      this.healthBar.container.visible = true;\r\n      this.healthBar.container.x = this.target.x - 50;\r\n      this.healthBar.container.y = this.target.y - 100;\r\n\r\n      this.healthBar.background.clear();\r\n      this.healthBar.background.lineStyle(12, 0x333333);\r\n      this.healthBar.background.moveTo(-2, 0);\r\n      this.healthBar.background.lineTo(102, 0);\r\n\r\n      this.healthBar.foreground.clear();\r\n      this.healthBar.foreground.lineStyle(8, 0xfd5252);\r\n      this.healthBar.foreground.moveTo(0, 0);\r\n      this.healthBar.foreground.lineTo(100, 0);\r\n\r\n    } else {\r\n      if (this.healthBar) {\r\n        this.healthBar.background.clear();\r\n        this.healthBar.foreground.clear();\r\n        this.healthBar.container.visible = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateHealthBar(): void {\r\n    const percentage = Math.max(Math.round((this.graveyardHealth / this.graveyardMaxHealth) * 100), 0);\r\n    if (percentage != this.healthBar.percentage) {\r\n      this.healthBar.foreground.clear();\r\n      if (percentage > 0) {\r\n        this.healthBar.foreground.lineStyle(8, 0xfd5252);\r\n        this.healthBar.foreground.moveTo(0, 0);\r\n        this.healthBar.foreground.lineTo(percentage, 0);\r\n      }\r\n      this.healthBar.percentage = percentage;\r\n    }\r\n  }\r\n\r\n  drawGraveyard() : void {\r\n    if (!this.spikeTexture) {\r\n      this.spikeTexture = PIXI.Texture.from(\"spikes.png\");\r\n    }\r\n    if (this.sprite) {\r\n      backgroundContainer.removeChild(this.sprite);\r\n    }\r\n    if (this.fortSprite) {\r\n      characterContainer.removeChild(this.fortSprite);\r\n      this.fortSprite = null;\r\n    }\r\n    this.level = 1;\r\n    let textureName = \"graveyard1.png\";\r\n    let fortTexture = \"\";\r\n    if (this.gameModel.constructions.crypt) {\r\n      this.level = 2;\r\n      textureName = \"graveyard2.png\";\r\n    }\r\n    if (this.gameModel.constructions.fort) {\r\n      this.level = 3;\r\n      textureName = \"sprites/megagraveyard.png\";\r\n      fortTexture = \"fort1.png\";\r\n    }\r\n    if (this.gameModel.constructions.fortress) {\r\n      this.level = 4;\r\n      textureName = \"sprites/megagraveyard.png\";\r\n      fortTexture = \"fort2.png\";\r\n    }\r\n    if (this.gameModel.constructions.citadel) {\r\n      this.level = 5;\r\n      textureName = \"sprites/megagraveyard.png\";\r\n      fortTexture = \"fort3.png\";\r\n    }\r\n    if (this.sprite) {\r\n      this.sprite.texture = PIXI.Texture.from(textureName);\r\n    } else {\r\n      this.sprite = new GraveyardSprite(PIXI.Texture.from(textureName));\r\n    }\r\n    const graveyardPosition = this.zmMap.graveYardLocation;\r\n    this.sprite.width = 32;\r\n    this.sprite.height = 32;\r\n    this.sprite.anchor.set(0.5, 0.5);\r\n    this.sprite.scale.set(2, 2);\r\n    this.sprite.visible = false;\r\n    backgroundContainer.addChild(this.sprite);\r\n    this.sprite.x = graveyardPosition.x;\r\n    this.sprite.y = graveyardPosition.y;\r\n\r\n    this.zmMap.graveyardCollision = false;\r\n\r\n    if (fortTexture) {\r\n\r\n      if (this.fortSprite) {\r\n        this.fortSprite.texture = PIXI.Texture.from(fortTexture);\r\n      } else {\r\n        this.fortSprite = new PIXI.Sprite(PIXI.Texture.from(fortTexture));\r\n      }\r\n\r\n      this.fortSprite.anchor.set(0.5, 1);\r\n      this.fortSprite.scale.set(2, 2);\r\n      this.fortSprite.x = graveyardPosition.x;\r\n      this.fortSprite.zIndex = this.fortSprite.y = graveyardPosition.y + 2;\r\n      this.fortSprite.visible = false;\r\n      characterContainer.addChild(this.fortSprite);\r\n    }\r\n\r\n  }\r\n\r\n  fence : PIXI.Container = null;\r\n\r\n  drawFence(): void {\r\n    if (this.fence) {\r\n      backgroundContainer.removeChild(this.fence);\r\n    }\r\n\r\n    this.fenceRadius = this.gameModel.fenceRadius;\r\n    this.fence = new PIXI.Container();\r\n    this.fence.visible = false;\r\n    backgroundContainer.addChild(this.fence);\r\n\r\n    const textures = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      textures.push(PIXI.Texture.from('fencepost' + (i + 1) + '.png'));\r\n    }\r\n\r\n    const numPosts = Math.round(this.fenceRadius * 0.4);\r\n    const radiansPerFencePost = Math.PI * 2 / numPosts;\r\n    for (let i = 0; i < numPosts; i++) {\r\n      const postSprite = new PIXI.Sprite(getRandomElementFromArray(textures, Math.random()));\r\n      this.fence.addChild(postSprite);\r\n      postSprite.anchor.set(0.5, 1);\r\n      postSprite.scale.x = Math.random() > 0.5 ? 1 : -1;\r\n      const positionWobble = -5 + Math.random() * 10;\r\n      const pos = RotateVector2d(0, this.fenceRadius + positionWobble, radiansPerFencePost * i)\r\n      postSprite.position.set(pos.x, pos.y);\r\n    }\r\n    this.fence.cacheAsBitmap = true;\r\n\r\n    const graveyardPosition = this.zmMap.graveYardLocation;\r\n\r\n    this.fence.x = graveyardPosition.x;\r\n    this.fence.y = graveyardPosition.y;\r\n\r\n  }\r\n\r\n  update(timeDiff: number): void {\r\n    this.boneCollectors.addAndRemoveBoneCollectors();\r\n    this.harpies.addAndRemoveHarpies();\r\n\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      this.updateHealthBar();\r\n    }\r\n\r\n    if (!this.gameModel.constructions.graveyard || this.gameModel.currentState != this.gameModel.states.playingLevel) {\r\n      this.sprite.visible = false;\r\n      return;\r\n    }\r\n\r\n    if (this.level < 2 && this.gameModel.constructions.crypt || this.level < 3 && this.gameModel.constructions.fort ||\r\n      this.level < 4 && this.gameModel.constructions.fortress || this.level < 5 && this.gameModel.constructions.citadel)\r\n      this.drawGraveyard();\r\n\r\n    this.sprite.visible = true;\r\n    if (this.fortSprite) {\r\n      this.fortSprite.visible = true;\r\n    }\r\n\r\n    if (this.level == 5) {\r\n      if (Math.random() > 0.9) {\r\n        if (Math.random() > 0.5) {\r\n          this.smoke.newFireSmoke(this.sprite.x - 20, this.sprite.y - 113);\r\n        } else {\r\n          this.smoke.newFireSmoke(this.sprite.x + 20, this.sprite.y - 113);\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    if (this.gameModel.energy >= this.gameModel.energyMax && !this.gameModel.hidden) {\r\n      for (let i = 0; i < this.gameModel.persistentData.graveyardZombies; i++) {\r\n        this.zombies.spawnZombie(this.sprite.x, this.sprite.y + (this.level > 2 ? 8 : 0));\r\n      }\r\n    }\r\n\r\n    this.bones.update(timeDiff);\r\n    this.boneCollectors.update(timeDiff);\r\n    this.harpies.update(timeDiff);\r\n\r\n    if (!this.gameModel.constructions.fence || this.gameModel.currentState != this.gameModel.states.playingLevel) {\r\n      this.fence.visible = false;\r\n    } else {\r\n      this.fence.visible = true;\r\n      if (this.fenceRadius !== this.gameModel.fenceRadius) {\r\n        this.drawFence();\r\n      }\r\n    }\r\n\r\n    this.updatePlagueSpikes(timeDiff);\r\n    this.updateSpikeSprites(timeDiff)\r\n  }\r\n\r\n  updatePlagueSpikes(timeDiff: number): void {\r\n    if (this.gameModel.constructions.plagueSpikes) {\r\n      this.spikeTimer -= timeDiff;\r\n      if (this.spikeTimer < 0) {\r\n        this.spikeTimer = this.gameModel.spikeDelay;\r\n        const aliveHumans = this.humans.aliveHumans;\r\n        for (let i = 0; i < aliveHumans.length; i++) {\r\n          if (Math.abs(aliveHumans[i].x - this.sprite.x) < this.fenceRadius) {\r\n            if (Math.abs(aliveHumans[i].y - this.sprite.y) < this.fenceRadius) {\r\n              if (this.fastDistance(this.sprite.x, this.sprite.y, aliveHumans[i].x, aliveHumans[i].y) < this.fenceRadius) {\r\n                this.zombies.inflictPlague(aliveHumans[i]);\r\n                this.humans.damageHuman(aliveHumans[i], this.gameModel.zombieDamage);\r\n                this.blood.newPlagueSplatter(aliveHumans[i].x, aliveHumans[i].y);\r\n                this.addSpikeSprite(aliveHumans[i]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  addSpikeSprite(human : PIXI.AnimatedSprite): void {\r\n    let sprite = null as PIXI.Sprite;\r\n    for (let i = 0; i < this.spikeSprites.length; i++) {\r\n      if (!this.spikeSprites[i].visible) {\r\n        sprite = this.spikeSprites[i];\r\n        break;\r\n      }\r\n    }\r\n    if (!sprite) {\r\n      sprite = new PIXI.Sprite(this.spikeTexture);\r\n      this.spikeSprites.push(sprite);\r\n      characterContainer.addChild(sprite);\r\n      sprite.anchor.set(0.5, 1);\r\n    }\r\n    sprite.visible = true;\r\n    sprite.alpha = 1;\r\n    sprite.x = human.x;\r\n    sprite.y = human.y + 2;\r\n    sprite.zIndex = sprite.y;\r\n    sprite.scale.y = 2;\r\n    sprite.scale.x = Math.random() > 0.5 ? 1.5 : -1.5;\r\n  }\r\n\r\n  updateSpikeSprites(timeDiff: number): void {\r\n    for (let i = 0; i < this.spikeSprites.length; i++) {\r\n      if (this.spikeSprites[i].visible) {\r\n        this.spikeSprites[i].alpha -= timeDiff * 0.4;\r\n        if (this.spikeSprites[i].alpha <= 0) {\r\n          this.spikeSprites[i].visible = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  isWithinFence(position : {x:number, y:number}) : boolean {\r\n    if (!this.gameModel.constructions.fence || this.gameModel.currentState != this.gameModel.states.playingLevel) {\r\n      return false;\r\n    }\r\n    if (position.x > this.fence.x - this.fenceRadius && position.x < this.fence.x + this.fenceRadius &&\r\n      position.y > this.fence.y - this.fenceRadius && position.y < this.fence.y + this.fenceRadius) {\r\n      return this.fastDistance(position.x, position.y, this.fence.x, this.fence.y) <= this.fenceRadius;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nclass BoneCollector extends PIXI.AnimatedSprite {\r\n  xSpeed = 0;\r\n  ySpeed = 0;\r\n  bones = 0;\r\n  speedFactor = 0;\r\n  boneList = [];\r\n  target = null;\r\n  state : BoneCollectorState;\r\n  constructor(textures : PIXI.Texture[]) {\r\n    super(textures);\r\n    this.animationSpeed = 0.2;\r\n  }\r\n}\r\n\r\nenum BoneCollectorState {\r\n  collecting, returning, waiting\r\n}\r\n\r\nexport class BoneCollectors {\r\n\r\n  private static instance: BoneCollectors;\r\n  constructor() {\r\n    if (BoneCollectors.instance)\r\n      return BoneCollectors.instance;\r\n    BoneCollectors.instance = this;\r\n  }\r\n\r\n  sprites : BoneCollector[] = [];\r\n  maxSpeed = 125;\r\n  texture : PIXI.Texture[];\r\n  scaling = 2;\r\n  collectDistance = 10;\r\n  fastDistance = fastDistance;\r\n  bones : Bones;\r\n  gameModel : GameModel;\r\n  graveyard : Graveyard;\r\n\r\n  populate(): void {\r\n    this.graveyard = new Graveyard();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.bones = new Bones();\r\n    if (!this.texture) {\r\n      this.texture = [];\r\n      for (let i = 0; i < 2; i++) {\r\n        this.texture.push(PIXI.Texture.from('bonecollector' + (i + 1) + '.png'));\r\n      }\r\n    }\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.sprites[i].boneList = [];\r\n      this.sprites[i].target = false;\r\n      this.sprites[i].position.set(this.graveyard.sprite.x, this.graveyard.sprite.y);\r\n      this.sprites[i].state = BoneCollectorState.collecting;\r\n    }\r\n  }\r\n\r\n  addAndRemoveBoneCollectors(): void {\r\n    if (this.sprites.length > this.gameModel.persistentData.boneCollectors) {\r\n      const boneCollector = this.sprites.pop();\r\n      if (boneCollector.boneList) {\r\n        for (let i = 0; i < boneCollector.boneList.length; i++) {\r\n          boneCollector.boneList[i].collector = false;\r\n        }\r\n      }\r\n      this.gameModel.addBones(boneCollector.bones);\r\n      characterContainer.removeChild(boneCollector);\r\n    }\r\n    if (this.sprites.length < this.gameModel.persistentData.boneCollectors) {\r\n      const sprite = new BoneCollector(this.texture);\r\n      sprite.animationSpeed = 0.2;\r\n      sprite.anchor.set(0.5, 1);\r\n      sprite.position.set(this.graveyard.sprite.x, this.graveyard.sprite.y);\r\n      sprite.zIndex = sprite.position.y;\r\n      sprite.visible = true;\r\n      sprite.scale.set(Math.random() > 0.5 ? this.scaling : -1 * this.scaling, this.scaling);\r\n      sprite.xSpeed = 0;\r\n      sprite.ySpeed = 0;\r\n      sprite.bones = 0;\r\n      sprite.speedFactor = 0;\r\n      sprite.state = BoneCollectorState.collecting;\r\n      sprite.play();\r\n      sprite.boneList = [];\r\n      this.sprites.push(sprite);\r\n      characterContainer.addChild(sprite);\r\n    }\r\n  }\r\n\r\n  update(timeDiff: number): void {\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.updateBoneCollector(this.sprites[i], timeDiff);\r\n    }\r\n  }\r\n\r\n  findNearestBone(boneCollector : BoneCollector): void {\r\n\r\n    if (!boneCollector.boneList) {\r\n      boneCollector.boneList = [];\r\n    }\r\n\r\n    if (boneCollector.boneList.length == 0) {\r\n      let x = boneCollector.x;\r\n      let y = boneCollector.y;\r\n      for (let j = 0; j < 3; j++) {\r\n        let nearestBone = null;\r\n        let distanceToNearest = 2000;\r\n        for (let i = 0; i < this.bones.uncollected.length; i++) {\r\n          if (!this.bones.uncollected[i].collected && !this.bones.uncollected[i].collector) {\r\n            const distance = this.fastDistance(x, y, this.bones.uncollected[i].x, this.bones.uncollected[i].y);\r\n            if (distance < distanceToNearest) {\r\n              distanceToNearest = distance;\r\n              nearestBone = this.bones.uncollected[i];\r\n            }\r\n          }\r\n        }\r\n        if (nearestBone) {\r\n          boneCollector.boneList.push(nearestBone);\r\n          nearestBone.collector = true;\r\n          x = nearestBone.x;\r\n          y = nearestBone.y;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (boneCollector.boneList.length > 0) {\r\n      boneCollector.target = boneCollector.boneList.shift();\r\n    } else {\r\n      boneCollector.target = false;\r\n    }\r\n  }\r\n\r\n  updateBoneCollector(boneCollector : BoneCollector, timeDiff: number): void {\r\n\r\n    if (boneCollector.target && !(boneCollector.target.graveyard && boneCollector.state == BoneCollectorState.collecting))\r\n      this.updateSpeed(boneCollector, timeDiff);\r\n\r\n    switch (boneCollector.state) {\r\n\r\n      case BoneCollectorState.collecting:\r\n\r\n        if (!boneCollector.target || boneCollector.target.collected || !boneCollector.target.visible) {\r\n          this.findNearestBone(boneCollector);\r\n        }\r\n        if (boneCollector.target && !boneCollector.target.collected) {\r\n          if (this.fastDistance(boneCollector.position.x, boneCollector.position.y, boneCollector.target.x, boneCollector.target.y) < this.collectDistance) {\r\n            boneCollector.bones++;\r\n            boneCollector.target.collected = true;\r\n            boneCollector.speedFactor = 0;\r\n          }\r\n        }\r\n        if (boneCollector.bones >= this.gameModel.boneCollectorCapacity || !boneCollector.target) {\r\n          boneCollector.state = BoneCollectorState.returning;\r\n          boneCollector.target = this.graveyard.sprite;\r\n          return;\r\n        }\r\n        break;\r\n\r\n      case BoneCollectorState.returning:\r\n        if (!boneCollector.target) {\r\n          boneCollector.target = this.graveyard.sprite;\r\n        }\r\n        if (this.fastDistance(boneCollector.position.x, boneCollector.position.y, boneCollector.target.x, boneCollector.target.y) < this.collectDistance) {\r\n          boneCollector.target = false;\r\n          this.gameModel.addBones(boneCollector.bones);\r\n          boneCollector.bones = 0;\r\n          boneCollector.state = BoneCollectorState.collecting;\r\n          boneCollector.speedFactor = 0;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  updateSpeed(boneCollector : BoneCollector, timeDiff: number): void {\r\n\r\n    boneCollector.speedFactor = Math.min(1, boneCollector.speedFactor += timeDiff * 3);\r\n\r\n    const xVector = boneCollector.target.x - boneCollector.x;\r\n    const yVector = boneCollector.target.y - boneCollector.y;\r\n    const ax = Math.abs(xVector);\r\n    const ay = Math.abs(yVector);\r\n    if (Math.max(ax, ay) == 0)\r\n      return;\r\n    let ratio = 1 / Math.max(ax, ay);\r\n    ratio = ratio * (1.29289 - (ax + ay) * ratio * 0.29289);\r\n\r\n    boneCollector.xSpeed = xVector * ratio * this.maxSpeed * boneCollector.speedFactor;\r\n    boneCollector.ySpeed = yVector * ratio * this.maxSpeed * boneCollector.speedFactor;\r\n\r\n    boneCollector.position.x += boneCollector.xSpeed * timeDiff;\r\n    boneCollector.position.y += boneCollector.ySpeed * timeDiff;\r\n    boneCollector.zIndex = boneCollector.position.y;\r\n  }\r\n}\r\n\r\nenum HarpyStates {\r\n  bombing, returning\r\n}\r\n\r\nclass Harpy extends PIXI.AnimatedSprite {\r\n  bomb: Bomb;\r\n  target = null;\r\n  state: HarpyStates;\r\n  xSpeed = 0;\r\n  ySpeed = 0;\r\n  bombs = 0;\r\n  speedFactor = 0;\r\n  constructor(textures: PIXI.Texture[]) {\r\n    super(textures);\r\n    this.animationSpeed = 0.2;\r\n    this.anchor.set(0.5, 1);\r\n    this.visible = true;\r\n  }\r\n}\r\n\r\nclass Bomb extends PIXI.Sprite {\r\n  dropped = false;\r\n  floor = 0;\r\n  rotSpeed = 0;\r\n  target: Human;\r\n  xSpeed = 0;\r\n  ySpeed = 0;\r\n  harpy: Harpy;\r\n  fire = false;\r\n  constructor(texture: PIXI.Texture) {\r\n    super(texture);\r\n    this.anchor.set(0.5, 0.5);\r\n  }\r\n}\r\n\r\nexport class Harpies {\r\n\r\n  private static instance: Harpies;\r\n  constructor() {\r\n    if (Harpies.instance)\r\n      return Harpies.instance;\r\n    Harpies.instance = this;\r\n  }\r\n\r\n  model: GameModel;\r\n  graveyard: Graveyard;\r\n  zombies: Zombies;\r\n  humans: Humans;\r\n  tanks: Tanks;\r\n  sprites: Harpy[] = [];\r\n  bombSprites: Bomb[] = [];\r\n  discardedBombSprites: Bomb[] = [];\r\n  bombHeight = 100;\r\n  textures: PIXI.Texture[];\r\n  bombTexture: PIXI.Texture;\r\n  scaling = 2.5;\r\n  fastDistance = fastDistance;\r\n\r\n  populate(): void {\r\n    this.model = GameModel.getInstance();\r\n    this.graveyard = new Graveyard();\r\n    this.zombies = new Zombies();\r\n    this.humans = new Humans();\r\n    this.tanks = new Tanks();\r\n    if (!this.textures) {\r\n      this.textures = [];\r\n      for (let i = 0; i < 2; i++) {\r\n        this.textures.push(PIXI.Texture.from(\"harpy\" + (i + 1) + \".png\"));\r\n      }\r\n      this.bombTexture = PIXI.Texture.from(\"harpybomb.png\")\r\n    }\r\n    if (typeof this.model.persistentData.harpies === 'undefined') {\r\n      this.model.persistentData.harpies = 0;\r\n    }\r\n\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.sprites[i].target = false;\r\n      this.sprites[i].position.set(this.graveyard.sprite.x, this.graveyard.sprite.y - this.bombHeight);\r\n      this.sprites[i].state = HarpyStates.returning;\r\n    }\r\n\r\n    for (let i = 0; i < this.bombSprites.length; i++) {\r\n      this.bombSprites[i].visible = false;\r\n    }\r\n  }\r\n\r\n  addAndRemoveHarpies(): void {\r\n    if (this.sprites.length > this.model.persistentData.harpies) {\r\n      const harpy = this.sprites.pop();\r\n      harpy.target = false;\r\n      if (harpy.bomb) {\r\n        harpy.bomb.dropped = true;\r\n        harpy.bomb.floor = harpy.bomb.y + this.bombHeight;\r\n      }\r\n      foregroundContainer.removeChild(harpy);\r\n    }\r\n    if (this.sprites.length < this.model.persistentData.harpies) {\r\n      const sprite = new Harpy(this.textures);\r\n      sprite.position.set(this.graveyard.sprite.x, this.graveyard.sprite.y - this.bombHeight);\r\n      sprite.zIndex = sprite.position.y;\r\n      sprite.scale.set(Math.random() > 0.5 ? this.scaling : -1 * this.scaling, this.scaling);\r\n      sprite.state = HarpyStates.returning;\r\n      sprite.play();\r\n      this.sprites.push(sprite);\r\n      foregroundContainer.addChild(sprite);\r\n    }\r\n  }\r\n\r\n  update(timeDiff: number): void {\r\n    for (let i = 0; i < this.sprites.length; i++) {\r\n      this.updateHarpy(this.sprites[i], timeDiff);\r\n    }\r\n    for (let i = 0; i < this.bombSprites.length; i++) {\r\n      if (this.bombSprites[i].visible)\r\n        this.updateBomb(this.bombSprites[i], timeDiff);\r\n    }\r\n  }\r\n\r\n  updateBomb(bomb: Bomb, timeDiff: number): void {\r\n    if (bomb.dropped) {\r\n      bomb.rotation += timeDiff * bomb.rotSpeed;\r\n      bomb.ySpeed += timeDiff * 50;\r\n      bomb.scale.x = bomb.scale.y -= timeDiff * 0.2;\r\n      bomb.y += bomb.ySpeed * timeDiff;\r\n      if (bomb.y >= bomb.floor - 2) {\r\n        bomb.visible = false;\r\n        this.discardedBombSprites.push(bomb);\r\n        if (bomb.fire) {\r\n          this.humans.burnHuman(bomb.target, this.model.zombieHealth * 0.1);\r\n        }\r\n        this.zombies.causePlagueExplosion(bomb, this.model.zombieHealth * 0.2, false);\r\n      }\r\n    } else {\r\n      bomb.x = bomb.harpy.x;\r\n      bomb.y = bomb.harpy.y;\r\n    }\r\n  }\r\n\r\n  updateHarpy(harpy: Harpy, timeDiff: number): void {\r\n    switch (harpy.state) {\r\n      case HarpyStates.bombing:\r\n\r\n        if (!harpy.target || harpy.target.graveyard || harpy.target.dead) {\r\n          if (this.model.tankBuster && this.model.isBossStage(this.model.level) && this.tanks.aliveTanks.length > 0) {\r\n            harpy.target = getRandomElementFromArray(this.tanks.aliveTanks, Math.random());\r\n            harpy.bomb.fire = true;\r\n          } else {\r\n            for (let i = 0; i < 8; i++) {\r\n              harpy.target = getRandomElementFromArray(this.humans.aliveHumans, Math.random());\r\n              if (!harpy.target || (this.fastDistance(harpy.x, harpy.y, harpy.target.x, harpy.target.y - this.bombHeight) < 500)) {\r\n                break;\r\n              }\r\n            }\r\n\r\n            harpy.bomb.fire = false;\r\n          }\r\n        }\r\n\r\n        if (!harpy.target) {\r\n          harpy.state = HarpyStates.returning;\r\n          return;\r\n        }\r\n\r\n\r\n        if (this.fastDistance(harpy.x, harpy.y, harpy.target.x, harpy.target.y - this.bombHeight) < 10) {\r\n          harpy.bombs--;\r\n          harpy.bomb.dropped = true;\r\n          harpy.bomb.floor = harpy.target.y;\r\n          harpy.bomb.target = harpy.target;\r\n          harpy.bomb = null;\r\n          harpy.speedFactor = 0;\r\n          harpy.target = false;\r\n          if (harpy.bombs <= 0) {\r\n            harpy.state = HarpyStates.returning;\r\n          } else {\r\n            this.getBomb(harpy);\r\n          }\r\n\r\n        } else {\r\n          this.updateHarpySpeed(harpy, timeDiff);\r\n        }\r\n\r\n        break;\r\n      case HarpyStates.returning:\r\n\r\n        if (!harpy.target) {\r\n          harpy.target = this.graveyard.sprite;\r\n        }\r\n\r\n        if (this.fastDistance(harpy.x, harpy.y, harpy.target.x, harpy.target.y - this.bombHeight) < 10) {\r\n          harpy.bombs = this.model.harpyBombs;\r\n          this.getBomb(harpy);\r\n          harpy.state = HarpyStates.bombing;\r\n          harpy.speedFactor = 0;\r\n        } else {\r\n          this.updateHarpySpeed(harpy, timeDiff);\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  getBomb(harpy: Harpy): void {\r\n    let bomb: Bomb;\r\n    if (this.discardedBombSprites.length > 0) {\r\n      bomb = this.discardedBombSprites.pop();\r\n    } else {\r\n      bomb = new Bomb(this.bombTexture);\r\n      this.bombSprites.push(bomb);\r\n      foregroundContainer.addChild(bomb);\r\n    }\r\n    bomb.scale.x = bomb.scale.y = 2;\r\n    bomb.rotation = 0;\r\n    bomb.rotSpeed = Math.random() > 0.5 ? 4 : -4;\r\n    bomb.ySpeed = 0;\r\n    bomb.visible = true;\r\n    bomb.dropped = false;\r\n    bomb.harpy = harpy;\r\n    harpy.bomb = bomb;\r\n  }\r\n\r\n  updateHarpySpeed(harpy: Harpy, timeDiff: number): void {\r\n    harpy.speedFactor = Math.min(1, harpy.speedFactor += timeDiff * 2);\r\n\r\n    const xVector = harpy.target.x - harpy.x;\r\n    const yVector = (harpy.target.y - this.bombHeight) - harpy.y;\r\n    const ax = Math.abs(xVector);\r\n    const ay = Math.abs(yVector);\r\n    if (Math.max(ax, ay) == 0)\r\n      return;\r\n    let ratio = 1 / Math.max(ax, ay);\r\n    ratio = ratio * (1.29289 - (ax + ay) * ratio * 0.29289);\r\n\r\n    harpy.xSpeed = xVector * ratio * this.model.harpySpeed * harpy.speedFactor;\r\n    harpy.ySpeed = yVector * ratio * this.model.harpySpeed * harpy.speedFactor;\r\n\r\n    harpy.position.x += harpy.xSpeed * timeDiff;\r\n    harpy.position.y += harpy.ySpeed * timeDiff;\r\n    harpy.scale.x = harpy.xSpeed > 0 ? this.scaling : -1 * this.scaling;\r\n  }\r\n}","import { Creature } from \"./classes/creatureclasses\";\r\nimport { Human, HumanState, VIPText } from \"./classes/humanclasses\";\r\nimport {\r\n  Blasts, Blood, Bones, Bullets, Exclamations, Fragments, Smoke, foregroundContainer, gameFieldSize, characterContainer,\r\n  GameModel, Skeleton, Trophies, ZmMap, Zombies, Graveyard, fastDistance\r\n} from \"./internal\";\r\n\r\n\r\n\r\nexport class Humans {\r\n\r\n  private static instance: Humans;\r\n  constructor() {\r\n    if (Humans.instance)\r\n      return Humans.instance;\r\n    Humans.instance = this;\r\n  }\r\n\r\n  map: ZmMap;\r\n  gameModel: GameModel;\r\n  blood: Blood;\r\n  smoke: Smoke;\r\n  bones: Bones;\r\n  zombies: Zombies;\r\n  skeleton: Skeleton;\r\n  blasts: Blasts;\r\n  fragments: Fragments;\r\n  trophies: Trophies;\r\n  exclamations: Exclamations;\r\n  bullets: Bullets;\r\n  police: Police;\r\n  army: Army;\r\n  tanks: Tanks;\r\n  maxWalkSpeed = 15;\r\n  maxRunSpeed = 35;\r\n  minSecondsTostand = 1;\r\n  maxSecondsToStand = 60; // 60\r\n  chanceToStayInCurrentBuilding = 0.95; // 0.95\r\n  textures = [];\r\n  doctorTextures = [];\r\n  doctorDeadTexture: PIXI.Texture[];\r\n  humans: Human[] = [];\r\n  discardedHumans: Human[] = [];\r\n  aliveHumans: Human[] = [];\r\n  graveyardAttackers = [];\r\n  humansPerLevel = 50; // 50\r\n  maxHumans = 1000; // 1000\r\n  scaling = 2;\r\n  visionDistance = 60;\r\n  vipEscaping = false;\r\n  vip : Human;\r\n  fleeChancePerZombie = 0.1;\r\n  fleeTime = 10;\r\n  scanTime = 3;\r\n  attackDistance = 20;\r\n  moveTargetDistance = 3;\r\n  attackSpeed = 2;\r\n  attackDamage = 5;\r\n  fadeSpeed = 0.1;\r\n  plagueTickTimer = 5;\r\n  healTickTimer = 5;\r\n  burnTickTimer = 5;\r\n  smokeTimer = 0.3;\r\n  fastDistance = fastDistance;\r\n  frozen = false;\r\n  pandemic = false;\r\n\r\n  graveYardPosition = null;\r\n\r\n  randomSecondsToStand(): number {\r\n    return this.minSecondsTostand + Math.random() * (this.maxSecondsToStand - this.minSecondsTostand);\r\n  }\r\n\r\n  vipText: VIPText;\r\n\r\n  damageHuman(human: Human, damage: number): void {\r\n    this.gameModel.addBlood(Math.round(damage / 3));\r\n    human.health -= damage;\r\n    human.timer.scan = 0;\r\n    if (!human.flags.tank) {\r\n      this.blood.newSplatter(human.x, human.y);\r\n      human.speedMod = Math.max(Math.min(1, human.health / human.maxHealth), 0.25);\r\n    } else {\r\n      this.fragments.newPart(human.x, human.y - 18, 0x7B650E);\r\n    }\r\n    if (human.health <= 0 && !human.flags.dead) {\r\n      this.bones.newBones(human.x, human.y);\r\n      human.flags.dead = true;\r\n      this.gameModel.addBrains(1);\r\n      this.skeleton.addXp(this.gameModel.level);\r\n      this.skeleton.testForLoot();\r\n\r\n      if (human.flags.tank) {\r\n        this.blasts.newDroneBlast(human.x, human.y - 5);\r\n        this.fragments.newFragmentExplosion(human.x, human.y - 5, 0x7B650E);\r\n        human.visible = false;\r\n      } else {\r\n        human.textures = human.deadTexture;\r\n      }\r\n\r\n      if (human.flags.vip) {\r\n        this.vipText.visible = false;\r\n        this.trophies.trophyAquired(this.gameModel.level);\r\n        setTimeout(()=>{\r\n          this.vipEscaping = false;\r\n        },1000);\r\n      }\r\n    }\r\n    if (!this.army.assaultStarted) {\r\n      if (Math.random() > 0.9 && this.gameModel.isBossStage(this.gameModel.level)) {\r\n        this.army.assaultStarted = true;\r\n        this.gameModel.sendMessage(\"The assault has begun!\");\r\n      }\r\n    }\r\n  }\r\n\r\n  updateBurns(human: Human, timeDiff: number): void {\r\n    human.timer.burnTick -= timeDiff;\r\n    human.timer.smoke -= timeDiff;\r\n\r\n    if (human.timer.smoke < 0) {\r\n      this.smoke.newFireSmoke(human.x, human.y - 14);\r\n      human.timer.smoke = this.smokeTimer;\r\n    }\r\n\r\n    if (human.timer.burnTick < 0) {\r\n      this.damageHuman(human, human.burnDamage);\r\n      human.timer.burnTick = this.burnTickTimer;\r\n      this.exclamations.newFire(human);\r\n    }\r\n  }\r\n\r\n  assignRandomTarget(human: Human): void {\r\n    if (Math.random() > this.chanceToStayInCurrentBuilding || human.timer.flee > 0) {\r\n      human.currentPoi = this.map.getRandomBuilding();\r\n    }\r\n    human.target = this.map.randomPositionInBuilding(human.currentPoi);\r\n    human.maxSpeed = human.timer.flee > 0 ? this.maxRunSpeed : this.maxWalkSpeed;\r\n    human.xSpeed = 0;\r\n    human.ySpeed = 0;\r\n  }\r\n\r\n  getMaxNpcs(): number {\r\n    return Math.min(this.humansPerLevel * this.gameModel.level, this.maxHumans);\r\n  }\r\n\r\n  getMaxHumans(): number {\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      return 0;\r\n    }\r\n    return this.getMaxNpcs() - (this.police.police.length + this.army.armymen.length);\r\n  }\r\n\r\n  getMaxDoctors(): number {\r\n    if (this.gameModel.level < 18)\r\n      return 0;\r\n\r\n    return Math.min(Math.round(0.7 * this.gameModel.level), 75);\r\n  }\r\n\r\n  getTorchChance(): number {\r\n    if (this.gameModel.level < 10)\r\n      return 0;\r\n\r\n    return Math.min(this.gameModel.level - 10, 40) * 0.02;\r\n  }\r\n\r\n  getMaxHealth(level: number): number {\r\n    if (level < 7) {\r\n      return (level + 4) * 10;\r\n    }\r\n    if (level < 12) {\r\n      return (level - 1) * 20;\r\n    }\r\n    if (level < 16) {\r\n      return (level - 3) * 25;\r\n    }\r\n    if (level < 29) {\r\n      return (level - 9) * 50;\r\n    }\r\n    if (level < 49) {\r\n      return (level - 19) * 100;\r\n    }\r\n    if (level < 64) {\r\n      return (level - 39) * 300;\r\n    }\r\n    if (level < 85) {\r\n      return (level - 49) * 500;\r\n    }\r\n    if (level > 499) {\r\n      return 8500000 * Math.pow(1.03, level - 499);\r\n    }\r\n\r\n    return 17800 * Math.pow(1.015, level - 84);\r\n  }\r\n\r\n  getAttackDamage(): void {\r\n    if (this.gameModel.level == 1) {\r\n      this.attackDamage = 2;\r\n      return;\r\n    }\r\n    if (this.gameModel.level == 2) {\r\n      this.attackDamage = 4;\r\n      return;\r\n    }\r\n    if (this.gameModel.level == 3) {\r\n      this.attackDamage = 5;\r\n      return;\r\n    }\r\n    this.attackDamage = Math.round(this.getMaxHealth(this.gameModel.level) / 10);\r\n  }\r\n\r\n  setupVipText(human: Human): void {\r\n    if (!this.vipText) {\r\n      this.vipText = new VIPText(\"VIP\", {\r\n        fontFamily: 'sans-serif',\r\n        fontSize: 64,\r\n        fill: \"#FC0\",\r\n        stroke: \"#000\",\r\n        strokeThickness: 5,\r\n        align: 'center'\r\n      });\r\n      this.vipText.anchor.set(0.5, 1);\r\n      this.vipText.scale.x = 0.25;\r\n      this.vipText.scale.y = 0.25;\r\n      foregroundContainer.addChild(this.vipText);\r\n    }\r\n    this.vipText.visible = true;\r\n    this.vipText.human = human;\r\n    this.vipText.yOffset = -20;\r\n    this.vipText.x = human.x;\r\n    this.vipText.y = human.y + this.vipText.yOffset;\r\n  }\r\n\r\n  escapeTarget: { x: number, y: number };\r\n\r\n  populate(): void {\r\n    this.map = new ZmMap();\r\n    this.zombies = new Zombies();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.blood = new Blood();\r\n    this.smoke = new Smoke();\r\n    this.bones = new Bones();\r\n    this.skeleton = new Skeleton();\r\n    this.blasts = new Blasts();\r\n    this.fragments = new Fragments();\r\n    this.trophies = new Trophies();\r\n    this.exclamations = new Exclamations();\r\n    this.bullets = new Bullets();\r\n    this.police = new Police();\r\n    this.army = new Army();\r\n    this.tanks = new Tanks();\r\n    this.map.populatePois();\r\n\r\n    if (this.textures.length == 0) {\r\n      for (let i = 0; i < 6; i++) {\r\n        const animated = [];\r\n        for (let j = 0; j < 3; j++) {\r\n          animated.push(PIXI.Texture.from('human' + (i + 1) + '_' + (j + 1) + '.png'));\r\n        }\r\n        this.textures.push({\r\n          animated: animated,\r\n          dead: [PIXI.Texture.from('human' + (i + 1) + '_dead.png')]\r\n        })\r\n      }\r\n    }\r\n    if (this.doctorTextures.length == 0) {\r\n      for (let i = 0; i < 3; i++) {\r\n        this.doctorTextures.push(PIXI.Texture.from('doctor' + (i + 1) + '.png'))\r\n      }\r\n      this.doctorDeadTexture = [PIXI.Texture.from('doctor4.png')];\r\n    }\r\n\r\n    if (this.humans.length > 0) {\r\n      for (let i = 0; i < this.humans.length; i++) {\r\n        characterContainer.removeChild(this.humans[i]);\r\n        this.humans[i].stop();\r\n      }\r\n      this.discardedHumans = this.humans.slice();\r\n      this.humans.length = 0;\r\n      this.aliveHumans.length = 0;\r\n    }\r\n\r\n    this.police.populate();\r\n    this.army.populate();\r\n    this.tanks.populate();\r\n\r\n    this.getAttackDamage();\r\n    const maxHumans = this.getMaxHumans();\r\n    let numDoctors = this.getMaxDoctors();\r\n    const maxHealth = this.getMaxHealth(this.gameModel.level);\r\n    let vipNeeded = this.trophies.doesLevelHaveTrophy(this.gameModel.level);\r\n    this.vip = undefined;\r\n    if (vipNeeded) {\r\n      this.escapeTarget = { x: gameFieldSize.x / 2, y: gameFieldSize.y + 50 };\r\n    } else {\r\n      if (this.vipText) {\r\n        this.vipText.visible = false;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < maxHumans; i++) {\r\n      let human: Human;\r\n      if (numDoctors > 0) {\r\n        if (this.discardedHumans.length > 0) {\r\n          human = this.discardedHumans.pop();\r\n          human.textures = this.doctorTextures;\r\n        } else {\r\n          human = new Human(this.doctorTextures);\r\n        }\r\n        human.deadTexture = this.doctorDeadTexture;\r\n        human.flags.doctor = true;\r\n        human.flags.torchBearer = false;\r\n        human.timer.healTick = Math.random() * this.healTickTimer;\r\n        numDoctors--;\r\n      } else {\r\n        const torchBearer = Math.random() < this.getTorchChance();\r\n        const textureId = Math.floor(Math.random() * 3) + (torchBearer ? 3 : 0);\r\n        if (this.discardedHumans.length > 0) {\r\n          human = this.discardedHumans.pop();\r\n          human.textures = this.textures[textureId].animated;\r\n        } else {\r\n          human = new Human(this.textures[textureId].animated);\r\n        }\r\n        human.flags.torchBearer = torchBearer;\r\n        human.deadTexture = this.textures[textureId].dead;\r\n        human.flags.doctor = false;\r\n      }\r\n      human.reset();\r\n      human.flags.vip = false;\r\n      human.flags.dead = false;\r\n      human.flags.burning = false;\r\n      human.flags.infected = false;\r\n      human.burnDamage = 0;\r\n      human.plagueDamage = 0;\r\n      human.plagueTicks = 0;\r\n      human.animationSpeed = 0.15;\r\n      human.anchor.set(35 / 80, 1);\r\n      human.currentPoi = this.map.getRandomBuilding();\r\n      human.position.copyFrom(this.map.randomPositionInBuilding(human.currentPoi));\r\n      human.zIndex = human.position.y;\r\n      human.xSpeed = 0;\r\n      human.ySpeed = 0;\r\n      human.timer.plagueTick = Math.random() * this.plagueTickTimer;\r\n      human.target = false;\r\n      human.speedMod = 1;\r\n      human.zombieTarget = null;\r\n      human.lastKnownBuilding = null;\r\n      human.visionDistance = this.visionDistance;\r\n      human.visible = true;\r\n      human.alpha = 1;\r\n      human.maxHealth = human.health = maxHealth;\r\n      if (vipNeeded && !human.flags.doctor) {\r\n        human.flags.vip = true;\r\n        this.vip = human;\r\n        vipNeeded = false;\r\n        human.maxHealth = human.health = maxHealth * 2;\r\n        this.setupVipText(human);\r\n      }\r\n      human.timer.scan = Math.random() * this.scanTime;\r\n      human.timer.flee = 0;\r\n      this.changeState(human, HumanState.standing);\r\n      human.timer.standing = Math.random() * this.randomSecondsToStand();\r\n      human.timer.attack = this.attackSpeed;\r\n      human.scale.set(Math.random() > 0.5 ? this.scaling : -1 * this.scaling, this.scaling);\r\n      this.humans.push(human);\r\n      characterContainer.addChild(human);\r\n    }\r\n  }\r\n\r\n  updateHumanSpeed(human: Human, timeDiff: number): void {\r\n\r\n    if (this.frozen) {\r\n      human.gotoAndStop(0);\r\n      return;\r\n    } else {\r\n      if (!human.playing) {\r\n        human.play();\r\n      }\r\n    }\r\n\r\n    if (human.timer.dogStun && human.timer.dogStun > 0) {\r\n      human.timer.dogStun -= timeDiff;\r\n      return;\r\n    }\r\n\r\n    if (human.timer.target != 0 || !human.targetVector) {\r\n      human.timer.target = 0;\r\n    }\r\n    human.timer.target -= timeDiff;\r\n    if (human.timer.target <= 0) {\r\n      human.targetVector = this.map.howDoIGetToMyTarget(human, human.target);\r\n      human.timer.target = 0.2;\r\n    }\r\n    const humanSpeedMod = human.speedMod * human.maxSpeed;\r\n\r\n    human.xSpeed = human.targetVector.x * humanSpeedMod;\r\n    human.ySpeed = human.targetVector.y * humanSpeedMod;\r\n\r\n    if (isNaN(human.xSpeed) || isNaN(human.ySpeed)) {\r\n      human.xSpeed = 0;\r\n      human.ySpeed = 0;\r\n    }\r\n\r\n    human.position.x += human.xSpeed * timeDiff;\r\n    human.position.y += human.ySpeed * timeDiff;\r\n    human.zIndex = human.position.y;\r\n    if (Math.abs(human.xSpeed) > 1 && !human.flags.tank)\r\n      human.scale.x = human.xSpeed > 0 ? this.scaling : -this.scaling;\r\n  }\r\n\r\n  drawTargets = false;\r\n\r\n  update(timeDiff: number): void {\r\n    if (this.gameModel.currentState != this.gameModel.states.playingLevel) {\r\n      return;\r\n    }\r\n    const aliveHumans = [];\r\n    const aliveZombies = this.zombies.aliveZombies;\r\n    this.graveyardAttackers.length = 0;\r\n    for (let i = 0; i < this.humans.length; i++) {\r\n      this.updateHuman(this.humans[i], timeDiff, aliveZombies);\r\n      if (!this.humans[i].flags.dead)\r\n        aliveHumans.push(this.humans[i]);\r\n    }\r\n    this.aliveHumans = aliveHumans;\r\n    this.gameModel.stats.human.count = this.aliveHumans.length;\r\n    this.police.update(timeDiff, aliveZombies);\r\n    this.army.update(timeDiff, aliveZombies);\r\n    this.tanks.update(timeDiff, aliveZombies);\r\n\r\n    if (this.vipText && this.vipText.visible) {\r\n      this.vipText.x = this.vipText.human.x;\r\n      this.vipText.y = this.vipText.human.y + this.vipText.yOffset;\r\n    }\r\n\r\n    this.gameModel.humanCount = this.aliveHumans.length;\r\n  }\r\n\r\n  updateDeadHumanFading(human: Human, timeDiff: number): void {\r\n    if (!human.visible)\r\n      return;\r\n\r\n    if (human.alpha > 0.5 && human.alpha - this.fadeSpeed * timeDiff <= 0.5) {\r\n      if (!human.flags.tank && Math.random() < this.gameModel.riseFromTheDeadChance) {\r\n        this.zombies.createZombie(human.x, human.y, human.flags.dog);\r\n        human.visible = false;\r\n        characterContainer.removeChild(human);\r\n        return;\r\n      }\r\n    }\r\n    human.alpha -= this.fadeSpeed * timeDiff;\r\n\r\n    if (human.alpha < 0) {\r\n      human.visible = false;\r\n      characterContainer.removeChild(human);\r\n    }\r\n    return;\r\n  }\r\n\r\n  changeState(human: Human, state: HumanState): void {\r\n    switch (state) {\r\n      case HumanState.standing:\r\n        human.gotoAndStop(0);\r\n        human.maxSpeed = this.maxWalkSpeed;\r\n        human.timer.standing = this.randomSecondsToStand();\r\n        break;\r\n      case HumanState.walking:\r\n        human.play();\r\n        human.maxSpeed = this.maxWalkSpeed;\r\n        break;\r\n      case HumanState.fleeing:\r\n        human.play();\r\n        human.timer.flee = this.fleeTime;\r\n        human.maxSpeed = this.maxRunSpeed;\r\n        this.assignRandomTarget(human);\r\n        this.exclamations.newExclamation(human);\r\n        break;\r\n      case HumanState.escaping:\r\n        human.play();\r\n        human.maxSpeed = this.maxRunSpeed;\r\n        human.target = this.escapeTarget;\r\n        this.exclamations.newExclamation(human);\r\n        this.gameModel.sendMessage(\"The VIP is escaping!\");\r\n        this.vipEscaping = true;\r\n        break;\r\n      case HumanState.attacking:\r\n        human.play();\r\n        human.maxSpeed = this.maxRunSpeed;\r\n        break;\r\n    }\r\n    human.state = state;\r\n  }\r\n\r\n  inflictBurn(human: Human, zombie: Creature): void {\r\n    if (human.flags.torchBearer) {\r\n      if (!zombie.flags.burning) {\r\n        this.exclamations.newFire(zombie);\r\n        zombie.burnDamage = this.attackDamage;\r\n      } else {\r\n        zombie.burnDamage += this.attackDamage;\r\n      }\r\n      zombie.flags.burning = true;\r\n    }\r\n  }\r\n\r\n  burnHuman(human: Human, damage: number): void {\r\n    if (!human)\r\n      return;\r\n\r\n    if (!human.flags.burning) {\r\n      human.timer.burnTick = this.burnTickTimer;\r\n      human.timer.smoke = this.smokeTimer;\r\n      this.exclamations.newFire(human);\r\n      human.burnDamage = damage;\r\n    } else {\r\n      human.burnDamage += damage;\r\n    }\r\n    human.flags.burning = true;\r\n  }\r\n\r\n  updatePlague(human: Human, timeDiff: number): void {\r\n    human.timer.plagueTick -= timeDiff;\r\n\r\n    if (human.timer.plagueTick < 0) {\r\n      this.damageHuman(human, human.plagueDamage);\r\n      human.timer.plagueTick = this.plagueTickTimer;\r\n      this.exclamations.newPoison(human);\r\n      human.plagueTicks--;\r\n      if (this.pandemic) {\r\n        this.pandemicBullet(human);\r\n      }\r\n      if (human.plagueTicks <= 0) {\r\n        human.flags.infected = false;\r\n        human.plagueDamage = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  pandemicBullet(human: Human): void {\r\n    for (let i = 0; i < this.aliveHumans.length; i++) {\r\n      if (Math.abs(this.aliveHumans[i].x - human.x) < 30 && Math.abs(this.aliveHumans[i].y - human.y) < 30) {\r\n        if (Math.random() < 0.3) {\r\n          this.bullets.newBullet(human, this.aliveHumans[i], this.gameModel.zombieDamage / 2, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  healHuman(human: Human): void {\r\n    if (human.health < human.maxHealth) {\r\n      if (human.flags.infected && human.plagueTicks > 0) {\r\n        human.plagueTicks--;\r\n      }\r\n      human.health += this.attackDamage * 2;\r\n      if (human.health > human.maxHealth) {\r\n        human.health = human.maxHealth;\r\n        human.speedMod = Math.max(Math.min(1, human.health / human.maxHealth), 0.25);\r\n      }\r\n      this.exclamations.newHealing(human);\r\n    }\r\n  }\r\n\r\n  doHeal(human: Human, timeDiff: number): void {\r\n    human.timer.healTick -= timeDiff;\r\n    if (human.timer.healTick < 0) {\r\n      const healRadius = 100;\r\n      human.timer.healTick = this.healTickTimer;\r\n      for (let i = 0; i < this.aliveHumans.length; i++) {\r\n        if (Math.abs(this.aliveHumans[i].x - human.x) < healRadius) {\r\n          if (Math.abs(this.aliveHumans[i].y - human.y) < healRadius) {\r\n            if (this.fastDistance(human.x, human.y, this.aliveHumans[i].x, this.aliveHumans[i].y) < healRadius) {\r\n              this.healHuman(this.aliveHumans[i]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  updateHuman(human: Human, timeDiff: number, aliveZombies: Creature[]): void {\r\n\r\n    if (human.flags.dead)\r\n      return this.updateDeadHumanFading(human, timeDiff);\r\n\r\n    human.timer.attack -= timeDiff;\r\n    human.timer.scan -= timeDiff;\r\n    human.timer.flee -= timeDiff;\r\n\r\n    if (human.flags.infected)\r\n      this.updatePlague(human, timeDiff);\r\n    if (human.flags.doctor)\r\n      this.doHeal(human, timeDiff);\r\n    if (human.flags.burning)\r\n      this.updateBurns(human, timeDiff);\r\n\r\n    if ((!human.zombieTarget || human.zombieTarget.flags.dead) && human.timer.scan < 0) {\r\n      const count = this.scanForZombies(human, aliveZombies);\r\n\r\n      if (count > 0) {\r\n        if (human.flags.vip) {\r\n          if (human.state !== HumanState.escaping)\r\n            this.changeState(human, HumanState.escaping);\r\n        } else if (Math.random() < count * this.fleeChancePerZombie) {\r\n          this.changeState(human, HumanState.fleeing);\r\n        } else {\r\n          human.target = human.zombieTarget;\r\n          this.changeState(human, HumanState.attacking);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (human.state) {\r\n      case HumanState.standing:\r\n        human.timer.standing -= timeDiff;\r\n        if (human.timer.standing < 0) {\r\n          this.assignRandomTarget(human);\r\n          this.changeState(human, HumanState.walking);\r\n        }\r\n        break;\r\n      case HumanState.walking:\r\n      case HumanState.fleeing:\r\n        if (this.fastDistance(human.position.x, human.position.y, human.target.x, human.target.y) < this.moveTargetDistance) {\r\n          human.target = undefined;\r\n          human.zombieTarget = undefined;\r\n          this.changeState(human, HumanState.standing);\r\n        } else {\r\n          this.updateHumanSpeed(human, timeDiff);\r\n        }\r\n        break;\r\n      case HumanState.escaping:\r\n        if (this.fastDistance(human.position.x, human.position.y, human.target.x, human.target.y) < this.moveTargetDistance) {\r\n          this.smoke.newDroneCloud(human.x, human.y);\r\n          human.flags.dead = true;\r\n          human.zombieTarget = undefined;\r\n          human.visible = false;\r\n          this.vipText.visible = false;\r\n          this.gameModel.sendMessage(\"The VIP has escaped!\");\r\n          this.gameModel.vipEscaped();\r\n          setTimeout(() => {\r\n            this.vipEscaping = false;\r\n          },1000);\r\n        } else {\r\n          this.updateHumanSpeed(human, timeDiff);\r\n        }\r\n        break;\r\n      case HumanState.attacking:\r\n        human.scale.x = human.target.x > human.x ? this.scaling : -this.scaling;\r\n        if (human.zombieTarget && !human.zombieTarget.flags.dead) {\r\n          const distanceToTarget = this.fastDistance(human.position.x, human.position.y, human.target.x, human.target.y);\r\n          if (distanceToTarget < this.attackDistance) {\r\n            if (human.timer.attack < 0) {\r\n              this.zombies.damageZombie(human.zombieTarget, this.attackDamage, human);\r\n              this.inflictBurn(human, human.zombieTarget);\r\n              human.timer.attack = this.attackSpeed;\r\n            }\r\n          } else {\r\n            this.updateHumanSpeed(human, timeDiff);\r\n          }\r\n        } else {\r\n          this.changeState(human, HumanState.standing);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  scanForZombies(human: Human, aliveZombies: Creature[]): number {\r\n    human.timer.scan = this.scanTime;\r\n    let zombieSpottedCount = 0;\r\n    for (let i = 0; i < aliveZombies.length; i++) {\r\n      if (!aliveZombies[i].flags.dead) {\r\n        if (Math.abs(aliveZombies[i].x - human.x) < human.visionDistance) {\r\n          if (Math.abs(aliveZombies[i].y - human.y) < human.visionDistance) {\r\n            human.zombieTarget = aliveZombies[i];\r\n            zombieSpottedCount++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return zombieSpottedCount;\r\n  }\r\n}\r\n\r\nclass PoliceMan extends Human {\r\n  radioTime = 0;\r\n  followTimer = 0;\r\n  policeState: PoliceState;\r\n  owner: PoliceMan;\r\n}\r\n\r\nenum PoliceState {\r\n  shooting,\r\n  attacking,\r\n  walking,\r\n  running,\r\n  standing,\r\n  following,\r\n  hunting\r\n}\r\n\r\nexport class Police {\r\n  private static instance: Police;\r\n  constructor() {\r\n    if (Police.instance)\r\n      return Police.instance;\r\n    Police.instance = this;\r\n  }\r\n  map: ZmMap;\r\n  gameModel: GameModel;\r\n  humans: Humans;\r\n  exclamations: Exclamations;\r\n  zombies: Zombies;\r\n  bullets: Bullets;\r\n  maxWalkSpeed = 15;\r\n  maxRunSpeed = 40;\r\n  police: PoliceMan[] = [];\r\n  discardedPolice: PoliceMan[] = [];\r\n  walkTexture = [];\r\n  deadTexture = [];\r\n  dogTexture = [];\r\n  deadDogTexture = [];\r\n  policeDogLevel = 20;\r\n  policePerLevel = 1;\r\n  attackSpeed = 2;\r\n  attackDamage = 16;\r\n  attackDistance = 20;\r\n  moveTargetDistance = 5;\r\n  shootDistance = 110;\r\n  visionDistance = 150;\r\n  scaling = 2;\r\n  dogScaling = 1.3;\r\n  radioTime = 30;\r\n\r\n  isExtraPolice(): boolean {\r\n    return (this.gameModel.level + 10) % 20 == 0;\r\n  }\r\n\r\n  getMaxPolice(): number {\r\n\r\n    const maxPolice = Math.min(Math.round(this.policePerLevel * this.gameModel.level), 100);\r\n\r\n    if (this.gameModel.level < 3)\r\n      return 0;\r\n\r\n    if (this.isExtraPolice()) {\r\n      return Math.max(maxPolice * 2, 150);\r\n    }\r\n\r\n    return maxPolice;\r\n  }\r\n\r\n  getMaxHealth(): number {\r\n    return Math.round(this.humans.getMaxHealth(this.gameModel.level) * 1.1);\r\n  }\r\n\r\n  getAttackDamage(): void {\r\n    this.attackDamage = Math.round(this.getMaxHealth() / 10);\r\n  }\r\n\r\n  populate(): void {\r\n    this.map = new ZmMap();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.humans = new Humans();\r\n    this.exclamations = new Exclamations();\r\n    this.zombies = new Zombies();\r\n    this.bullets = new Bullets();\r\n    if (this.walkTexture.length == 0) {\r\n      for (let i = 0; i < 3; i++) {\r\n        this.walkTexture.push(PIXI.Texture.from('cop' + (i + 1) + '.png'));\r\n      }\r\n      this.deadTexture = [PIXI.Texture.from('cop4.png')];\r\n      for (let i = 0; i < 2; i++) {\r\n        this.dogTexture.push(PIXI.Texture.from(\"dog\" + (i + 1) + \".png\"));\r\n      }\r\n      this.deadDogTexture = [PIXI.Texture.from(\"dogdead.png\")];\r\n    }\r\n\r\n    if (this.police.length > 0) {\r\n      for (let i = 0; i < this.police.length; i++) {\r\n        characterContainer.removeChild(this.police[i]);\r\n      }\r\n      this.discardedPolice = this.police.slice();\r\n      this.police = [];\r\n    }\r\n\r\n    const maxPolice = this.getMaxPolice();\r\n    const maxHealth = this.getMaxHealth();\r\n    const maxDogHealth = maxHealth * 0.6;\r\n    this.getAttackDamage();\r\n\r\n    for (let i = 0; i < maxPolice; i++) {\r\n      let police: PoliceMan;\r\n      if (this.discardedPolice.length > 0) {\r\n        police = this.discardedPolice.pop();\r\n        police.alpha = 1;\r\n        police.textures = this.walkTexture;\r\n      } else {\r\n        police = new PoliceMan(this.walkTexture);\r\n      }\r\n      police.reset();\r\n      police.flags.dog = false;\r\n      police.flags.dead = false;\r\n      police.flags.infected = false;\r\n      police.flags.burning = false;\r\n      police.burnDamage = 0;\r\n      police.plagueDamage = 0;\r\n      police.plagueTicks = 0;\r\n      police.deadTexture = this.deadTexture;\r\n      police.animationSpeed = 0.2;\r\n      police.anchor.set(35 / 80, 1);\r\n      police.currentPoi = this.map.getRandomBuilding();\r\n      police.position.copyFrom(this.map.randomPositionInBuilding(police.currentPoi));\r\n      police.zIndex = police.position.y;\r\n      police.xSpeed = 0;\r\n      police.ySpeed = 0;\r\n      police.radioTime = 5;\r\n      police.speedMod = 1;\r\n      police.lastKnownBuilding = undefined;\r\n      police.timer.plagueTick = Math.random() * this.humans.plagueTickTimer;\r\n      police.maxSpeed = this.maxWalkSpeed;\r\n      police.visionDistance = this.visionDistance;\r\n      police.visible = true;\r\n      police.maxHealth = police.health = maxHealth;\r\n      police.timer.scan = Math.random() * this.humans.scanTime;\r\n      police.timer.standing = Math.random() * this.humans.randomSecondsToStand();\r\n      police.target = false;\r\n      police.zombieTarget = undefined;\r\n      police.policeState = PoliceState.standing;\r\n      police.timer.attack = this.attackSpeed;\r\n      police.scale.set(Math.random() > 0.5 ? this.scaling : -1 * this.scaling, this.scaling);\r\n      this.police.push(police);\r\n      characterContainer.addChild(police);\r\n\r\n      if (this.gameModel.level >= this.policeDogLevel && Math.random() > 0.5) {\r\n        this.createPoliceDog(police, maxDogHealth);\r\n      }\r\n    }\r\n\r\n    if (this.isExtraPolice()) {\r\n      this.gameModel.sendMessage(\"Warning: High Police Activity!\");\r\n    }\r\n  }\r\n\r\n  createPoliceDog(police: PoliceMan, maxDogHealth: number): void {\r\n    let dog: PoliceMan;\r\n    if (this.discardedPolice.length > 0) {\r\n      dog = this.discardedPolice.pop();\r\n      dog.alpha = 1;\r\n      dog.textures = this.dogTexture;\r\n    } else {\r\n      dog = new PoliceMan(this.dogTexture);\r\n    }\r\n    dog.reset();\r\n    dog.owner = police;\r\n    dog.flags.dog = true;\r\n    dog.flags.dead = false;\r\n    dog.flags.infected = false;\r\n    dog.flags.burning = false;\r\n    dog.burnDamage = 0;\r\n    dog.plagueDamage = 0;\r\n    dog.plagueTicks = 0;\r\n    dog.deadTexture = this.deadDogTexture;\r\n    dog.animationSpeed = 0.15;\r\n    dog.anchor.set(0.5, 1);\r\n    dog.position.set(police.position.x + 3, police.position.y);\r\n    dog.zIndex = dog.position.y;\r\n    dog.xSpeed = 0;\r\n    dog.ySpeed = 0;\r\n    dog.speedMod = 1;\r\n    dog.lastKnownBuilding = null;\r\n    dog.timer.plagueTick = Math.random() * this.humans.plagueTickTimer;\r\n    dog.maxSpeed = this.maxRunSpeed;\r\n    dog.visionDistance = this.visionDistance;\r\n    dog.visible = true;\r\n    dog.maxHealth = dog.health = maxDogHealth;\r\n    dog.timer.scan = Math.random() * this.humans.scanTime;\r\n    dog.target = police;\r\n    dog.zombieTarget = null;\r\n    dog.policeState = PoliceState.following;\r\n    dog.followTimer = 0;\r\n    dog.timer.attack = this.attackSpeed;\r\n    dog.scale.set(Math.random() > 0.5 ? this.dogScaling : -1 * this.dogScaling, this.dogScaling);\r\n    this.police.push(dog);\r\n    characterContainer.addChild(dog);\r\n  }\r\n\r\n  update(timeDiff: number, aliveZombies: Creature[]): void {\r\n    let count = 0;\r\n    for (let i = 0; i < this.police.length; i++) {\r\n      if (this.police[i].flags.dog) {\r\n        this.updatePoliceDog(this.police[i], timeDiff, aliveZombies);\r\n      } else {\r\n        this.updatePolice(this.police[i], timeDiff, aliveZombies);\r\n      }\r\n      if (!this.police[i].flags.dead) {\r\n        this.humans.aliveHumans.push(this.police[i]);\r\n        count++;\r\n      }\r\n    }\r\n    this.gameModel.stats.police.count = count;\r\n  }\r\n\r\n  decideStateOnZombieDistance(police: PoliceMan): void {\r\n    if (police.zombieTarget && !police.zombieTarget.flags.dead) {\r\n      police.target = police.zombieTarget;\r\n      const distanceToTarget = fastDistance(police.position.x, police.position.y, police.zombieTarget.x, police.zombieTarget.y);\r\n\r\n      if (distanceToTarget > this.shootDistance) {\r\n        this.changeState(police, PoliceState.running);\r\n        return;\r\n      }\r\n\r\n      if (distanceToTarget < this.attackDistance) {\r\n        this.changeState(police, PoliceState.attacking);\r\n        return;\r\n      }\r\n      this.changeState(police, PoliceState.shooting);\r\n    }\r\n  }\r\n\r\n  changeState(police: PoliceMan, state: PoliceState): void {\r\n    switch (state) {\r\n      case PoliceState.standing:\r\n        police.gotoAndStop(0);\r\n        break;\r\n      case PoliceState.walking:\r\n        police.play();\r\n        police.maxSpeed = this.maxWalkSpeed;\r\n        break;\r\n      case PoliceState.running:\r\n        police.play();\r\n        police.maxSpeed = this.maxRunSpeed;\r\n        break;\r\n      case PoliceState.shooting:\r\n        police.gotoAndStop(0);\r\n        break;\r\n      case PoliceState.attacking:\r\n        police.play();\r\n        break;\r\n    }\r\n    police.policeState = state;\r\n  }\r\n\r\n  radioForBackup(police: PoliceMan): void {\r\n\r\n    let closestPolice = null;\r\n    let closestDistance = 2000;\r\n\r\n    for (let i = 0; i < this.police.length; i++) {\r\n      if (!this.police[i].flags.dead && !this.police[i].flags.dog && (!this.police[i].zombieTarget || this.police[i].zombieTarget.flags.dead)) {\r\n        const distance = fastDistance(police.x, police.y, this.police[i].x, this.police[i].y);\r\n        if (distance < closestDistance) {\r\n          closestPolice = this.police[i];\r\n          closestDistance = distance;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closestPolice) {\r\n      closestPolice.zombieTarget = police.zombieTarget;\r\n      this.exclamations.newRadio(police);\r\n      this.exclamations.newRadio(closestPolice);\r\n      police.radioTime = this.radioTime;\r\n      closestPolice.radioTime = this.radioTime;\r\n    }\r\n  }\r\n\r\n  updatePolice(police: PoliceMan, timeDiff: number, aliveZombies: Creature[]): void {\r\n\r\n    if (police.flags.dead)\r\n      return this.humans.updateDeadHumanFading(police, timeDiff);\r\n\r\n    police.timer.attack -= timeDiff;\r\n    police.timer.scan -= timeDiff;\r\n    police.radioTime -= timeDiff;\r\n\r\n    if (police.flags.infected)\r\n      this.humans.updatePlague(police, timeDiff);\r\n    if (police.flags.burning)\r\n      this.humans.updateBurns(police, timeDiff);\r\n\r\n    if ((!police.zombieTarget || police.zombieTarget.flags.dead) && police.timer.scan < 0) {\r\n      this.humans.scanForZombies(police, aliveZombies);\r\n      if (police.zombieTarget && !police.zombieTarget.flags.dead) {\r\n        if (police.radioTime < 0)\r\n          this.radioForBackup(police);\r\n      }\r\n    }\r\n\r\n    this.decideStateOnZombieDistance(police);\r\n\r\n    switch (police.policeState) {\r\n\r\n      case PoliceState.standing:\r\n        police.timer.standing -= timeDiff;\r\n        if (police.timer.standing < 0) {\r\n          this.humans.assignRandomTarget(police);\r\n          this.changeState(police, PoliceState.walking);\r\n        }\r\n\r\n        break;\r\n      case PoliceState.walking:\r\n\r\n        if (fastDistance(police.position.x, police.position.y, police.target.x, police.target.y) < this.moveTargetDistance) {\r\n          police.target = false;\r\n          police.zombieTarget = null;\r\n          police.timer.standing = this.humans.randomSecondsToStand();\r\n          this.changeState(police, PoliceState.standing);\r\n        } else {\r\n          this.humans.updateHumanSpeed(police, timeDiff);\r\n        }\r\n\r\n        break;\r\n      case PoliceState.running:\r\n\r\n        if (police.zombieTarget && !police.zombieTarget.flags.dead) {\r\n          if (police.target) {\r\n            this.humans.updateHumanSpeed(police, timeDiff);\r\n          }\r\n        } else {\r\n          this.changeState(police, PoliceState.standing);\r\n        }\r\n        break;\r\n      case PoliceState.attacking:\r\n        if (police.zombieTarget && !police.zombieTarget.flags.dead) {\r\n          police.scale.x = police.zombieTarget.x > police.x ? this.scaling : -this.scaling;\r\n          if (police.timer.attack < 0) {\r\n            this.zombies.damageZombie(police.zombieTarget, this.attackDamage, police);\r\n            police.timer.attack = this.attackSpeed;\r\n          }\r\n        } else {\r\n          this.changeState(police, PoliceState.standing);\r\n        }\r\n\r\n        break;\r\n      case PoliceState.shooting:\r\n        if (police.zombieTarget && !police.zombieTarget.flags.dead) {\r\n          police.scale.x = police.zombieTarget.x > police.x ? this.scaling : -this.scaling;\r\n          if (police.timer.attack < 0) {\r\n            this.bullets.newBullet(police, police.zombieTarget, this.attackDamage);\r\n            police.timer.attack = this.attackSpeed;\r\n          }\r\n        } else {\r\n          this.changeState(police, PoliceState.standing);\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n  updateDogSpeed(dog: PoliceMan, timeDiff: number): void {\r\n    this.humans.updateHumanSpeed(dog, timeDiff);\r\n    if (Math.abs(dog.xSpeed) > 1)\r\n      dog.scale.x = dog.xSpeed > 0 ? this.dogScaling : -this.dogScaling;\r\n  }\r\n  updatePoliceDog(dog: PoliceMan, timeDiff: number, aliveZombies: Creature[]): void {\r\n\r\n    if (dog.flags.dead)\r\n      return this.humans.updateDeadHumanFading(dog, timeDiff);\r\n\r\n    dog.timer.attack -= timeDiff;\r\n    dog.timer.scan -= timeDiff;\r\n\r\n    if (dog.flags.infected)\r\n      this.humans.updatePlague(dog, timeDiff);\r\n    if (dog.flags.burning)\r\n      this.humans.updateBurns(dog, timeDiff);\r\n\r\n    switch (dog.policeState) {\r\n\r\n      case PoliceState.following: {\r\n        if (dog.owner.flags.dead) {\r\n          dog.policeState = PoliceState.hunting;\r\n          dog.play();\r\n          break;\r\n        }\r\n\r\n        if (dog.owner.zombieTarget && !dog.owner.zombieTarget.flags.dead) {\r\n          dog.policeState = PoliceState.attacking;\r\n          dog.play();\r\n          dog.target = dog.owner.zombieTarget;\r\n          break;\r\n        }\r\n        dog.target = dog.owner;\r\n        if (fastDistance(dog.position.x, dog.position.y, dog.target.x, dog.target.y) < this.moveTargetDistance) {\r\n          dog.followTimer = Math.random() * 3;\r\n          dog.gotoAndStop(0);\r\n        } else {\r\n          dog.followTimer -= timeDiff;\r\n          if (dog.followTimer < 0) {\r\n            dog.play();\r\n            this.updateDogSpeed(dog, timeDiff);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case PoliceState.attacking: {\r\n        if (dog.zombieTarget && !dog.zombieTarget.flags.dead) {\r\n          if (fastDistance(dog.position.x, dog.position.y, dog.zombieTarget.x, dog.zombieTarget.y) < this.moveTargetDistance) {\r\n            dog.scale.x = dog.target.x > dog.x ? this.dogScaling : -this.dogScaling;\r\n            if (dog.timer.attack < 0) {\r\n              this.zombies.damageZombie(dog.zombieTarget, this.attackDamage, dog);\r\n              dog.target.dogStun = 1;\r\n              dog.timer.attack = this.attackSpeed;\r\n            }\r\n          } else {\r\n            dog.target = dog.zombieTarget;\r\n            this.updateDogSpeed(dog, timeDiff);\r\n          }\r\n        } else {\r\n          dog.policeState = PoliceState.following;\r\n        }\r\n        break;\r\n      }\r\n      case PoliceState.hunting: {\r\n        if ((!dog.zombieTarget || dog.zombieTarget.flags.dead) && dog.timer.scan < 0) {\r\n          this.humans.scanForZombies(dog, aliveZombies);\r\n          if (dog.zombieTarget) {\r\n            dog.policeState = PoliceState.attacking;\r\n          }\r\n        }\r\n\r\n        if (fastDistance(dog.position.x, dog.position.y, dog.target.x, dog.target.y) < this.moveTargetDistance) {\r\n          dog.target = { x: Math.random() * gameFieldSize.x, y: Math.random() * gameFieldSize.y };\r\n          dog.maxSpeed = this.maxRunSpeed;\r\n        } else {\r\n          this.updateDogSpeed(dog, timeDiff);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass ArmyMan extends Human {\r\n  minigun = false;\r\n  rocketlauncher = false;\r\n  attackingGraveyard = false;\r\n  armyState: ArmyState;\r\n  graveYardTarget: { graveyard: boolean, x: number, y: number };\r\n  shotsLeft = 0;\r\n  shotTimer = 0;\r\n}\r\n\r\nenum ArmyState {\r\n  shooting, attacking, walking, running, standing\r\n}\r\n\r\nexport class Army {\r\n  private static instance: Army;\r\n  constructor() {\r\n    if (Army.instance)\r\n      return Army.instance;\r\n    Army.instance = this;\r\n  }\r\n  map: ZmMap;\r\n  zombies: Zombies;\r\n  humans: Humans;\r\n  gameModel: GameModel;\r\n  graveyard: Graveyard;\r\n  bullets: Bullets;\r\n  blasts: Blasts;\r\n  exclamations: Exclamations;\r\n  maxWalkSpeed = 20;\r\n  maxRunSpeed = 50;\r\n  armymen: ArmyMan[] = [];\r\n  discardedArmymen: ArmyMan[] = [];\r\n  textures = [];\r\n  aliveZombies: Creature[] = [];\r\n  armyPerLevel = 0.9;\r\n  attackSpeed = 2;\r\n  attackDamage = 20;\r\n  attackDistance = 25;\r\n  moveTargetDistance = 5;\r\n  shootDistance = 130;\r\n  visionDistance = 200;\r\n  scaling = 2;\r\n  shotsPerBurst = 3;\r\n  droneStrikeTimer = 0;\r\n  droneStrikeTime = 35;\r\n  assaultStarted = false;\r\n\r\n  isExtraArmy(): boolean {\r\n    return this.gameModel.level % 20 == 0;\r\n  }\r\n\r\n  getMaxArmy(): number {\r\n\r\n    const maxArmy = Math.min(Math.round(this.armyPerLevel * this.gameModel.level), 100);\r\n\r\n    if (this.gameModel.level < 11)\r\n      return 0;\r\n\r\n    if (this.isExtraArmy()) {\r\n      return Math.max(maxArmy * 2, 150);\r\n    }\r\n\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      return Math.max(maxArmy, 75);\r\n    }\r\n\r\n    return maxArmy;\r\n  }\r\n\r\n  getMaxHealth(): number {\r\n    return Math.round(this.humans.getMaxHealth(this.gameModel.level) * 1.2);\r\n  }\r\n\r\n  getAttackDamage(): void {\r\n    this.attackDamage = Math.round(this.getMaxHealth() / 10);\r\n  }\r\n\r\n  droneStrike = null;\r\n  droneActive = false;\r\n\r\n  populate(): void {\r\n    this.map = new ZmMap();\r\n    this.zombies = new Zombies();\r\n    this.humans = new Humans();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.graveyard = new Graveyard();\r\n    this.bullets = new Bullets();\r\n    this.assaultStarted = false;\r\n    this.blasts = new Blasts();\r\n    this.exclamations = new Exclamations();\r\n\r\n    if (this.textures.length == 0) {\r\n      for (let i = 0; i < 3; i++) {\r\n        const animated = [];\r\n        for (let j = 0; j < 3; j++) {\r\n          animated.push(PIXI.Texture.from('army' + (i + 1) + '_' + (j + 1) + '.png'));\r\n        }\r\n        this.textures.push({\r\n          animated: animated,\r\n          dead: [PIXI.Texture.from('army' + (i + 1) + '_dead.png')]\r\n        })\r\n      }\r\n    }\r\n\r\n    if (this.droneStrike && this.droneStrike.laser) {\r\n      foregroundContainer.removeChild(this.droneStrike.text)\r\n      foregroundContainer.removeChild(this.droneStrike.laser);\r\n    }\r\n\r\n    if (this.armymen.length > 0) {\r\n      for (let i = 0; i < this.armymen.length; i++) {\r\n        characterContainer.removeChild(this.armymen[i]);\r\n      }\r\n      this.discardedArmymen = this.armymen.slice();\r\n      this.armymen = [];\r\n    }\r\n\r\n    const maxArmy = this.getMaxArmy();\r\n    const maxHealth = this.getMaxHealth();\r\n    this.getAttackDamage();\r\n\r\n    this.droneStrike = false;\r\n    this.droneStrikeTimer = Math.random() * this.droneStrikeTime;\r\n    this.droneActive = this.gameModel.level >= 25;\r\n\r\n    for (let i = 0; i < maxArmy; i++) {\r\n      let armyman: ArmyMan;\r\n      let textureId = 0;\r\n      if (this.gameModel.level > 35 && Math.random() < 0.3) {\r\n        textureId = 1;\r\n      }\r\n      if ((this.gameModel.level > 45 && Math.random() < 0.3) || (this.gameModel.isBossStage(this.gameModel.level) && Math.random() < 0.5)) {\r\n        textureId = 2;\r\n      }\r\n      if (this.discardedArmymen.length > 0) {\r\n        armyman = this.discardedArmymen.pop();\r\n        armyman.alpha = 1;\r\n        armyman.textures = this.textures[textureId].animated;\r\n      } else {\r\n        armyman = new ArmyMan(this.textures[textureId].animated);\r\n      }\r\n      armyman.reset();\r\n      armyman.flags.dead = false;\r\n      armyman.flags.infected = false;\r\n      armyman.flags.burning = false;\r\n      armyman.burnDamage = 0;\r\n      armyman.plagueDamage = 0;\r\n      armyman.minigun = textureId == 1;\r\n      armyman.rocketlauncher = textureId == 2;\r\n      armyman.deadTexture = this.textures[textureId].dead;\r\n      armyman.animationSpeed = 0.2;\r\n      armyman.anchor.set(35 / 80, 1);\r\n      armyman.currentPoi = this.map.getRandomBuilding();\r\n      armyman.position.copyFrom(this.map.randomPositionInBuilding(armyman.currentPoi));\r\n      armyman.zIndex = armyman.position.y;\r\n      armyman.xSpeed = 0;\r\n      armyman.ySpeed = 0;\r\n      armyman.speedMod = 1;\r\n      armyman.lastKnownBuilding = null;\r\n      armyman.maxSpeed = this.maxWalkSpeed;\r\n      armyman.visionDistance = this.visionDistance;\r\n      armyman.visible = true;\r\n      armyman.maxHealth = armyman.health = maxHealth;\r\n      armyman.timer.attack = this.attackSpeed;\r\n      armyman.timer.plagueTick = Math.random() * this.humans.plagueTickTimer;\r\n      armyman.timer.scan = Math.random() * this.humans.scanTime;\r\n      armyman.timer.standing = Math.random() * this.humans.randomSecondsToStand();\r\n      armyman.target = false;\r\n      armyman.zombieTarget = null;\r\n      armyman.graveYardTarget = null;\r\n      armyman.armyState = ArmyState.standing;\r\n      armyman.attackingGraveyard = false;\r\n      armyman.scale.set(Math.random() > 0.5 ? this.scaling : -1 * this.scaling, this.scaling);\r\n      this.armymen.push(armyman);\r\n      characterContainer.addChild(armyman);\r\n    }\r\n\r\n    if (this.isExtraArmy()) {\r\n      this.gameModel.sendMessage(\"Warning: High Military Activity!\");\r\n    }\r\n  }\r\n\r\n  update(timeDiff: number, aliveZombies: Creature[]): void {\r\n    let count = 0;\r\n    this.aliveZombies = aliveZombies;\r\n    if (this.droneActive) {\r\n      this.droneStrikeTimer -= timeDiff;\r\n    }\r\n    for (let i = 0; i < this.armymen.length; i++) {\r\n      this.updateArmy(this.armymen[i], timeDiff, aliveZombies);\r\n      if (!this.armymen[i].flags.dead) {\r\n        this.humans.aliveHumans.push(this.armymen[i]);\r\n        if (this.armymen[i].attackingGraveyard) {\r\n          this.humans.graveyardAttackers.push(this.armymen[i]);\r\n        }\r\n        count++;\r\n      }\r\n    }\r\n    this.gameModel.stats.army.count = count;\r\n    this.updateDroneStrike(timeDiff, aliveZombies);\r\n  }\r\n\r\n  decideStateOnZombieDistance(armyman: ArmyMan): void {\r\n    if (armyman.graveYardTarget || (armyman.zombieTarget && !armyman.zombieTarget.flags.dead)) {\r\n      armyman.target = armyman.graveYardTarget ?? armyman.zombieTarget;\r\n      const distanceToTarget = fastDistance(armyman.position.x, armyman.position.y, armyman.target.x, armyman.target.y);\r\n\r\n      if (distanceToTarget > this.shootDistance && !armyman.rocketlauncher) {\r\n        this.changeState(armyman, ArmyState.running);\r\n        return;\r\n      }\r\n\r\n      if (distanceToTarget > this.shootDistance * 1.2 && armyman.rocketlauncher) {\r\n        this.changeState(armyman, ArmyState.running);\r\n        return;\r\n      }\r\n\r\n      if (distanceToTarget < this.attackDistance && !armyman.graveYardTarget) {\r\n        this.changeState(armyman, ArmyState.attacking);\r\n        return;\r\n      }\r\n      this.changeState(armyman, ArmyState.shooting);\r\n    }\r\n  }\r\n\r\n  changeState(armyman: ArmyMan, state: ArmyState): void {\r\n    switch (state) {\r\n      case ArmyState.standing:\r\n        armyman.gotoAndStop(0);\r\n        break;\r\n      case ArmyState.walking:\r\n        armyman.play();\r\n        armyman.maxSpeed = this.maxWalkSpeed;\r\n        break;\r\n      case ArmyState.running:\r\n        armyman.play();\r\n        armyman.maxSpeed = this.maxRunSpeed;\r\n        break;\r\n      case ArmyState.shooting:\r\n        armyman.gotoAndStop(0);\r\n        break;\r\n      case ArmyState.attacking:\r\n        armyman.play();\r\n        break;\r\n    }\r\n    armyman.armyState = state;\r\n  }\r\n\r\n  updateArmy(armyman: ArmyMan, timeDiff: number, aliveZombies: Creature[]): void {\r\n\r\n    if (armyman.flags.dead)\r\n      return this.humans.updateDeadHumanFading(armyman, timeDiff);\r\n\r\n    armyman.timer.attack -= timeDiff;\r\n    armyman.timer.scan -= timeDiff;\r\n\r\n    if (armyman.flags.infected) this.humans.updatePlague(armyman, timeDiff);\r\n    if (armyman.flags.burning) this.humans.updateBurns(armyman, timeDiff);\r\n\r\n    if (!armyman.graveYardTarget && (!armyman.zombieTarget || armyman.zombieTarget.flags.dead) && armyman.timer.scan < 0) {\r\n      const zombies = this.humans.scanForZombies(armyman, aliveZombies);\r\n      if (zombies > 3 && this.droneActive && this.droneStrikeTimer < 0) {\r\n        this.callDroneStrike(armyman, aliveZombies);\r\n      }\r\n      if (this.assaultStarted && armyman.rocketlauncher && Math.random() > 0.98) {\r\n        armyman.graveYardTarget = this.graveyard.target;\r\n        armyman.attackingGraveyard = true;\r\n      }\r\n    }\r\n\r\n    this.decideStateOnZombieDistance(armyman);\r\n\r\n    switch (armyman.armyState) {\r\n\r\n      case ArmyState.standing:\r\n        armyman.timer.standing -= timeDiff;\r\n        if (armyman.timer.standing < 0) {\r\n          this.humans.assignRandomTarget(armyman);\r\n          this.changeState(armyman, ArmyState.walking);\r\n        }\r\n\r\n        break;\r\n      case ArmyState.walking:\r\n\r\n        if (fastDistance(armyman.position.x, armyman.position.y, armyman.target.x, armyman.target.y) < this.moveTargetDistance) {\r\n          armyman.target = null;\r\n          armyman.zombieTarget = null;\r\n          armyman.timer.standing = this.humans.randomSecondsToStand();\r\n          this.changeState(armyman, ArmyState.standing);\r\n        } else {\r\n          this.humans.updateHumanSpeed(armyman, timeDiff);\r\n        }\r\n\r\n        break;\r\n      case ArmyState.running:\r\n        if (armyman.graveYardTarget || (armyman.zombieTarget && !armyman.zombieTarget.flags.dead)) {\r\n          armyman.target = armyman.graveYardTarget ?? armyman.zombieTarget;\r\n          this.humans.updateHumanSpeed(armyman, timeDiff);\r\n        } else {\r\n          this.changeState(armyman, ArmyState.standing);\r\n        }\r\n        break;\r\n      case ArmyState.attacking:\r\n        if (armyman.zombieTarget && !armyman.zombieTarget.flags.dead) {\r\n          armyman.scale.x = armyman.zombieTarget.x > armyman.x ? this.scaling : -this.scaling;\r\n          if (armyman.timer.attack < 0) {\r\n            this.zombies.damageZombie(armyman.zombieTarget, this.attackDamage, armyman);\r\n            armyman.timer.attack = this.attackSpeed;\r\n          }\r\n        } else {\r\n          this.changeState(armyman, ArmyState.standing);\r\n        }\r\n\r\n        break;\r\n      case ArmyState.shooting:\r\n        if (armyman.graveYardTarget || (armyman.zombieTarget && !armyman.zombieTarget.flags.dead)) {\r\n          armyman.target = armyman.graveYardTarget ?? armyman.zombieTarget;\r\n          armyman.scale.x = armyman.target.x > armyman.x ? this.scaling : -this.scaling;\r\n          if (armyman.timer.attack < 0) {\r\n            armyman.shotsLeft = this.shotsPerBurst;\r\n            if (armyman.minigun) {\r\n              armyman.shotsLeft = this.shotsPerBurst * 3;\r\n            }\r\n            if (armyman.rocketlauncher) {\r\n              armyman.shotsLeft = 1;\r\n            }\r\n            armyman.timer.attack = armyman.rocketlauncher ? this.attackSpeed * 1.5 : this.attackSpeed;\r\n            armyman.shotTimer = 0;\r\n          }\r\n          if (armyman.shotsLeft > 0) {\r\n            armyman.shotTimer -= timeDiff;\r\n            if (armyman.shotTimer < 0) {\r\n              armyman.shotTimer = 0.15;\r\n              if (armyman.minigun) {\r\n                armyman.shotTimer = 0.08;\r\n              }\r\n              this.bullets.newBullet(armyman, armyman.target, \r\n                  armyman.rocketlauncher ? this.attackDamage * 1.2 : armyman.minigun ? this.attackDamage / 2 : this.attackDamage, \r\n                  false, armyman.rocketlauncher);\r\n              armyman.shotsLeft--;\r\n            }\r\n          }\r\n        } else {\r\n          this.changeState(armyman, ArmyState.standing);\r\n        }\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  droneBlastRadius = 35;\r\n\r\n  callDroneStrike(armyman: ArmyMan, aliveZombies: Creature[]): void {\r\n\r\n    let zombiesInArea = 0;\r\n    for (let i = 0; i < aliveZombies.length; i++) {\r\n      if (aliveZombies[i].x > armyman.zombieTarget.x - this.droneBlastRadius && aliveZombies[i].x < armyman.zombieTarget.x + this.droneBlastRadius) {\r\n        if (aliveZombies[i].y > armyman.zombieTarget.y - this.droneBlastRadius && aliveZombies[i].y < armyman.zombieTarget.y + this.droneBlastRadius) {\r\n          zombiesInArea++;\r\n        }\r\n      }\r\n    }\r\n    let humansInArea = 0;\r\n    const aliveHumans = this.humans.aliveHumans;\r\n    for (let i = 0; i < aliveHumans.length; i++) {\r\n      if (aliveHumans[i].x > armyman.zombieTarget.x - this.droneBlastRadius && aliveHumans[i].x < armyman.zombieTarget.x + this.droneBlastRadius) {\r\n        if (aliveHumans[i].y > armyman.zombieTarget.y - this.droneBlastRadius && aliveHumans[i].y < armyman.zombieTarget.y + this.droneBlastRadius) {\r\n          humansInArea++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (zombiesInArea > 1 && humansInArea == 0) {\r\n      this.exclamations.newRadio(armyman);\r\n      this.droneStrikeTimer = this.droneStrikeTime;\r\n      this.droneStrike = {\r\n        caller: armyman,\r\n        target: armyman.zombieTarget,\r\n        timer: 3,\r\n        bombsLeft: 3\r\n      }\r\n    }\r\n  }\r\n\r\n  droneBomb(aliveZombies: Creature[]): void {\r\n    const variance = 32;\r\n    this.droneExplosion(this.droneStrike.target.x + ((Math.random() - 1) * variance), this.droneStrike.target.y + ((Math.random() - 1) * variance), aliveZombies, this.attackDamage * 3);\r\n    this.droneStrike.timer = 0.3;\r\n    this.droneStrike.bombsLeft--;\r\n  }\r\n\r\n  droneExplosion(x: number, y: number, aliveZombies: Creature[], damage: number): void {\r\n    if (!aliveZombies) {\r\n      aliveZombies = this.aliveZombies;\r\n    }\r\n    this.blasts.newDroneBlast(x, y);\r\n    for (let i = 0; i < aliveZombies.length; i++) {\r\n      if (aliveZombies[i].x > x - this.droneBlastRadius && aliveZombies[i].x < x + this.droneBlastRadius) {\r\n        if (aliveZombies[i].y > y - this.droneBlastRadius && aliveZombies[i].y < y + this.droneBlastRadius) {\r\n          this.zombies.damageZombie(aliveZombies[i], damage, null);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  updateDroneStrike(timeDiff: number, aliveZombies: Creature[]): void {\r\n    if (this.droneStrike) {\r\n\r\n      this.droneStrike.timer -= timeDiff;\r\n\r\n      if (!this.droneStrike.startedBombing) {\r\n        if (!this.droneStrike.text) {\r\n          this.droneStrike.text = new PIXI.Text(\"3\", {\r\n            fontFamily: 'sans-serif',\r\n            fontSize: 40,\r\n            fill: \"#F00\",\r\n            stroke: \"#000\",\r\n            strokeThickness: 0,\r\n            align: 'center'\r\n          });\r\n          this.droneStrike.text.anchor = { x: 0.5, y: 1 };\r\n          this.droneStrike.text.scale.x = 0.5;\r\n          this.droneStrike.text.scale.y = 0.5;\r\n          foregroundContainer.addChild(this.droneStrike.text)\r\n\r\n          this.droneStrike.laser = new PIXI.Graphics();\r\n          foregroundContainer.addChild(this.droneStrike.laser);\r\n        }\r\n        this.droneStrike.text.text = Math.ceil(this.droneStrike.timer);\r\n        this.droneStrike.text.x = this.droneStrike.target.x;\r\n        this.droneStrike.text.y = this.droneStrike.target.y - 30;\r\n\r\n        this.droneStrike.laser.clear();\r\n        this.droneStrike.laser.lineStyle(1, 0xFF0000);\r\n        this.droneStrike.laser.moveTo(this.droneStrike.caller.x, this.droneStrike.caller.y - 10);\r\n        this.droneStrike.laser.lineTo(this.droneStrike.target.x, this.droneStrike.target.y - 10);\r\n      }\r\n\r\n      if ((this.droneStrike.caller.dead || this.droneStrike.target.dead) && !this.droneStrike.startedBombing) {\r\n        foregroundContainer.removeChild(this.droneStrike.text)\r\n        foregroundContainer.removeChild(this.droneStrike.laser);\r\n        this.droneStrike = false;\r\n        this.droneStrikeTimer = 0;\r\n        return;\r\n      }\r\n\r\n      if (this.droneStrike.timer < 0) {\r\n\r\n        if (!this.droneStrike.startedBombing) {\r\n          foregroundContainer.removeChild(this.droneStrike.text)\r\n          foregroundContainer.removeChild(this.droneStrike.laser);\r\n          this.droneStrike.startedBombing = true;\r\n        }\r\n\r\n        this.droneBomb(aliveZombies);\r\n\r\n        if (this.droneStrike.bombsLeft <= 0) {\r\n          this.droneStrike = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Tank extends Human {\r\n  turretSprite: PIXI.Sprite;\r\n  tankState: TankState;\r\n  currentDirection: TankDirection;\r\n  attackingGraveyard = false;\r\n  graveYardTarget: { graveyard: boolean, x: number, y: number };\r\n}\r\n\r\nenum TankState {\r\n  shooting, attacking, patrolling\r\n}\r\n\r\nenum TankDirection {\r\n  horizontal, vertical\r\n}\r\n\r\n\r\nexport class Tanks {\r\n  private static instance: Tanks;\r\n  constructor() {\r\n    if (Tanks.instance)\r\n      return Tanks.instance;\r\n    Tanks.instance = this;\r\n  }\r\n  map: ZmMap;\r\n  gameModel: GameModel;\r\n  zombies: Zombies;\r\n  humans: Humans;\r\n  army: Army;\r\n  graveyard: Graveyard;\r\n  bullets: Bullets;\r\n  speed = 20;\r\n  tanks: Tank[] = [];\r\n  aliveTanks: Tank[] = [];\r\n  textures: { vertical: PIXI.Texture[], horizontal: PIXI.Texture[], turret: PIXI.Texture };\r\n  attackDamage = 0;\r\n  attackSpeed = 5;\r\n  scaling = 3;\r\n  moveTargetDistance = 20;\r\n  shootDistance = 250;\r\n\r\n  getMaxTanks(): number {\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      return Math.min(Math.round(this.gameModel.level / 30), 20);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getMaxHealth(): number {\r\n    return Math.round(this.humans.getMaxHealth(this.gameModel.level) * 10);\r\n  }\r\n\r\n  getAttackDamage(): void {\r\n    this.attackDamage = Math.round(this.getMaxHealth() / 10);\r\n  }\r\n\r\n  populate(): void {\r\n    this.map = new ZmMap();\r\n    this.gameModel = GameModel.getInstance();\r\n    this.zombies = new Zombies();\r\n    this.humans = new Humans();\r\n    this.army = new Army();\r\n    this.graveyard = new Graveyard();\r\n    this.bullets = new Bullets();\r\n    if (!this.textures) {\r\n      this.textures = {\r\n        vertical: [],\r\n        horizontal: [],\r\n        turret: null\r\n      }\r\n      for (let i = 0; i < 2; i++) {\r\n        this.textures.horizontal.push(PIXI.Texture.from('tank' + i + '.png'));\r\n      }\r\n      for (let i = 2; i < 4; i++) {\r\n        this.textures.vertical.push(PIXI.Texture.from('tank' + i + '.png'));\r\n      }\r\n      this.textures.turret = PIXI.Texture.from(\"tank4.png\");\r\n    }\r\n\r\n    if (this.tanks.length > 0) {\r\n      for (let i = 0; i < this.tanks.length; i++) {\r\n        characterContainer.removeChild(this.tanks[i]);\r\n      }\r\n      this.tanks = [];\r\n      this.aliveTanks = [];\r\n    }\r\n\r\n    const maxTanks = this.getMaxTanks();\r\n    const maxHealth = this.getMaxHealth();\r\n    this.getAttackDamage();\r\n\r\n    for (let i = 0; i < maxTanks; i++) {\r\n      const tank = new Tank(this.textures.horizontal);\r\n\r\n      tank.flags.tank = true;\r\n      tank.turretSprite = new PIXI.Sprite(this.textures.turret);\r\n\r\n      tank.addChild(tank.turretSprite);\r\n\r\n      tank.animationSpeed = 0.2;\r\n      tank.anchor.set(0.5, 1);\r\n      tank.turretSprite.anchor.set(7.5 / 16, 7.5 / 16);\r\n      tank.x = 0;\r\n      tank.y = 0;\r\n      tank.play();\r\n      tank.turretSprite.x = 0;\r\n      tank.turretSprite.y = -7;\r\n\r\n      tank.currentDirection = TankDirection.horizontal;\r\n\r\n      tank.currentPoi = this.map.getRandomBuilding();\r\n      tank.position.copyFrom(this.map.randomPositionInBuilding(tank.currentPoi));\r\n      tank.zIndex = tank.position.y;\r\n      tank.xSpeed = 0;\r\n      tank.ySpeed = 0;\r\n      tank.speedMod = 1;\r\n      tank.flags.dead = false;\r\n      tank.flags.infected = false;\r\n      tank.flags.burning = false;\r\n      tank.burnDamage = 0;\r\n      tank.lastKnownBuilding = null;\r\n      tank.plagueDamage = 0;\r\n      tank.timer.plagueTick = Math.random() * this.humans.plagueTickTimer;\r\n      tank.maxSpeed = this.speed;\r\n      tank.visionDistance = 250;\r\n      tank.visible = true;\r\n      tank.maxHealth = tank.health = maxHealth;\r\n      tank.timer.scan = Math.random() * this.humans.scanTime;\r\n      tank.target = false;\r\n      tank.zombieTarget = null;\r\n      tank.graveYardTarget = null;\r\n      tank.attackingGraveyard = false;\r\n      tank.tankState = TankState.patrolling;\r\n      tank.timer.attack = this.attackSpeed;\r\n      tank.scale.set(this.scaling, this.scaling);\r\n      this.tanks.push(tank);\r\n      characterContainer.addChild(tank);\r\n    }\r\n  }\r\n\r\n  aliveZombies = null;\r\n\r\n  update(timeDiff: number, aliveZombies: Creature[]): void {\r\n    this.aliveZombies = aliveZombies;\r\n    this.aliveTanks = [];\r\n    for (let i = 0; i < this.tanks.length; i++) {\r\n      this.updateTank(this.tanks[i], timeDiff, aliveZombies);\r\n      if (!this.tanks[i].flags.dead) {\r\n        this.humans.aliveHumans.push(this.tanks[i]);\r\n        this.aliveTanks.push(this.tanks[i]);\r\n        if (this.tanks[i].attackingGraveyard) {\r\n          this.humans.graveyardAttackers.push(this.tanks[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  updateTank(tank: Tank, timeDiff: number, aliveZombies: Creature[]): void {\r\n\r\n    if (tank.flags.dead)\r\n      return this.humans.updateDeadHumanFading(tank, timeDiff);\r\n\r\n    tank.timer.attack -= timeDiff;\r\n    tank.timer.scan -= timeDiff;\r\n\r\n    if (tank.flags.burning)\r\n      this.humans.updateBurns(tank, timeDiff);\r\n\r\n    if (!tank.attackingGraveyard && (!tank.zombieTarget || tank.zombieTarget.flags.dead) && tank.timer.scan < 0) {\r\n      this.humans.scanForZombies(tank, aliveZombies);\r\n      if (this.army.assaultStarted && Math.random() > 0.9) {\r\n        tank.graveYardTarget = this.graveyard.target;\r\n        tank.attackingGraveyard = true;\r\n      }\r\n    }\r\n\r\n    this.decideStateOnZombieDistance(tank);\r\n\r\n    switch (tank.tankState) {\r\n\r\n      case TankState.patrolling:\r\n\r\n        if (!tank.target) {\r\n          tank.target = this.map.randomPositionInBuilding(null);\r\n        }\r\n\r\n        if (fastDistance(tank.position.x, tank.position.y, tank.target.x, tank.target.y) < this.moveTargetDistance) {\r\n          tank.target = false;\r\n          tank.zombieTarget = null;\r\n        } else {\r\n          this.humans.updateHumanSpeed(tank, timeDiff);\r\n        }\r\n        break;\r\n      case TankState.attacking:\r\n        if (tank.attackingGraveyard) {\r\n          tank.target = tank.graveYardTarget;\r\n          this.humans.updateHumanSpeed(tank, timeDiff);\r\n        } else if (tank.zombieTarget && !tank.zombieTarget.flags.dead) {\r\n          this.humans.updateHumanSpeed(tank, timeDiff);\r\n        } else {\r\n          this.changeState(tank, TankState.patrolling);\r\n        }\r\n        break;\r\n      case TankState.shooting:\r\n        if (tank.graveYardTarget || (tank.zombieTarget && !tank.zombieTarget.flags.dead)) {\r\n          if (tank.timer.attack < 0) {\r\n            tank.timer.attack = this.attackSpeed;\r\n            this.bullets.newBullet(tank, tank.graveYardTarget || tank.zombieTarget, this.attackDamage, false, true);\r\n          }\r\n        } else {\r\n          this.changeState(tank, TankState.patrolling);\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    this.updateTankSprites(tank, timeDiff);\r\n  }\r\n\r\n  updateTankSprites(tank: Tank, timeDiff: number): void {\r\n    if (Math.abs(tank.xSpeed) > Math.abs(tank.ySpeed)) {\r\n      if (tank.currentDirection != TankDirection.horizontal) {\r\n        tank.currentDirection = TankDirection.horizontal;\r\n        tank.textures = this.textures.horizontal;\r\n        tank.play();\r\n        tank.turretSprite.y = -7;\r\n      }\r\n    } else {\r\n      if (tank.currentDirection != TankDirection.vertical) {\r\n        tank.currentDirection = TankDirection.vertical;\r\n        tank.textures = this.textures.vertical;\r\n        tank.play();\r\n        tank.turretSprite.y = -8;\r\n      }\r\n    }\r\n    if (tank.graveYardTarget || tank.zombieTarget) {\r\n      tank.target = tank.graveYardTarget ?? tank.zombieTarget;\r\n      const targetAngle = Math.atan2(tank.target.x - tank.x, tank.y - tank.target.y) + (Math.PI / 2);\r\n      if (tank.turretSprite.rotation > targetAngle) {\r\n        tank.turretSprite.rotation -= timeDiff * 2;\r\n      } else {\r\n        tank.turretSprite.rotation += timeDiff * 2;\r\n      }\r\n    }\r\n  }\r\n\r\n  decideStateOnZombieDistance(tank: Tank): void {\r\n    if (tank.graveYardTarget || (tank.zombieTarget && !tank.zombieTarget.flags.dead)) {\r\n      tank.target = tank.graveYardTarget ?? tank.zombieTarget;\r\n      const distanceToTarget = fastDistance(tank.position.x, tank.position.y, tank.target.x, tank.target.y);\r\n\r\n      if (distanceToTarget > this.shootDistance) {\r\n        this.changeState(tank, TankState.attacking);\r\n        return;\r\n      }\r\n\r\n      this.changeState(tank, TankState.shooting);\r\n    }\r\n  }\r\n\r\n  changeState(tank: Tank, state: TankState): void {\r\n    switch (state) {\r\n      case TankState.patrolling:\r\n        tank.play();\r\n        break;\r\n      case TankState.attacking:\r\n        tank.play();\r\n        break;\r\n      case TankState.shooting:\r\n        tank.gotoAndStop(0);\r\n        break;\r\n    }\r\n    tank.tankState = state;\r\n  }\r\n\r\n}","export * from './utilsfunctions';\r\nexport * from './zombiemancer';\r\nexport * from './spells';\r\nexport * from './zmmap';\r\nexport * from './partfactory';\r\nexport * from './creaturefactory';\r\nexport * from './gamemodel';\r\nexport * from './upgrades';\r\nexport * from './trophies';\r\nexport * from './humans';\r\nexport * from './zombies';\r\nexport * from './skeleton';\r\nexport * from './creatures';\r\nexport * from './graveyard';\r\nexport * from './bloodparts';\r\nexport * from './angularzombie';","import { GameModel, getCostForUpgrades, getMaxUpgrades } from \"./internal\";\n\nexport class PartFactory {\n  private static instance : PartFactory;\n  constructor() {\n    if (PartFactory.instance)\n      return PartFactory.instance;\n    PartFactory.instance = this;\n  }\n  gameModel = GameModel.getInstance();\n  costs = {\n    blood : \"blood\",\n    parts : \"parts\"\n  };\n  generatorsApplied = [];\n\n  factoryStats() : {machines:number, partsPerSec:number} {\n    let machines = 0;\n    let partsPerSec = 0;\n    for (let i = 0; i < this.generatorsApplied.length; i++) {\n      machines += this.generatorsApplied[i].rank;\n      partsPerSec += this.generatorsApplied[i].total / this.generatorsApplied[i].time;\n    }\n    return {\n      machines:machines,\n      partsPerSec:partsPerSec * this.gameModel.partsPCMod\n    }\n  }\n\n  update(timeDiff : number) : void {\n    for (let i = 0; i < this.generatorsApplied.length; i++) {\n      this.generatorsApplied[i].timeLeft -= timeDiff;\n      if (this.generatorsApplied[i].timeLeft < 0) {\n        this.generatorsApplied[i].timeLeft = this.generatorsApplied[i].time;\n        this.gameModel.persistentData.parts += this.generatorsApplied[i].total * this.gameModel.partsPCMod;\n      }\n    }\n  }\n\n  updateLongTime(timeDiff : number) : number {\n    let partsCreated = 0;\n    for (let i = 0; i < this.generatorsApplied.length; i++) {\n      partsCreated += this.generatorsApplied[i].total * (timeDiff / this.generatorsApplied[i].time);\n    }\n    return partsCreated * this.gameModel.partsPCMod;\n  }\n\n  currentRank(generator : Generator) : number {\n    for (let i = 0; i < this.gameModel.persistentData.generators.length; i++) {\n      const owned = this.gameModel.persistentData.generators[i];\n      if (generator.id == owned.id) {\n        return owned.rank;\n      }\n    }\n    return 0;\n  }\n\n  purchasePrice(generator : Generator) : number {\n    return Math.round(generator.basePrice * Math.pow(generator.multi, this.currentRank(generator)));\n  }\n\n  upgradeMaxAffordable(upgrade : Generator) : number {\n    const currentRank = this.currentRank(upgrade);\n    let maxAffordable = 0;\n    switch(upgrade.costType) {\n      case this.costs.blood:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multi, currentRank, this.gameModel.persistentData.blood);\n        break;\n      case this.costs.parts:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multi, currentRank, this.gameModel.persistentData.parts);\n        break;\n    }\n    if (upgrade.cap != 0) {\n      return Math.min(maxAffordable, upgrade.cap - currentRank);\n    }\n    return maxAffordable;\n  }\n\n  upgradeMaxPrice(upgrade : Generator, number : number) : number {\n    return getCostForUpgrades(upgrade.basePrice, upgrade.multi, this.currentRank(upgrade), number);\n  }\n\n  canAffordGenerator(generator : Generator) : boolean {\n    switch(generator.costType) {\n      case this.costs.blood:\n        return this.gameModel.persistentData.blood >= this.purchasePrice(generator);\n      case this.costs.parts:\n        return this.gameModel.persistentData.parts >= this.purchasePrice(generator);\n    }\n    return false;\n  }\n\n  purchaseMaxGenerators(generator : Generator) : void {\n    const amount = this.upgradeMaxAffordable(generator);\n    for (let i = 0; i < amount; i++) {\n      this.purchaseGenerator(generator, false);\n    }\n    this.gameModel.saveData();\n  }\n\n  purchaseGenerator(generator : Generator, save = true) : void {\n    if (this.canAffordGenerator(generator)) {\n      switch(generator.costType) {\n        case this.costs.blood:\n          this.gameModel.persistentData.blood -= this.purchasePrice(generator);\n          break;\n        case this.costs.parts:\n          this.gameModel.persistentData.parts -= this.purchasePrice(generator);\n          break;\n      }\n      let owned;\n      for (let i = 0; i < this.gameModel.persistentData.generators.length; i++) {\n        if (generator.id == this.gameModel.persistentData.generators[i].id) {\n          owned = this.gameModel.persistentData.generators[i];\n          owned.rank++;\n        }\n      }\n      if (!owned)\n      this.gameModel.persistentData.generators.push({\n          id:generator.id,\n          rank:1,\n        });\n      if (save) {\n        this.gameModel.saveData();\n      }\n      this.applyGenerators();\n    }\n  }\n\n  applyGenerator(generator : Generator, rank : number) : void {\n    let owned = false;\n    for (let i = 0; i < this.generatorsApplied.length; i++) {\n      if (this.generatorsApplied[i].id == generator.id) {\n        owned = true;\n        this.generatorsApplied[i].rank = rank;\n        this.generatorsApplied[i].total = this.generatorsApplied[i].produces * this.generatorsApplied[i].rank;\n      }\n    }\n    if (!owned) {\n      this.generatorsApplied.push({\n        id:generator.id,\n        produces:generator.produces,\n        total: generator.produces * rank,\n        rank:rank,\n        time:generator.time,\n        timeLeft:generator.time\n      });\n    }\n  }\n\n  applyGenerators() : void {\n    for (let i = 0; i < this.generators.length; i++) {\n      const currRank = this.currentRank(this.generators[i]);\n      if (currRank > 0) {\n        this.applyGenerator(this.generators[i], currRank);\n      }\n    }\n  }\n\n  generators = [\n    new Generator(1, \"Simple Machine\", this.costs.blood, 1000000, 1.08, 1, 2, \"A simple device that produces 1 part every 2 seconds\"),\n    new Generator(2, \"Part Duplicator\", this.costs.parts, 100, 1.09, 4, 3, \"A more advanced device that produces 4 parts every 3 seconds\"),\n    new Generator(3, \"Stamp Press\", this.costs.parts, 1000, 1.1, 16, 5, \"An industrial press that produces 16 parts every 5 seconds\"),\n    new Generator(4, \"Conveyor\", this.costs.parts, 10000, 1.11, 64, 8, \"A fantastic new invention that produces 64 parts every 8 seconds\"),\n    new Generator(5, \"Splitter Combiner\", this.costs.parts, 100000, 1.12, 192, 10, \"A wondrous machine that produces 192 parts every 10 seconds\"),\n    new Generator(6, \"Batch Converter\", this.costs.parts, 500000, 1.13, 512, 12, \"An astounding contraption that produces 512 parts every 12 seconds\"),\n  ];\n  \n}\n\nclass Generator {\n  id : number;\n  name : string;\n  costType : string;\n  basePrice : number;\n  multi : number;\n  produces : number;\n  time : number;\n  description : string;\n  cap : number;\n  auto : boolean;\n  constructor(id, name, costType, basePrice, multi, produces, time, description) {\n    this.id = id;\n    this.name = name;\n    this.costType = costType;\n    this.basePrice = basePrice;\n    this.multi = multi;\n    this.produces = produces;\n    this.time = time;\n    this.description = description;\n    this.cap = 0;\n  }\n}\n","import { Creature, CreatureState } from './classes/creatureclasses';\r\nimport { CharacterFlags } from './classes/gameobject';\r\nimport { characterContainer, GameModel, Graveyard, ZmMap, Spells, PrestigePoints, Smoke, Zombies, Upgrades, Blood,\r\n  Humans, fastDistance, magnitude, getRandomElementFromArray, formatWhole, Bones, Blasts, Exclamations} from './internal';\r\n\r\nclass SkeletonCharacter extends Creature {\r\n\r\n}\r\n\r\nexport class Skeleton {\r\n  private static instance : Skeleton;\r\n  constructor() {\r\n    if (Skeleton.instance)\r\n      return Skeleton.instance;\r\n    Skeleton.instance = this;\r\n  }\r\n  map : ZmMap;\r\n  model : GameModel;\r\n  graveyard : Graveyard;\r\n  spells : Spells;\r\n  smoke : Smoke;\r\n  upgrades : Upgrades;\r\n  humans : Humans;\r\n  zombies : Zombies;\r\n  prestigePoints : PrestigePoints;\r\n  exclamations : Exclamations;\r\n  bones : Bones;\r\n  blasts : Blasts;\r\n  blood : Blood;\r\n  skeletons : SkeletonCharacter[] = [];\r\n  aliveSkeletons : SkeletonCharacter[] = [];\r\n  discardedSprites : SkeletonCharacter[] = [];\r\n  aliveHumans = [];\r\n  scaling = 1;\r\n  moveTargetDistance = 15;\r\n  attackDistance = 25;\r\n  attackSpeed = 3;\r\n  targetDistance = 100;\r\n  fadeSpeed = 0.1;\r\n  currId = 1;\r\n  scanTime = 3;\r\n  spawnTimer = 0;\r\n  respawnTime = 10;\r\n  moveSpeed = 40;\r\n  lastKillingBlow = 0;\r\n  randomSpells = [];\r\n  lootChance = 0.001;\r\n  textures = {\r\n    set:false,\r\n    up : [] as PIXI.Texture[],\r\n    down : [] as PIXI.Texture[],\r\n    left : [] as PIXI.Texture[],\r\n    right : [] as PIXI.Texture[],\r\n    dead : [] as PIXI.Texture[]\r\n  };\r\n  directions = {\r\n    down:1,\r\n    up:2,\r\n    right:3,\r\n    left:4,\r\n    dead:5\r\n  };\r\n  burnTickTimer = 5;\r\n  smokeTimer = 0.3;\r\n  fastDistance = fastDistance;\r\n  magnitude = magnitude;\r\n  damageZombie= null;\r\n  searchClosestTarget = null;\r\n  updateBurns = null;\r\n  updateZombieRegen = null;\r\n  causePlagueExplosion = null;\r\n  inflictPlague = null;\r\n  healZombie = null;\r\n\r\n  storageName = \"incremancerskele\";\r\n  persistent = {\r\n    xpRate : 0,\r\n    skeletons : 0,\r\n    level : 1,\r\n    xp : 0,\r\n    items : [] as Loot[],\r\n    currItemId : 0\r\n  };\r\n\r\n  xpForNextLevel() : number {\r\n    return 1000 * Math.pow(this.persistent.level, 2);\r\n  }\r\n\r\n  addXp(xp : number) : void {\r\n    if (this.isAlive()) {\r\n      this.persistent.xp += xp * this.persistent.xpRate;\r\n      if (this.persistent.xp > this.xpForNextLevel()) {\r\n        this.persistent.xp -= this.xpForNextLevel();\r\n        this.persistent.level++;\r\n        this.upgrades.applyUpgrades();\r\n        this.model.sendMessage(\"Skeleton Champion reached level \" + this.persistent.level + \"!\");\r\n        const skeletonElement = document.getElementById(\"skeleton\");\r\n        if (skeletonElement) {\r\n          skeletonElement.classList.toggle(\"levelup\");\r\n          setTimeout(function() {\r\n            skeletonElement.classList.toggle(\"levelup\");\r\n          }, 3000);\r\n        }        \r\n      }\r\n    }\r\n  }\r\n\r\n  isAlive() : boolean {\r\n    for (let i = 0; i < this.skeletons.length; i++) {\r\n      if (!this.skeletons[i].flags.dead) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  applyUpgrades() : void {\r\n    if (this.persistent.skeletons > 0) {\r\n      this.applyItemUpgrades();\r\n      const multiplier = 1 + (this.persistent.level / 100);\r\n      this.model.bloodPCMod *= multiplier;\r\n      this.model.brainsPCMod *= multiplier;\r\n      this.model.bonesPCMod *= multiplier;\r\n      this.model.partsPCMod *= multiplier;\r\n      this.model.zombieDamagePCMod *= multiplier;\r\n      this.model.zombieHealthPCMod *= multiplier;\r\n    }\r\n  }\r\n\r\n  acceptOffer() : void {\r\n    this.model.persistentData.trophies = [];\r\n    \r\n    if (this.persistent.skeletons < 1) {\r\n      this.persistent.skeletons = 1;\r\n      this.persistent.xpRate = 1;\r\n      this.model.sendMessage(\"Skeleton Champion joins the fight!\");\r\n    } else {\r\n      this.persistent.xpRate *= 2;\r\n    }\r\n    this.upgrades.applyUpgrades();\r\n    this.model.saveData();\r\n  }\r\n  \r\n  populate() : void {\r\n    this.model = GameModel.getInstance();\r\n    this.map = new ZmMap();\r\n    this.graveyard = new Graveyard();\r\n    this.exclamations = new Exclamations();\r\n    this.spells = new Spells();\r\n    this.smoke = new Smoke();\r\n    this.upgrades = new Upgrades();\r\n    this.humans = new Humans();\r\n    this.zombies = new Zombies();\r\n    this.prestigePoints = new PrestigePoints();\r\n    this.bones = new Bones();\r\n    this.blasts = new Blasts();\r\n    this.blood = new Blood();\r\n    this.damageZombie= this.zombies.damageZombie;\r\n    this.searchClosestTarget = this.zombies.searchClosestTarget;\r\n    this.updateBurns = this.zombies.updateBurns;\r\n    this.updateZombieRegen = this.zombies.updateZombieRegen;\r\n    this.causePlagueExplosion = this.zombies.causePlagueExplosion;\r\n    this.inflictPlague = this.zombies.inflictPlague;\r\n    this.healZombie = this.zombies.healZombie;\r\n    if (!this.textures.set) {\r\n      this.textures.down = [];\r\n      this.textures.up = [];\r\n      this.textures.right = [];\r\n      this.textures.dead = [];\r\n      for (let i=0; i < 3; i++) {\r\n        this.textures.down.push(PIXI.Texture.from('skeleton' + i + '.png'));\r\n      }\r\n      for (let i=3; i < 6; i++) {\r\n        this.textures.up.push(PIXI.Texture.from('skeleton' + i + '.png'));\r\n      }\r\n      for (let i=6; i < 9; i++) {\r\n        this.textures.right.push(PIXI.Texture.from('skeleton' + i + '.png'));\r\n      }\r\n      this.textures.dead.push(PIXI.Texture.from('skeleton9.png'));\r\n      this.textures.set = true;\r\n    }\r\n\r\n    // reset creature position at start of level\r\n    const skeletons = [];\r\n    for (let i = 0; i < this.skeletons.length; i++) {\r\n      if (!this.skeletons[i].flags.dead) {\r\n        skeletons.push(this.skeletons[i]);\r\n        this.skeletons[i].x = this.graveyard.sprite.x;\r\n        this.skeletons[i].zIndex = this.skeletons[i].y = this.graveyard.sprite.y + (this.graveyard.level > 2 ? 8 : 0);\r\n        this.skeletons[i].target = null;\r\n        this.skeletons[i].state = CreatureState.lookingForTarget;\r\n      } else {\r\n        this.discardedSprites.push(this.skeletons[i]);\r\n        characterContainer.removeChild(this.skeletons[i]);\r\n      }\r\n    }\r\n    this.skeletons = skeletons;\r\n    this.aliveSkeletons = [];\r\n\r\n    this.lootChance = 0.001;\r\n    if (this.model.level < this.persistent.level)\r\n      this.lootChance *= 0.5;\r\n    if (this.model.level > this.persistent.level * 2)\r\n      this.lootChance *= 1.5;\r\n  }\r\n\r\n  spawnCreature() : void {\r\n    let creature : SkeletonCharacter;\r\n    if (this.discardedSprites.length > 0) {\r\n      creature = this.discardedSprites.pop();\r\n      creature.textures = this.textures.down;\r\n    } else {\r\n      creature = new SkeletonCharacter(this.textures.down);\r\n    }\r\n    creature.tint = 0xEEEEEE;\r\n    creature.immuneToBurns = false;\r\n    creature.bulletReflect = 0;\r\n    creature.zombie = true;\r\n    creature.textureSet = this.textures;\r\n    creature.deadTexture = this.textures.dead;\r\n    creature.currentDirection = this.directions.down;\r\n    creature.flags = new CharacterFlags();\r\n    creature.burnDamage = 0;\r\n    creature.lastKnownBuilding = false;\r\n    creature.alpha = 1;\r\n    creature.animationSpeed = 0.15;\r\n    creature.anchor.set(8.5/16, 1);\r\n    creature.position.set(this.graveyard.sprite.x, this.graveyard.sprite.y + (this.graveyard.level > 2 ? 8 : 0));\r\n    creature.target = null;\r\n    creature.zIndex = creature.position.y;\r\n    creature.visible = true;\r\n    creature.maxHealth = creature.health = (this.model.zombieHealth * 10);\r\n    creature.attackDamage = this.model.zombieDamage * 10;\r\n    creature.regenTimer = 5;\r\n    creature.state = CreatureState.lookingForTarget;\r\n    creature.scaling = this.scaling;\r\n    creature.scale.set(creature.scaling, creature.scaling);\r\n    creature.timer.ability = Math.random() * 4;\r\n    creature.timer.attack = 0;\r\n    creature.timer.scan = 0;\r\n    creature.timer.burnTick = this.burnTickTimer;\r\n    creature.timer.smoke = this.smokeTimer;\r\n    creature.xSpeed = 0;\r\n    creature.ySpeed = 0;\r\n    creature.speedMultiplier = 1;\r\n    creature.maxSpeed = this.moveSpeed;\r\n    creature.play();\r\n    creature.zombieId = this.currId++;\r\n    this.skeletons.push(creature);\r\n    characterContainer.addChild(creature);\r\n    this.smoke.newZombieSpawnCloud(creature.x, creature.y - 2);\r\n  }\r\n\r\n  skeletonTimer() : number {\r\n    if (this.aliveSkeletons.length < this.persistent.skeletons) {\r\n      return this.spawnTimer;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  aliveZombies : Creature[] = [];\r\n  graveyardAttackers = [];\r\n\r\n  update(timeDiff : number) : void {\r\n    this.aliveHumans = this.humans.aliveHumans;\r\n    this.graveyardAttackers = this.humans.graveyardAttackers;\r\n    this.aliveZombies = this.zombies.aliveZombies;\r\n\r\n    this.aliveSkeletons = [];\r\n\r\n    for (let i=0; i < this.skeletons.length; i++) {\r\n      if (this.skeletons[i].visible) {\r\n        this.updateCreature(this.skeletons[i], timeDiff);\r\n        if (!this.skeletons[i].flags.dead) {\r\n          this.aliveZombies.push(this.skeletons[i]);\r\n          this.aliveSkeletons.push(this.skeletons[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.aliveSkeletons.length < this.persistent.skeletons) {\r\n      this.spawnTimer -= timeDiff;\r\n      if (this.spawnTimer < 0) {\r\n        this.spawnCreature();\r\n        this.spawnTimer = this.respawnTime;\r\n      }\r\n    }\r\n    this.lastKillingBlow -= timeDiff;\r\n  }\r\n\r\n  updateCreature(creature : SkeletonCharacter, timeDiff : number) : void {\r\n    if (creature.flags.dead) {\r\n      if (!creature.visible)\r\n        return;\r\n      \r\n      creature.alpha -= this.fadeSpeed * timeDiff;\r\n      if (creature.alpha < 0) {\r\n        creature.visible = false;\r\n        characterContainer.removeChild(creature);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    creature.timer.attack -= timeDiff;\r\n    creature.timer.scan -= timeDiff;\r\n    creature.timer.ability -= timeDiff;\r\n    \r\n    if (this.model.runeEffects.healthRegen > 0) {\r\n      this.updateZombieRegen(creature, timeDiff);\r\n    }\r\n    \r\n    if (creature.flags.burning && !creature.immuneToBurns) {\r\n      this.updateBurns(creature, timeDiff);\r\n    }\r\n    \r\n    if (creature.timer.ability < 0) {\r\n      creature.timer.ability = 4;\r\n      // do abilities\r\n    }\r\n\r\n    if ((!creature.target || creature.target.flags.dead) && creature.timer.scan < 0) {\r\n      creature.state = CreatureState.lookingForTarget;\r\n    }\r\n\r\n    switch(creature.state) {\r\n\r\n      case CreatureState.lookingForTarget:\r\n\r\n        this.searchClosestTarget(creature);\r\n        if (creature.target) {\r\n          creature.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n\r\n      case CreatureState.movingToTarget: {\r\n        const distanceToHumanTarget = this.fastDistance(creature.position.x, creature.position.y, creature.target.x, creature.target.y);\r\n\r\n        if (distanceToHumanTarget < this.attackDistance) {\r\n          creature.state = CreatureState.attackingTarget;\r\n          break;\r\n        }\r\n\r\n        if (distanceToHumanTarget > this.attackDistance * 3 && creature.timer.scan < 0) {\r\n          this.searchClosestTarget(creature);\r\n        }\r\n        this.updateCreatureSpeed(creature, timeDiff);\r\n\r\n        break;\r\n      }\r\n      case CreatureState.attackingTarget: {\r\n        const distanceToTarget = this.fastDistance(creature.position.x, creature.position.y, creature.target.x, creature.target.y);\r\n        if (distanceToTarget < this.attackDistance) {\r\n          if (creature.timer.attack < 0 && !creature.target.flags.dead) {\r\n            this.humans.damageHuman(creature.target, this.calculateDamage(creature));\r\n            if (creature.target.flags.dead && this.lastKillingBlow <= 0) {\r\n              this.model.addPrestigePoints(this.persistent.level);\r\n              this.lastKillingBlow = 20;\r\n              this.prestigePoints.newPart(creature.target.x, creature.target.y);\r\n            }\r\n            creature.timer.attack = this.attackSpeed * this.model.runeEffects.attackSpeed;\r\n            if (creature.flags.burning) {\r\n              creature.timer.attack *= (1 / this.model.burningSpeedMod);\r\n            }\r\n            if (this.randomSpells.length > 0)  {\r\n              for (let i = 0; i < this.randomSpells.length; i++) {\r\n                if (Math.random() < 0.07) {\r\n                  this.spells.castSpellNoMana(this.randomSpells[i]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (distanceToTarget > this.attackDistance / 2) {\r\n            this.updateCreatureSpeed(creature, timeDiff);\r\n          }\r\n        } else {\r\n          creature.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  incinerate() : void {\r\n    let creature : Creature;\r\n    for (let i=0; i < this.skeletons.length; i++) {\r\n      if (this.skeletons[i].visible) {\r\n        creature=this.skeletons[i];\r\n      }\r\n    }\r\n    if (creature)\r\n      for (let i=0; i < this.aliveHumans.length; i++) {\r\n        if (Math.abs(this.aliveHumans[i].x - creature.x) < 200) {\r\n          if (Math.abs(this.aliveHumans[i].y - creature.y) < 200) {\r\n            this.humans.burnHuman(this.aliveHumans[i], creature.attackDamage);\r\n          }\r\n        }\r\n      }\r\n  }  \r\n\r\n  getCreatureDirection(creature : SkeletonCharacter) : number {\r\n    if(Math.abs(creature.xSpeed) > Math.abs(creature.ySpeed)) {\r\n      //left right\r\n      if (creature.xSpeed < 0) {\r\n        return this.directions.left;\r\n      }\r\n      return this.directions.right;\r\n    } else {\r\n      // up down\r\n      if (creature.ySpeed < 0) {\r\n        return this.directions.up;\r\n      }\r\n      return this.directions.down;\r\n    }\r\n  }\r\n\r\n  changeTextureDirection(creature : SkeletonCharacter) : void {\r\n    const direction = this.getCreatureDirection(creature);\r\n    if (direction !== creature.currentDirection) {\r\n      switch(direction) {\r\n        case this.directions.up:\r\n          creature.textures = creature.textureSet.up;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.down:\r\n          creature.textures = creature.textureSet.down;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.right:\r\n          creature.textures = creature.textureSet.right;\r\n          creature.scale.x = creature.scaling;\r\n          break;\r\n        case this.directions.left:\r\n          creature.textures = creature.textureSet.right;\r\n          creature.scale.x = -creature.scaling;\r\n          break;\r\n      }\r\n      creature.currentDirection = direction;\r\n      creature.play();\r\n    }\r\n  }\r\n\r\n  updateCreatureSpeed(creature : SkeletonCharacter, timeDiff : number) : void {\r\n    if (creature.timer.dogStun > 0) {\r\n      creature.timer.dogStun -= timeDiff;\r\n      return;\r\n    }\r\n\r\n    if (!creature.timer.target || !creature.targetVector) {\r\n      creature.timer.target = 0;\r\n    }\r\n    creature.timer.target-=timeDiff;\r\n    if (creature.timer.target <= 0) {\r\n      creature.targetVector = this.map.howDoIGetToMyTarget(creature, creature.target);\r\n      creature.timer.target = 0.2;\r\n    }\r\n\r\n    const speedMod = creature.speedMultiplier * creature.maxSpeed;\r\n    \r\n    creature.xSpeed = creature.targetVector.x * speedMod;\r\n    creature.ySpeed = creature.targetVector.y * speedMod;\r\n\r\n    creature.position.x += creature.xSpeed * timeDiff;\r\n    creature.position.y += creature.ySpeed * timeDiff;\r\n    creature.zIndex = creature.position.y;\r\n    this.changeTextureDirection(creature);\r\n  }\r\n\r\n  calculateDamage(creature : SkeletonCharacter) : number {\r\n    let damage = creature.attackDamage;\r\n    if (this.model.runeEffects.critChance > 0 && Math.random() < this.model.runeEffects.critChance) {\r\n      damage *= this.model.runeEffects.critDamage;\r\n    }\r\n    return damage;\r\n  }\r\n\r\n  lootPositions = {\r\n    helmet : {id:1,name:\"Helmet\"},\r\n    chest : {id:2,name:\"Chest\"},\r\n    legs : {id:3,name:\"Legs\"},\r\n    gloves : {id:4,name:\"Gloves\"},\r\n    boots : {id:5,name:\"Boots\"},\r\n    sword : {id:6,name:\"Sword\"},\r\n    shield : {id:7,name:\"Shield\"}\r\n  }\r\n\r\n  rarity = {\r\n    common : 1,\r\n    rare : 2,\r\n    epic : 3,\r\n    legendary : 4\r\n  }\r\n\r\n  prefixes = {\r\n    commonQuality : [\"Wooden\", \"Sturdy\", \"Rigid\", \"Iron\", \"Rusty\", \"Flimsy\", \"Battered\", \"Damaged\", \"Used\", \"Stained\", \"Training\"],\r\n    rareQuality : [\"Steel\", \"Shiny\", \"Polished\", \"Forged\", \"Plated\", \"Bronze\", \"Reinforced\", \"Veteran's\", \"Reliable\"],\r\n    epicQuality : [\"Antique\", \"Ancient\", \"Famous\", \"Bejeweled\", \"Notorious\", \"Historic\", \"Mythical\", \"Extraordinary\"],\r\n    legendaryQuality : [\"Monstrous\", \"Diabolical\", \"Withering\", \"Terrible\", \"Demoniacal\"]\r\n  }\r\n\r\n  stats = {\r\n    respawnTime : {id:1, scaling:1},\r\n    speed : {id:2, scaling:1},\r\n    zombieHealth : {id:3, scaling:24},\r\n    zombieDamage : {id:4, scaling:3},\r\n    zombieSpeed : {id:5, scaling:1}\r\n  }\r\n\r\n  applyItemUpgrades() : void {\r\n    this.model = GameModel.getInstance();\r\n    this.moveSpeed = 40;\r\n    this.respawnTime = 10;\r\n    this.randomSpells = [];\r\n    this.persistent.items.filter(i => i.q).forEach((item) => {\r\n      item.e.forEach((effect) => {\r\n        switch (effect) {\r\n          case this.stats.respawnTime.id:\r\n            this.respawnTime--;\r\n            break;\r\n          case this.stats.speed.id:\r\n            this.moveSpeed++;\r\n            break;\r\n          case this.stats.zombieHealth.id:\r\n            this.model.zombieHealth += item.l * this.stats.zombieHealth.scaling;\r\n            break;\r\n          case this.stats.zombieDamage.id:\r\n            this.model.zombieDamage += item.l * this.stats.zombieDamage.scaling;\r\n            break;\r\n          case this.stats.zombieSpeed.id:\r\n            this.model.zombieSpeed++;\r\n            break;\r\n        }\r\n      });\r\n      if (item.se)\r\n        item.se.forEach((specialEffect) => {\r\n          this.randomSpells.push(specialEffect);\r\n        });\r\n    });\r\n  }\r\n\r\n  getLootName(loot : Loot) : string {\r\n    let prefix = \"\";\r\n    switch (loot.r) {\r\n      case this.rarity.common:\r\n        prefix = this.prefixes.commonQuality[loot.p];\r\n        break;\r\n      case this.rarity.rare:\r\n        prefix = this.prefixes.rareQuality[loot.p];\r\n        break;\r\n      case this.rarity.epic:\r\n        prefix = this.prefixes.epicQuality[loot.p];\r\n        break;\r\n      case this.rarity.legendary:\r\n        prefix = this.prefixes.legendaryQuality[loot.p];\r\n        break;\r\n    }\r\n    let suffix = \"\";\r\n    switch (loot.s) {\r\n      case this.lootPositions.helmet.id:\r\n        suffix = this.lootPositions.helmet.name;\r\n        break;\r\n      case this.lootPositions.chest.id:\r\n        suffix = this.lootPositions.chest.name;\r\n        break;\r\n      case this.lootPositions.legs.id:\r\n        suffix = this.lootPositions.legs.name;\r\n        break;\r\n      case this.lootPositions.gloves.id:\r\n        suffix = this.lootPositions.gloves.name;\r\n        break;\r\n      case this.lootPositions.boots.id:\r\n        suffix = this.lootPositions.boots.name;\r\n        break;\r\n      case this.lootPositions.sword.id:\r\n        suffix = this.lootPositions.sword.name;\r\n        break;\r\n      case this.lootPositions.shield.id:\r\n        suffix = this.lootPositions.shield.name;\r\n        break;\r\n    }\r\n    return prefix + \" \" + suffix;\r\n  }\r\n\r\n  getLootClass(loot : Loot) : string {\r\n    switch (loot.r) {\r\n      case this.rarity.common:\r\n        return \"common\";\r\n      case this.rarity.rare:\r\n        return \"rare\";\r\n      case this.rarity.epic:\r\n        return \"epic\";\r\n      case this.rarity.legendary:\r\n        return \"legendary\";\r\n    }\r\n  }\r\n\r\n  getLootStats(loot : Loot) : string[] {\r\n    const stats = [];\r\n    if (loot.e)\r\n      for (let i = 0; i < loot.e.length; i++) {\r\n        switch (loot.e[i]) {\r\n          case this.stats.respawnTime.id:\r\n            stats.push(\"-1 second respawn time\");\r\n            break;\r\n          case this.stats.speed.id:\r\n            stats.push(\"+1 movement speed\");\r\n            break;\r\n          case this.stats.zombieHealth.id:\r\n            stats.push(\"+\" + formatWhole(this.stats.zombieHealth.scaling * loot.l) + \" zombie health\");\r\n            break;\r\n          case this.stats.zombieDamage.id:\r\n            stats.push(\"+\" + formatWhole(this.stats.zombieDamage.scaling * loot.l) + \" zombie damage\");\r\n            break;\r\n          case this.stats.zombieSpeed.id:\r\n            stats.push(\"+1 zombie speed\");\r\n            break;\r\n        }\r\n      }\r\n      \r\n    return stats;\r\n  }\r\n\r\n  getSpecialEffects(loot : Loot) : string[] {\r\n    const stats = [];\r\n    if (loot.se)\r\n    for (let i = 0; i < loot.se.length; i++) {\r\n      const spell = this.spells.spells.filter(sp => sp.id == loot.se[i])[0];\r\n      stats.push(spell.itemText || \"Has a chance to cast \" + spell.name + \" when attacking, this does not cost energy or trigger a cooldown\");\r\n    }\r\n    return stats;\r\n  }\r\n\r\n  testForLoot() : void {\r\n    if (this.persistent.skeletons > 0) {\r\n      if (Math.random() < this.lootChance) {\r\n        const loot = this.generateLoot(this.persistent.level);\r\n        this.model.sendMessage(this.getLootName(loot) + \" collected!\");\r\n        this.persistent.items.push(loot);\r\n      }\r\n    }\r\n  }\r\n\r\n  generateLoot(level : number) : Loot {\r\n    const position = Math.round(Math.random() * 6) + 1;\r\n    let rarity = this.rarity.common;\r\n    const specialEffects = [];\r\n    if (Math.random() < 0.2) {\r\n      rarity = this.rarity.rare;\r\n      if (Math.random() < 0.2) {\r\n        rarity = this.rarity.epic;\r\n        if (Math.random() < 0.1) {\r\n          rarity = this.rarity.legendary;\r\n          const spell = getRandomElementFromArray(this.spells.spells, Math.random());\r\n          specialEffects.push(spell.id);\r\n        }\r\n      }\r\n    }\r\n    let prefixIndex = 0;\r\n    switch (rarity) {\r\n      case this.rarity.common:\r\n        prefixIndex = Math.floor(Math.random() * this.prefixes.commonQuality.length);\r\n        break;\r\n      case this.rarity.rare:\r\n        prefixIndex = Math.floor(Math.random() * this.prefixes.rareQuality.length);\r\n        break;\r\n      case this.rarity.epic:\r\n        prefixIndex = Math.floor(Math.random() * this.prefixes.epicQuality.length);\r\n        break;\r\n      case this.rarity.legendary:\r\n        prefixIndex = Math.floor(Math.random() * this.prefixes.legendaryQuality.length);\r\n        break;\r\n    }\r\n    const effects = [(Math.random() > 0.5 ? this.stats.zombieHealth.id : this.stats.zombieDamage.id)];\r\n    for (let i = 0; i < rarity - 1; i++) {\r\n      let effect = Math.ceil(Math.random() * 5);\r\n      while (effects.indexOf(effect) > -1) {\r\n        effect = Math.ceil(Math.random() * 5);\r\n      }\r\n      effects.push(effect);\r\n    }\r\n    return {\r\n      id : this.persistent.currItemId++,\r\n      l : level,\r\n      s : position,\r\n      r : rarity,\r\n      p : prefixIndex,\r\n      e : effects,\r\n      se : specialEffects,\r\n      q : false\r\n    }\r\n  }\r\n\r\n  destroyItem(item : Loot) : void {\r\n    this.addXp(item.l * item.r * 10);\r\n    for( let i = 0; i < this.persistent.items.length; i++){\r\n      if ( this.persistent.items[i].id === item.id) { \r\n        this.persistent.items.splice(i, 1);\r\n      }\r\n    }\r\n  }\r\n  destroyAllItems() : void {\r\n    this.addXp(this.xpForItems());\r\n    this.persistent.items = this.persistent.items.filter(i => i.q);    \r\n  }\r\n  xpForItems() : number {\r\n    let xp = 0;\r\n    this.persistent.items.filter(i => !i.q).forEach(function(item){\r\n      xp += item.l * item.r * 10;\r\n    });\r\n    return xp;\r\n  }\r\n}\r\n\r\ntype Loot = {\r\n  id : number;\r\n  l : number;\r\n  s : number;\r\n  r : number;\r\n  p : number;\r\n  e : number[];\r\n  se : number[];\r\n  q : boolean;\r\n}","import { GameModel, Humans, Skeleton, Zombies } from \"./internal\";\n\nclass Spell {\n  id : number;\n  name : string;\n  tooltip : string;\n  itemText : string;\n  cooldown : number;\n  duration : number;\n  energyCost : number;\n  start : () => void;\n  end : () => void;\n  onCooldown : boolean;\n  active : boolean;\n  cooldownLeft : number;\n  timer : number;\n  unlocked : boolean;\n  constructor(id : number, name : string, tooltip : string, itemText : string, cooldown : number, duration : number, energyCost : number, start : () => void, end : () => void) {\n    this.id = id;\n    this.name = name;\n    this.tooltip = tooltip;\n    this.itemText = itemText;\n    this.cooldown = cooldown;\n    this.duration = duration;\n    this.energyCost = energyCost;\n    this.start = start;\n    this.end  = end;\n    this.timer = 0;\n    this.onCooldown = false;\n    this.active = false;\n    this.cooldownLeft = 0;\n  }\n}\n\n\nexport class Spells {\n\n  private static instance : Spells;\n  constructor() {\n    if (Spells.instance)\n      return Spells.instance;\n    Spells.instance = this;\n    this.spells.forEach(s => this.spellMap.set(s.id, s));\n  }\n\n  skeleton = new Skeleton();\n  zombies = new Zombies();\n  humans = new Humans();\n  spellMap = new Map<number,Spell>();\n  spells = [\n    new Spell(1, \"Time Warp\", \"Speed up the flow of time for 30 seconds\", \"\", 120, 30, 0, function(){\n      GameModel.getInstance().gameSpeed = 2;\n    }, function(){\n      GameModel.getInstance().gameSpeed = 1;\n    }),\n    new Spell(2, \"Energy Charge\", \"5x Energy rate for 20 seconds, cost 50 energy\", \"\", 180, 20, 50, function(){\n      GameModel.getInstance().energySpellMultiplier = 5;\n    }, function(){\n      GameModel.getInstance().energySpellMultiplier = 1;\n    }),\n    new Spell(3, \"Detonate\", \"Explode your zombies into clouds of plague, cost 69 energy... nice\", \"\", 120, 3, 69, function(){\n      new Spells().zombies.detonate = true;\n    }, function(){\n      new Spells().zombies.detonate = false;\n    }),\n    new Spell(4, \"Earth Freeze\", \"Freeze all humans in place preventing them from moving for 15 seconds, cost 75 energy\", \"\", 60, 15, 75, function(){\n      new Spells().humans.frozen = true;\n    }, function(){\n      new Spells().humans.frozen = false;\n    }),\n    new Spell(5, \"Gigazombies\", \"For 5 seconds any zombies spawned will be giants with 10x health and attack damage, cost 100 energy\", \"\", 300, 5, 100, function(){\n      new Spells().zombies.super = true;\n    }, function(){\n      new Spells().zombies.super = false;\n    }),\n    new Spell(6, \"Incinerate\", \"Burns humans near the skeleton champion\", \"Has a chance to cast Incinerate when attacking, burning all humans within a large radius of the Skeleon\", 1, 10, 10, function(){\n      new Spells().skeleton.incinerate();\n    }, function(){\n      //\n    }),\n    new Spell(7, \"Pandemic\", \"Causes plague to spread\", \"Has a chance to cast Pandemic when attacking, causing infected humans to spread the plague to each other for 20 seconds\", 10, 20, 10, function(){\n      new Spells().humans.pandemic = true;\n    }, function(){\n      new Spells().humans.pandemic = false;\n    })\n  ];\n\n  lockAllSpells() : void {\n    for (let i = 0; i < this.spells.length; i++) {\n      this.spells[i].unlocked = false;\n    }\n  }\n\n  unlockSpell(spellId : number) : void {\n    this.spellMap.get(spellId).unlocked = true;\n  }\n\n  getSpell(spellId : number) : Spell {\n    return this.spellMap.get(spellId);\n  }\n\n  getUnlockedSpells() : Spell[] {\n    return this.spells.filter(spell => spell.unlocked);\n  }\n\n  castSpell(spell : Spell) : void {\n    const model = GameModel.getInstance();\n    if (spell.onCooldown || spell.active || !spell.unlocked)\n      return;\n\n    if (spell.energyCost > model.energy)\n      return;\n    \n      model.energy -= spell.energyCost;\n    spell.onCooldown = true;\n    spell.cooldownLeft = spell.cooldown;\n    spell.active = true;\n    spell.timer = spell.duration;\n    spell.start();\n    model.sendMessage(spell.name);\n  }\n\n  castSpellNoMana(spellId : number) : void {\n    const spellList = this.spells.filter(sp => sp.id == spellId);\n    if (spellList.length > 0) {\n      const spell = spellList[0];\n      if (spell.onCooldown || spell.active)\n        return;\n      \n      spell.active = true;\n      spell.timer = spell.duration;\n      spell.start();\n      GameModel.getInstance().sendMessage(spell.name);\n    }\n  }\n\n  updateSpells(timeDiff : number) : void {\n    for (let i = 0; i < this.spells.length; i++) {\n      const spell = this.spells[i];\n\n      if (spell.onCooldown) {\n        spell.cooldownLeft -= timeDiff;\n        if (spell.cooldownLeft <= 0) {\n          spell.onCooldown = false;\n        }\n      }\n\n      if (spell.active) {\n        spell.timer -= timeDiff;\n        if (spell.timer <= 0) {\n          spell.active = false;\n          spell.end();\n        }\n      }\n    }\n  }\n}","import { GameModel, Upgrades } from \"./internal\";\n\nexport type Trophy = {\n  level:number;\n  type:string;\n  effect:number;\n  rank:number;\n  owned:boolean;\n  escaped:boolean;\n}\n\nexport class Trophies {\n\n  private static instance : Trophies;\n\n  constructor() {\n    if (Trophies.instance)\n      return Trophies.instance;\n    Trophies.instance = this;\n  }\n\n  gameModel = GameModel.getInstance();\n  upgrades = new Upgrades();\n\n  trophyStats = [\n    {\n      type:this.upgrades.types.health,\n      value:50, percentage:false\n    },\n    {\n      type:this.upgrades.types.damage,\n      value:7, percentage:false\n    },\n    {\n      type:this.upgrades.types.energyCap,\n      value:10, percentage:false\n    },\n    {\n      type:this.upgrades.types.energyRate,\n      value:0.5, percentage:false\n    },\n    {\n      type:this.upgrades.types.boneCollectorCapacity,\n      value:15, percentage:false\n    },\n    {\n      type:this.upgrades.types.plagueDamage,\n      value:50, percentage:false\n    },\n    {\n      type:this.upgrades.types.bloodCap,\n      value:5000, percentage:false\n    },\n    {\n      type:this.upgrades.types.brainsRate,\n      value:2, percentage:false\n    },\n    {\n      type:this.upgrades.types.zombieHealthPC,\n      value:0.02,\n      percentage:true\n    },\n    {\n      type:this.upgrades.types.bonesRate,\n      value:2, percentage:false\n    },\n    {\n      type:this.upgrades.types.zombieDmgPC,\n      value:0.02,\n      percentage:true\n    }\n  ]\n\n  isPercentage(type : string) : boolean {\n    for (let i = 0; i < this.trophyStats.length; i++) {\n      if (this.trophyStats[i].type == type) {\n        return this.trophyStats[i].percentage == true;\n      }\n    }\n  }\n\n  doesLevelHaveTrophy(level : number) : boolean {\n    if (this.gameModel.persistentData.vipEscaped) {\n      if (this.gameModel.persistentData.vipEscaped.indexOf(level) > -1) {\n        return false;\n      }\n    }\n    if (this.gameModel.persistentData.trophies) {\n      if (this.gameModel.persistentData.trophies.indexOf(level) > -1) {\n        return false;\n      }\n    }\n    return level % 5 == 0;\n  }\n\n  createTrophy(level : number, owned : boolean, escaped : boolean) : Trophy {\n    const trophyId = Math.round(level / 5) - 1;\n    const multiplier = Math.floor(trophyId / this.trophyStats.length);\n    const trophy = this.trophyStats[trophyId - (multiplier * this.trophyStats.length)];\n    return {\n      level:level,\n      type:trophy.type,\n      effect:trophy.value * (multiplier + 1),\n      rank:1,\n      owned:owned,\n      escaped:escaped\n    };\n  }\n\n  trophyAquired(level : number) : void {\n    if (!this.gameModel.persistentData.trophies) {\n      this.gameModel.persistentData.trophies = [];\n    }\n    if (this.gameModel.persistentData.trophies.indexOf(level) == -1) {\n      this.gameModel.persistentData.trophies.push(level);\n      this.gameModel.persistentData.trophies.sort();\n      this.gameModel.saveData();\n      this.upgrades.applyUpgrades();\n      if (window.kongregate) {\n        window.kongregate.stats.submit(\"trophies\", this.gameModel.persistentData.trophies.length);\n      }\n      this.gameModel.sendMessage(\"The VIP has been killed! - New Trophy Aquired\");\n    } else {\n      this.gameModel.sendMessage(\"The VIP has been killed!\");\n    }\n  }\n\n  getTrophyList() : Trophy[] {\n    if (!this.gameModel.persistentData.trophies) {\n      this.gameModel.persistentData.trophies = [];\n    }\n    if (!this.gameModel.persistentData.vipEscaped) {\n      this.gameModel.persistentData.vipEscaped = [];\n    }\n    const trophies : Trophy[] = [];\n    let maxTrophyToCreate = this.gameModel.persistentData.allTimeHighestLevel + 5;\n    for (let i = 0; i < this.gameModel.persistentData.trophies.length; i++) {\n      if (this.gameModel.persistentData.trophies[i] > maxTrophyToCreate) {\n        maxTrophyToCreate = this.gameModel.persistentData.trophies[i];\n      }\n    }\n\n    for (let i=5; i <= maxTrophyToCreate; i += 5) {\n      trophies.push(this.createTrophy(i, this.gameModel.persistentData.trophies.indexOf(i) > -1, this.gameModel.persistentData.vipEscaped.indexOf(i) > -1));\n    }\n    return trophies;\n  }\n\n  getTrophyTotals() : Trophy[] {\n    const trophiesCollected = this.getTrophyList().filter(trophy => trophy.owned);\n    const trophies : Trophy[] = [];\n    for (let i = 0; i < trophiesCollected.length; i++) {\n      if (trophies.filter(trophy => trophy.type == trophiesCollected[i].type).length == 0) {\n        trophies.push(trophiesCollected[i]);\n      } else {\n        if (this.isPercentage(trophiesCollected[i].type)) {\n          trophies.filter(trophy => trophy.type == trophiesCollected[i].type)[0].effect = \n            ((trophies.filter(trophy => trophy.type == trophiesCollected[i].type)[0].effect + 1) * (1 + trophiesCollected[i].effect)) - 1;\n        } else {\n          trophies.filter(trophy => trophy.type == trophiesCollected[i].type)[0].effect += trophiesCollected[i].effect;\n        }\n        \n      }\n    }\n    return trophies;\n  }\n\n  getAquiredTrophyList() : Trophy[] {\n    if (!this.gameModel.persistentData.trophies) {\n      this.gameModel.persistentData.trophies = [];\n    }\n    const trophies : Trophy[] = [];\n    for (let i=0; i < this.gameModel.persistentData.trophies.length; i++) {\n      trophies.push(this.createTrophy(this.gameModel.persistentData.trophies[i], true, false));\n    }\n    return trophies;\n  }\n}","import { GameModel, PartFactory, Skeleton, Spells, Trophies, getCostForUpgrades, getMaxUpgrades, formatWhole, format2Places } from \"./internal\";\n\nconst million = 1000000;\n\nexport class Upgrades {\n  private static instance : Upgrades;\n  constructor() {\n    if (Upgrades.instance)\n      return Upgrades.instance;\n    Upgrades.instance = this;\n  }\n\n  gameModel = GameModel.getInstance();\n  spells = new Spells();\n  skeleton = new Skeleton();\n  // trophies = new Trophies();\n  partFactory = new PartFactory();\n  \n  types = {\n    energyRate:\"energyRate\",\n    energyCap:\"energyCap\",\n    damage:\"damage\",\n    health:\"health\",\n    speed:\"speed\",\n    brainsRate:\"brainsRate\",\n    bonesRate:\"bonesRate\",\n    bloodCap:\"bloodCap\",\n    brainsCap:\"brainsCap\",\n    brainRecoverChance:\"brainRecoverChance\",\n    riseFromTheDeadChance:\"riseFromTheDeadChance\",\n    boneCollectorCapacity:\"boneCollectorCapacity\",\n    construction:\"construction\",\n    infectedBite:\"infectedBite\",\n    infectedBlast:\"infectedBlast\",\n    plagueDamage:\"plagueDamage\",\n    burningSpeedPC:\"burningSpeedPC\",\n    unlockSpell:\"unlockSpell\",\n    spitDistance:\"spitDistance\",\n    blastHealing:\"blastHealing\",\n    plagueArmor:\"plagueArmor\",\n    monsterLimit:\"monsterLimit\",\n    runicSyphon:\"runicSyphon\",\n    gigazombies:\"gigazombies\",\n    bulletproof:\"bulletproof\",\n    harpySpeed:\"harpySpeed\",\n    tankBuster:\"tankBuster\",\n    harpyBombs:\"harpyBombs\",\n    spikeDelay:\"spikeDelay\",\n    // prestige items\n    bloodGainPC : \"bloodGainPC\",\n    bloodStoragePC : \"bloodStoragePC\",\n    brainsGainPC : \"brainsGainPC\",\n    brainsStoragePC : \"brainsStoragePC\",\n    bonesGainPC : \"bonesGainPC\",\n    partsGainPC : \"partsGainPC\",\n    zombieDmgPC : \"zombieDmgPC\",\n    zombieHealthPC : \"zombieHealthPC\",\n    golemHealthPC : \"golemHealthPC\",\n    golemDamagePC : \"golemDamagePC\",\n    startingPC : \"startingPC\",\n    energyCost : \"energyCost\",\n    autoconstruction : \"autoconstruction\",\n    autoshop : \"autoshop\",\n    graveyardHealth : \"graveyardHealth\"\n  };\n\n  costs = {\n    energy : \"energy\",\n    blood : \"blood\",\n    brains : \"brains\",\n    bones : \"bones\",\n    prestigePoints : \"prestigePoints\",\n    parts : \"parts\"\n  };\n\n  hasRequirement(upgrade : Upgrade) : boolean {\n    if (upgrade.requires && this.gameModel.persistentData.constructions.filter(built => built.id == upgrade.requires).length == 0) {\n      return false;\n    }\n    return true;\n  }\n\n  getUpgrades(type : string) : Upgrade[] {\n    switch(type) {\n      case this.costs.blood:\n      case this.costs.brains:\n      case this.costs.bones:\n      case this.costs.parts:\n        return this.upgrades.filter(upgrade => upgrade.costType == type && (upgrade.cap == 0 || this.currentRank(upgrade) < upgrade.cap) && this.hasRequirement(upgrade));    \n      case \"completed\":\n        return this.upgrades.filter(upgrade => upgrade.cap > 0 && this.currentRank(upgrade) >= upgrade.cap);\n    }\n  }\n\n  applyUpgrades() : void {\n    this.gameModel.resetToBaseStats();\n    this.spells.lockAllSpells();\n    for (let i = 0; i < this.gameModel.persistentData.upgrades.length; i++) {\n      let upgrade = this.upgrades.filter(up => up.id == this.gameModel.persistentData.upgrades[i].id)[0];\n      if (!upgrade) {\n        upgrade = this.prestigeUpgrades.filter(up => up.id == this.gameModel.persistentData.upgrades[i].id)[0];\n      }\n      if (upgrade) {\n        this.applyUpgrade(upgrade, this.gameModel.persistentData.upgrades[i].rank);\n      }\n    }\n    for (let i = 0; i < this.gameModel.persistentData.constructions.length; i++) {\n      this.applyConstructionUpgrade(this.gameModel.persistentData.constructions[i]);\n    }\n    const trophies = new Trophies().getAquiredTrophyList();\n    for (let i = 0; i < trophies.length; i++) {\n      this.applyUpgrade(trophies[i], trophies[i].rank);\n    }\n    this.skeleton.applyUpgrades();\n    this.gameModel.bloodMax *= this.gameModel.bloodStorePCMod;\n    this.gameModel.brainsMax *= this.gameModel.brainsStorePCMod;\n    this.gameModel.zombieDamage *= this.gameModel.zombieDamagePCMod;\n    this.gameModel.zombieHealth *= this.gameModel.zombieHealthPCMod;\n    if (this.gameModel.persistentData.runeshatter) {\n      this.gameModel.zombieDamage *= this.shatterEffect();\n      this.gameModel.zombieHealth *= this.shatterEffect();\n      this.gameModel.zombieCost += this.gameModel.persistentData.runeshatter;\n    }\n    // if (this.gameModel.persistentData.gigazombiesOn) {\n    //   this.gameModel.zombieCost *= 5;\n    // }\n  }\n\n  applyUpgrade(upgrade : UpgradeEffect, rank : number) : void {\n    switch (upgrade.type) {\n      case this.types.energyRate:\n        this.gameModel.energyRate += upgrade.effect * rank;\n        return;\n      case this.types.brainsRate:\n        this.gameModel.brainsRate += upgrade.effect * rank;\n        return;\n      case this.types.bonesRate:\n        this.gameModel.bonesRate += upgrade.effect * rank;\n        return;\n      case this.types.energyCap:\n        this.gameModel.energyMax += upgrade.effect * rank;\n        return;\n      case this.types.bloodCap:\n        this.gameModel.bloodMax += upgrade.effect * rank;\n        return;\n      case this.types.brainsCap:\n        this.gameModel.brainsMax += upgrade.effect * rank;\n        return;\n      case this.types.damage:\n        this.gameModel.zombieDamage += upgrade.effect * rank;\n        return;\n      case this.types.speed:\n        this.gameModel.zombieSpeed += upgrade.effect * rank;\n        return;\n      case this.types.health:\n        this.gameModel.zombieHealth += upgrade.effect * rank;\n        return;\n      case this.types.brainRecoverChance:\n        this.gameModel.brainRecoverChance += upgrade.effect * rank;\n        return;\n      case this.types.riseFromTheDeadChance:\n        this.gameModel.riseFromTheDeadChance += upgrade.effect * rank;\n        return;\n      case this.types.infectedBite:\n        this.gameModel.infectedBiteChance += upgrade.effect * rank;\n        return;\n      case this.types.infectedBlast:\n        this.gameModel.infectedBlastChance += upgrade.effect * rank;\n        return;\n      case this.types.plagueDamage:\n        this.gameModel.plagueDamageMod += upgrade.effect, rank;\n        return;\n      case this.types.burningSpeedPC:\n        this.gameModel.burningSpeedMod += upgrade.effect * rank;\n        return;\n      case this.types.construction:\n        this.gameModel.construction = 1;\n        return;\n      case this.types.boneCollectorCapacity:\n        this.gameModel.boneCollectorCapacity += upgrade.effect * rank;\n        return;\n      case this.types.unlockSpell:\n        this.spells.unlockSpell(upgrade.effect);\n        return;\n      case this.types.spitDistance:\n        this.gameModel.spitDistance = 30 + upgrade.effect * rank;\n        return\n      case this.types.blastHealing:\n        this.gameModel.blastHealing += upgrade.effect * rank;\n        return;\n      case this.types.plagueArmor:\n        this.gameModel.plagueDmgReduction -= upgrade.effect * rank;\n        return;\n      case this.types.monsterLimit:\n        this.gameModel.creatureLimit += upgrade.effect * rank;\n        return;\n      case this.types.runicSyphon:\n        this.gameModel.runicSyphon.percentage += upgrade.effect * rank;\n        return;\n      // case this.types.gigazombies:\n      //   this.gameModel.gigazombies = true;\n      //   return;\n      case this.types.bulletproof:\n        this.gameModel.bulletproofChance += upgrade.effect * rank;\n        return;\n      case this.types.harpySpeed:\n        this.gameModel.harpySpeed += upgrade.effect * rank;\n        return;\n      case this.types.tankBuster:\n        this.gameModel.tankBuster = true;\n        return;\n      case this.types.harpyBombs:\n        this.gameModel.harpyBombs += upgrade.effect * rank;\n        return;\n      case this.types.spikeDelay:\n        this.gameModel.spikeDelay -= upgrade.effect * rank;\n        return;\n        // prestige items\n      case this.types.bonesGainPC:\n        this.gameModel.bonesPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.partsGainPC:\n        this.gameModel.partsPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.bloodGainPC:\n        this.gameModel.bloodPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.bloodStoragePC:\n        this.gameModel.bloodStorePCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.brainsGainPC:\n        this.gameModel.brainsPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.brainsStoragePC:\n        this.gameModel.brainsStorePCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.zombieDmgPC:\n        this.gameModel.zombieDamagePCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.zombieHealthPC:\n        this.gameModel.zombieHealthPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.golemDamagePC:\n        this.gameModel.golemDamagePCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.golemHealthPC:\n        this.gameModel.golemHealthPCMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n      case this.types.startingPC:\n        this.gameModel.startingResources += upgrade.effect * rank;\n        return;\n      case this.types.energyCost:\n        this.gameModel.zombieCost -= upgrade.effect * rank;\n        return;\n      case this.types.autoconstruction:\n        this.gameModel.autoconstructionUnlocked = true;\n        return;\n      case this.types.autoshop:\n        this.gameModel.autoUpgrades = true;\n        return;\n      case this.types.graveyardHealth:\n        this.gameModel.graveyardHealthMod *= Math.pow(1 + upgrade.effect, rank);\n        return;\n    }\n  }\n\n  applyConstructionUpgrade(upgrade : Upgrade) : void {\n    switch(upgrade.type) {\n      case this.constructionTypes.graveyard:\n        this.gameModel.constructions.graveyard = 1;\n        return;\n      case this.constructionTypes.crypt:\n        this.gameModel.constructions.crypt = 1;\n        // this.gameModel.brainsStorePCMod += 0.5;\n        // this.gameModel.bloodStorePCMod += 0.5;\n        this.gameModel.brainsStorePCMod *= 1.5;\n        this.gameModel.bloodStorePCMod *= 1.5;\n        return;\n      case this.constructionTypes.fort:\n        this.gameModel.constructions.fort = 1;\n        // this.gameModel.brainsStorePCMod += 0.6;\n        // this.gameModel.bloodStorePCMod += 0.6;\n        this.gameModel.brainsStorePCMod *= 1.6;\n        this.gameModel.bloodStorePCMod *= 1.6;\n        return;\n      case this.constructionTypes.fortress:\n        this.gameModel.constructions.fortress = 1;\n        // this.gameModel.brainsStorePCMod += 0.7;\n        // this.gameModel.bloodStorePCMod += 0.7;\n        this.gameModel.brainsStorePCMod *= 1.7;\n        this.gameModel.bloodStorePCMod *= 1.7;\n        return;\n      case this.constructionTypes.citadel:\n        this.gameModel.constructions.citadel = 1;\n        // this.gameModel.brainsStorePCMod += 0.8;\n        // this.gameModel.bloodStorePCMod += 0.8;\n        this.gameModel.brainsStorePCMod *= 1.8;\n        this.gameModel.bloodStorePCMod *= 1.8;\n        return;\n      case this.constructionTypes.plagueSpikes:\n        this.gameModel.constructions.plagueSpikes = 1;\n        return;\n      case this.constructionTypes.fence:\n        this.gameModel.constructions.fence = 1;\n        return;\n      case this.constructionTypes.fenceSize:\n        this.gameModel.fenceRadius += upgrade.effect * upgrade.rank;\n        return;\n      case this.constructionTypes.pit:\n        this.gameModel.bloodMax += 1000000 * upgrade.rank;\n        this.gameModel.brainsMax += 100000 * upgrade.rank;\n        return;\n      case this.constructionTypes.runesmith:\n        this.gameModel.constructions.runesmith = 1;\n        if (!this.gameModel.persistentData.runes) {\n          this.gameModel.persistentData.runes = {\n            life : {\n              blood:0,\n              brains:0,\n              bones:0\n            },\n            death : {\n              blood:0,\n              brains:0,\n              bones:0\n            }\n          }\n        }\n        return;\n      case this.constructionTypes.aviary:\n        this.gameModel.constructions.aviary = 1;\n        return;\n      case this.constructionTypes.zombieCage:\n        this.gameModel.zombieCages += upgrade.effect * upgrade.rank;\n        return;\n      case this.constructionTypes.partFactory:\n        this.gameModel.constructions.partFactory = true;\n        this.gameModel.constructions.factory = true;\n        return;\n      case this.constructionTypes.monsterFactory:\n        this.gameModel.constructions.monsterFactory = true;\n        this.gameModel.constructions.factory = true;\n        return;\n    }\n  }\n\n  displayStatValue(upgrade : Upgrade) : string {\n    switch (upgrade.type) {\n      case this.types.energyRate:\n        return \"Energy rate: \" + format2Places(this.gameModel.energyRate) + \" per second\";\n      case this.types.energyCap:\n        return \"Maximum energy: \" + formatWhole(this.gameModel.energyMax);\n      case this.types.bloodCap:\n        return \"Maximum blood: \" + formatWhole(this.gameModel.bloodMax);\n      case this.types.brainsCap:\n        return \"Maximum brains: \" + formatWhole(this.gameModel.brainsMax);\n      case this.types.damage:\n        return \"Zombie damage: \" + formatWhole(this.gameModel.zombieDamage);\n      case this.types.speed:\n        return \"Zombie speed: \" + formatWhole(this.gameModel.zombieSpeed);\n      case this.types.health:\n        return \"Zombie maximum health: \" + formatWhole(this.gameModel.zombieHealth);\n      case this.types.brainRecoverChance:\n        return Math.round(this.gameModel.brainRecoverChance * 100) + \"% chance to recover brain\";\n      case this.types.riseFromTheDeadChance:\n        return Math.round(this.gameModel.riseFromTheDeadChance * 100) + \"% chance for human corpses to turn into zombies\";\n      case this.types.infectedBite:\n        return Math.round(this.gameModel.infectedBiteChance * 100) + \"% chance for zombies to infect their targets\";\n      case this.types.infectedBlast:\n        return Math.round(this.gameModel.infectedBlastChance * 100) + \"% chance for zombies to explode on death\";\n      case this.types.bulletproof:\n        return Math.round(this.gameModel.bulletproofChance * 100) + \"% chance for earth golems to reflect bullets\";\n      case this.types.construction:\n        return this.gameModel.construction > 0 ? \"You have unlocked Unholy Construction\" : \"You have yet to unlock Unholy Construction\";\n      case this.types.boneCollectorCapacity:\n        return \"Bone collector capacity: \" + formatWhole(this.gameModel.boneCollectorCapacity);\n      case this.types.bonesGainPC:\n        return \"Bones: \" + formatWhole(Math.round(this.gameModel.bonesPCMod * 100)) + \"%\";\n      case this.types.partsGainPC:\n        return \"Parts: \" + formatWhole(Math.round(this.gameModel.partsPCMod * 100)) + \"%\";\n      case this.types.bloodGainPC:\n        return \"Blood: \" + formatWhole(Math.round(this.gameModel.bloodPCMod * 100)) + \"%\";\n      case this.types.bloodStoragePC:\n        return \"Blood Storage: \" + formatWhole(this.gameModel.bloodStorePCMod * 100) + \"%\";\n      case this.types.brainsGainPC:\n        return \"Brains: \" + formatWhole(Math.round(this.gameModel.brainsPCMod * 100)) + \"%\";\n      case this.types.brainsStoragePC:\n        return \"Brains Storage: \" +  formatWhole(this.gameModel.brainsStorePCMod * 100) + \"%\";\n      case this.types.zombieDmgPC:\n        return \"Zombie Damage: \" + Math.round(this.gameModel.zombieDamagePCMod * 100) + \"%\";\n      case this.types.zombieHealthPC:\n        return \"Zombie Health: \" + Math.round(this.gameModel.zombieHealthPCMod * 100) + \"%\";\n      case this.types.golemDamagePC:\n        return \"Golem Damage: \" + Math.round(this.gameModel.golemDamagePCMod * 100) + \"%\";\n      case this.types.golemHealthPC:\n        return \"Golem Health: \" + Math.round(this.gameModel.golemHealthPCMod * 100) + \"%\";\n      case this.types.startingPC:\n        return Math.round(this.gameModel.startingResources * 500) + \" blood, \" + Math.round(this.gameModel.startingResources * 50) + \" brains, \" + Math.round(this.gameModel.startingResources * 200) + \" bones\";\n      case this.types.unlockSpell:\n        return this.currentRank(upgrade) > 0 ? \"You have learned this spell\" : \"You have yet to learn this spell\";\n      case this.types.energyCost:\n        return \"Zombie Cost: \" + this.gameModel.zombieCost + \" energy\";\n      case this.types.burningSpeedPC:\n        return \"Burning zombie speed: \" + Math.round(this.gameModel.burningSpeedMod * 100) + \"%\";\n      case this.types.blastHealing:\n        return \"Plague heal: \" + Math.round(this.gameModel.blastHealing * 100) + \"%\";\n      case this.types.spitDistance:\n        return \"Zombie spit distance: \" + this.gameModel.spitDistance;\n      case this.types.plagueArmor:\n        return \"Infected damage reduction: \" + Math.round(100 - (this.gameModel.plagueDmgReduction * 100)) + \"%\";\n      case this.types.monsterLimit:\n        return \"Creature limit: \" + this.gameModel.creatureLimit;\n      case this.types.runicSyphon:\n        return \"Syphon amount: \" + Math.round(this.gameModel.runicSyphon.percentage * 100) + \"%\";\n      case this.types.autoconstruction:\n        return this.currentRank(upgrade) > 0 ? \"You have unlocked automatic construction\" : \"You have yet to unlock automatic construction\";\n      case this.types.autoshop:\n        return this.currentRank(upgrade) > 0 ? \"You have unlocked automatic shop purchases\" : \"You have yet to unlock automatic shop purchases\";\n      case this.types.graveyardHealth:\n        return \"Graveyard health: \" + Math.round(this.gameModel.graveyardHealthMod * 100) + \"%\";\n      // case this.types.gigazombies:\n        // return this.currentRank(upgrade) > 0 ? \"You have unlocked more gigazombies\" : \"You have yet to unlock more gigazombies\";\n      case this.types.harpySpeed:\n        return \"Harpy speed: \" + formatWhole(this.gameModel.harpySpeed);\n      case this.types.harpyBombs:\n        return \"Harpy bombs: \" + formatWhole(this.gameModel.harpyBombs);\n      case this.types.tankBuster:\n        return this.currentRank(upgrade) > 0 ? \"You have unlocked tank buster\" : \"You have yet to unlock tank buster\";\n      case this.types.spikeDelay:\n        return \"Current spike delay: \" + (5 - this.currentRank(upgrade)) + \" seconds\";\n    }\n  }\n\n  currentRank(upgrade : Upgrade) : number {\n    for (let i = 0; i < this.gameModel.persistentData.upgrades.length; i++) {\n      const ownedUpgrade = this.gameModel.persistentData.upgrades[i];\n      if (upgrade.id == ownedUpgrade.id) {\n        return ownedUpgrade.rank;\n      }\n    }\n    return 0;\n  }\n\n  currentRankConstruction(upgrade : Construction) : number {\n    if (this.gameModel.persistentData.constructions)\n      for (let i = 0; i < this.gameModel.persistentData.constructions.length; i++) {\n        const ownedUpgrade = this.gameModel.persistentData.constructions[i];\n        if (upgrade.id == ownedUpgrade.id) {\n          return ownedUpgrade.rank;\n        }\n      }\n    return 0;\n  }\n\n  upgradePrice(upgrade : Upgrade) : number {\n    return Math.round(upgrade.basePrice * Math.pow(upgrade.multiplier, this.currentRank(upgrade)));\n  }\n\n  upgradeMaxAffordable(upgrade : Upgrade) : number {\n    const currentRank = this.currentRank(upgrade);\n    let maxAffordable = 0;\n    switch(upgrade.costType) {\n      case this.costs.blood:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multiplier, currentRank, this.gameModel.persistentData.blood);\n        break;\n      case this.costs.brains:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multiplier, currentRank, this.gameModel.persistentData.brains);\n        break;\n      case this.costs.bones:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multiplier, currentRank, this.gameModel.persistentData.bones);\n        break;\n      case this.costs.parts:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multiplier, currentRank, this.gameModel.persistentData.parts);\n        break;\n      case this.costs.prestigePoints:\n        maxAffordable = getMaxUpgrades(upgrade.basePrice, upgrade.multiplier, currentRank, this.gameModel.persistentData.prestigePointsToSpend);\n        break;\n    }\n    if (upgrade.cap != 0) {\n      return Math.min(maxAffordable, upgrade.cap - currentRank);\n    }\n    return maxAffordable;\n  }\n\n  upgradeMaxPrice(upgrade : Upgrade, number : number) : number {\n    return getCostForUpgrades(upgrade.basePrice, upgrade.multiplier, this.currentRank(upgrade), number);\n  }\n\n  canAffordUpgrade(upgrade : Upgrade) : boolean {\n    if (upgrade.cap > 0 && this.currentRank(upgrade) >= upgrade.cap) {\n      upgrade.auto = false;\n      return false;\n    }\n    switch(upgrade.costType) {\n      case this.costs.energy:\n        return this.gameModel.energy >= this.upgradePrice(upgrade);\n      case this.costs.blood:\n        return this.gameModel.persistentData.blood >= this.upgradePrice(upgrade);\n      case this.costs.brains:\n        return this.gameModel.persistentData.brains >= this.upgradePrice(upgrade);\n      case this.costs.bones:\n        return this.gameModel.persistentData.bones >= this.upgradePrice(upgrade);\n      case this.costs.parts:\n        return this.gameModel.persistentData.parts >= this.upgradePrice(upgrade);\n      case this.costs.prestigePoints:\n        return this.gameModel.persistentData.prestigePointsToSpend >= this.upgradePrice(upgrade);\n    }\n    return false;\n  }\n\n  constructionLeadsTo(construction : Construction) : string {\n    let text = this.constructionUpgrades.filter(upgrade => upgrade.requires == construction.id).map(upgrade => upgrade.name).join(\", \");\n    text += this.upgrades.filter(upgrade => upgrade.requires == construction.id).map(upgrade => upgrade.name).join(\", \");\n    return text;\n  }\n\n  purchaseMaxUpgrades(upgrade : Upgrade) : void {\n    const amount = this.upgradeMaxAffordable(upgrade);\n    for (let i = 0; i < amount; i++) {\n      this.purchaseUpgrade(upgrade, false);\n    }\n    this.gameModel.saveData();\n  }\n\n  purchaseUpgrade(upgrade : Upgrade, save = true) : void {\n    if (this.canAffordUpgrade(upgrade)) {\n      let prestige = false;\n      switch(upgrade.costType) {\n        case this.costs.energy:\n          this.gameModel.energy -= this.upgradePrice(upgrade);\n          break;\n        case this.costs.blood:\n          this.gameModel.persistentData.blood -= this.upgradePrice(upgrade);\n          break;\n        case this.costs.brains:\n          this.gameModel.persistentData.brains -= this.upgradePrice(upgrade);\n          break;\n        case this.costs.bones:\n          this.gameModel.persistentData.bones -= this.upgradePrice(upgrade);\n          break;\n        case this.costs.prestigePoints:\n          prestige = true;\n          this.gameModel.persistentData.prestigePointsToSpend -= this.upgradePrice(upgrade);\n          break;\n        case this.costs.parts:\n          this.gameModel.persistentData.parts -= this.upgradePrice(upgrade);\n          break;\n      }\n      let ownedUpgrade;\n      for (let i = 0; i < this.gameModel.persistentData.upgrades.length; i++) {\n        if (upgrade.id == this.gameModel.persistentData.upgrades[i].id) {\n          ownedUpgrade = true;\n          this.gameModel.persistentData.upgrades[i] = {\n            id : upgrade.id,\n            rank : this.gameModel.persistentData.upgrades[i].rank + 1\n          };\n          if (prestige) {\n            this.gameModel.persistentData.upgrades[i].costType = this.costs.prestigePoints;\n          }\n          break;\n        }\n      }\n      if (!ownedUpgrade) {\n        const persistUpgrade = {\n          id:upgrade.id,\n          rank:1,\n          costType : null\n        };\n        if (prestige) {\n          persistUpgrade.costType = this.costs.prestigePoints;\n        }\n        this.gameModel.persistentData.upgrades.push(persistUpgrade);\n      }\n        \n      \n      if (save)\n        this.gameModel.saveData();\n\n      this.applyUpgrades();\n      if (upgrade.purchaseMessage) {\n        this.gameModel.sendMessage(upgrade.purchaseMessage);\n      }\n    }\n  }\n\n  constructionStates = {\n    building:\"building\",\n    paused:\"paused\",\n    autoPaused:\"autoPaused\"\n  }\n\n  constructionTickTimer = 1;\n\n  consumeResources(costPerTick : {blood:number, brains:number, bones:number, parts:number, energy:number}) : boolean {\n    // check for full availablity first\n    let hasEnough = true;\n    this.gameModel.persistentData.currentConstruction.shortfall = {};\n    if (costPerTick.energy && costPerTick.energy > this.gameModel.energy) {\n      hasEnough = false;\n      this.gameModel.persistentData.currentConstruction.shortfall.energy = true;\n    } \n    if (costPerTick.blood && costPerTick.blood > this.gameModel.persistentData.blood) {\n      hasEnough = false;\n      this.gameModel.persistentData.currentConstruction.shortfall.blood = true;\n    }\n    if (costPerTick.brains && costPerTick.brains > this.gameModel.persistentData.brains) {\n      hasEnough = false;\n      this.gameModel.persistentData.currentConstruction.shortfall.brains = true;\n    } \n    if (costPerTick.bones && costPerTick.bones > this.gameModel.persistentData.bones) {\n      hasEnough = false;\n      this.gameModel.persistentData.currentConstruction.shortfall.bones = true;\n    }\n    if (costPerTick.parts && costPerTick.parts > this.gameModel.persistentData.parts) {\n      hasEnough = false;\n      this.gameModel.persistentData.currentConstruction.shortfall.parts = true;\n    }\n    if (!hasEnough)\n      return false;\n\n    this.gameModel.persistentData.currentConstruction.shortfall = false;\n    // then consume\n    if (costPerTick.energy)\n      this.gameModel.energy -= costPerTick.energy;\n    if (costPerTick.blood)\n      this.gameModel.persistentData.blood -= costPerTick.blood;\n    if (costPerTick.brains)\n      this.gameModel.persistentData.brains -= costPerTick.brains;\n    if (costPerTick.bones)\n      this.gameModel.persistentData.bones -= costPerTick.bones;\n    if (costPerTick.parts)\n      this.gameModel.persistentData.parts -= costPerTick.parts;\n    return true;\n  }\n\n  angularModel = null;\n\n  completeConstruction() : void {\n    const upgrade = this.constructionUpgrades.filter(upgrade => upgrade.id == this.gameModel.persistentData.currentConstruction.id)[0];\n    let ownedUpgrade;\n    for (let i = 0; i < this.gameModel.persistentData.constructions.length; i++) {\n      if (upgrade.id == this.gameModel.persistentData.constructions[i].id) {\n        ownedUpgrade = this.gameModel.persistentData.constructions[i];\n        ownedUpgrade.effect = upgrade.effect;\n        ownedUpgrade.rank++;\n      }\n    }\n    if (!ownedUpgrade)\n      this.gameModel.persistentData.constructions.push({\n        id:upgrade.id,\n        name:upgrade.name,\n        rank:1,\n        type:upgrade.type,\n        effect:upgrade.effect\n      });\n    this.gameModel.persistentData.currentConstruction = false;\n    this.gameModel.saveData();\n    this.applyUpgrades();\n    this.angularModel.updateConstructionUpgrades();\n    this.gameModel.sendMessage(\"Construction of \" + upgrade.name + \" complete!\");\n    if (upgrade.completeMessage) {\n      this.gameModel.sendMessage(upgrade.completeMessage);\n    }\n  }\n\n  updateAutoUpgrades() : void {\n    if (this.gameModel.autoUpgrades) {\n      for (let i = 0; i < this.upgrades.length; i++) {\n        if (this.upgrades[i].auto) {\n          this.purchaseUpgrade(this.upgrades[i], false);\n        }\n      }\n      if (this.gameModel.constructions.factory) {\n        for (let i = 0; i < this.partFactory.generators.length; i++) {\n          if (this.partFactory.generators[i].auto) {\n            this.partFactory.purchaseGenerator(this.partFactory.generators[i], false);\n          }\n        }\n      }\n    }\n    if (this.gameModel.autoShatter) {\n      this.doShatter();\n    }\n  }\n\n  updateConstruction(timeDiff : number) : void {\n    if ((!this.gameModel.persistentData.currentConstruction && !this.gameModel.autoconstruction) || this.gameModel.persistentData.currentConstruction.state == this.constructionStates.paused)\n      return;\n    \n    if (this.gameModel.persistentData.currentConstruction) {\n      this.constructionTickTimer -= timeDiff;\n      if (this.constructionTickTimer < 0) {\n        this.constructionTickTimer = 1;\n        if(this.consumeResources(this.gameModel.persistentData.currentConstruction.costPerTick)) {\n          this.gameModel.persistentData.currentConstruction.state = this.constructionStates.building;\n          this.gameModel.persistentData.currentConstruction.timeRemaining -= 1;\n          if (this.gameModel.persistentData.currentConstruction.timeRemaining <= 0) {\n            this.completeConstruction();\n          }\n        } else {\n          this.gameModel.persistentData.currentConstruction.state = this.constructionStates.autoPaused;\n        }\n      }\n    } else if(this.gameModel.autoconstruction) {\n      const upgrades = this.getAvailableConstructions();\n      if (!upgrades || upgrades.length == 0) {\n        this.gameModel.autoconstruction = false;\n        return;\n      }\n      let cheapestUpgrade = null;\n      let lowestCost = 0;\n      for (let i = 0; i < upgrades.length; i++) {\n        const cost = (upgrades[i].costs.energy || 0) + (upgrades[i].costs.blood || 0) + (upgrades[i].costs.brains || 0) + (upgrades[i].costs.bones || 0) + ((upgrades[i].costs.parts || 0) * 100);\n        if (cost < lowestCost || !cheapestUpgrade) {\n          lowestCost = cost;\n          cheapestUpgrade = upgrades[i];\n        }\n      }\n      if (cheapestUpgrade) {\n        setTimeout(() => this.startConstruction(cheapestUpgrade));\n      }\n    }\n  }\n\n  startConstruction(upgrade : Construction) : void {\n    if (this.gameModel.persistentData.currentConstruction)\n      return;\n\n    const fastMode = this.gameModel.persistentData.blood >= (upgrade.costs.blood || 0) \n                && this.gameModel.persistentData.brains >= (upgrade.costs.brains || 0)\n                && this.gameModel.persistentData.bones >= (upgrade.costs.bones || 0)\n                && this.gameModel.persistentData.parts >= (upgrade.costs.parts || 0)\n                && this.gameModel.energy >= (upgrade.costs.energy || 0);\n    \n    const costPerTick = {\n      energy : 0, blood : 0, brains : 0, bones : 0, parts : 0\n    };\n    if (upgrade.costs.energy)\n      costPerTick.energy = upgrade.costs.energy / (fastMode ? 5 : upgrade.time);\n    if (upgrade.costs.blood)\n      costPerTick.blood = upgrade.costs.blood / (fastMode ? 5 : upgrade.time);\n    if (upgrade.costs.brains)\n      costPerTick.brains = upgrade.costs.brains / (fastMode ? 5 : upgrade.time);\n    if (upgrade.costs.bones)\n      costPerTick.bones = upgrade.costs.bones / (fastMode ? 5 : upgrade.time);\n    if (upgrade.costs.parts)\n      costPerTick.parts = upgrade.costs.parts / (fastMode ? 5 : upgrade.time);\n\n    this.gameModel.persistentData.currentConstruction = {\n      state:this.constructionStates.building,\n      name:upgrade.name,\n      id:upgrade.id,\n      timeRemaining:(fastMode ? 5 : upgrade.time),\n      time:(fastMode ? 5 : upgrade.time),\n      costPerTick:costPerTick\n    }\n  }\n\n  playPauseConstruction() : void {\n    if (!this.gameModel.persistentData.currentConstruction)\n      return;\n\n    if (this.gameModel.persistentData.currentConstruction.state == this.constructionStates.paused) {\n      this.gameModel.persistentData.currentConstruction.state = this.constructionStates.building\n    } else {\n      this.gameModel.persistentData.currentConstruction.state = this.constructionStates.paused\n    }\n  }\n\n  cancelConstruction() : void {\n    this.gameModel.persistentData.currentConstruction = false;\n  }\n\n  constructionAvailable(construction : Construction) : boolean {\n    if (this.gameModel.persistentData.currentConstruction && this.gameModel.persistentData.currentConstruction.id == construction.id)\n      return false;\n\n    if (this.currentRankConstruction(construction) >= construction.cap)\n      return false;\n\n    if (construction.requires && this.gameModel.persistentData.constructions.filter(built => built.id == construction.requires).length == 0)\n      return false;\n    \n    return true;\n  }\n\n  constructionComplete(construction : Construction) : boolean {\n    return this.currentRankConstruction(construction) >= construction.cap;\n  }\n\n  getAvailableConstructions() : Construction[] {\n    return this.constructionUpgrades.filter(construction => this.constructionAvailable(construction));\n  }\n\n  getCompletedConstructions() : Construction[] {\n    return this.constructionUpgrades.filter(construction => this.constructionComplete(construction));\n  }\n\n  upgradeIdCheck() : void {\n    const ids = [];\n    this.upgrades.forEach(function(upgrade) {\n      if (ids[upgrade.id]) {\n        console.error(\"ID \" + upgrade.id + \" already used\");\n      }\n      ids[upgrade.id] = true;\n    });\n    this.prestigeUpgrades.forEach(function(upgrade) {\n      if (ids[upgrade.id]) {\n        console.error(\"ID \" + upgrade.id + \" already used\");\n      }\n      ids[upgrade.id] = true;\n    });\n    this.constructionUpgrades.forEach(function(upgrade) {\n      if (ids[upgrade.id]) {\n        console.error(\"ID \" + upgrade.id + \" already used\");\n      }\n      ids[upgrade.id] = true;\n    });\n  }\n\n  runeCalculations = [\n    {\n      rune: \"death\",\n      effect : \"attackSpeed\",\n      cost: \"blood\",\n      logBase : 1.6,\n      adjustment : -13,\n      subtract : true,\n      cap : 0.8\n    },\n    {\n      rune: \"death\",\n      effect : \"critChance\",\n      cost: \"brains\",\n      logBase : 1.3,\n      adjustment : -20,\n      cap : 0.8\n    },\n    {\n      rune: \"death\",\n      effect : \"critDamage\",\n      cost: \"bones\",\n      logBase : 1.03,\n      adjustment : -200,\n      cap : 0\n    },\n    {\n      rune: \"life\",\n      effect : \"damageReduction\",\n      cost: \"blood\",\n      logBase : 1.5,\n      adjustment : -15,\n      subtract : true,\n      cap : 0.8\n    },\n    {\n      rune: \"life\",\n      effect : \"healthRegen\",\n      cost: \"brains\",\n      logBase : 2.9,\n      adjustment : -5.5,\n      cap : 0.5\n    },\n    {\n      rune: \"life\",\n      effect : \"damageReflection\",\n      cost: \"bones\",\n      logBase : 1.24,\n      adjustment : -30,\n      cap : 1\n    }\n  ];\n\n  updateRunicSyphon(runicSyphon : {blood:number, brains:number, bones:number, percentage:number}) : void {\n    if (runicSyphon.percentage > 0) {\n      this.gameModel.persistentData.runes.life.blood += runicSyphon.blood / 2;\n      this.gameModel.persistentData.runes.death.blood += runicSyphon.blood / 2;\n      this.gameModel.persistentData.runes.life.brains += runicSyphon.brains / 2;\n      this.gameModel.persistentData.runes.death.brains += runicSyphon.brains / 2;\n      this.gameModel.persistentData.runes.life.bones += runicSyphon.bones / 2;\n      this.gameModel.persistentData.runes.death.bones += runicSyphon.bones / 2;\n      runicSyphon.blood = 0;\n      runicSyphon.brains = 0;\n      runicSyphon.bones = 0;\n      this.updateRuneEffects();\n    }\n  }\n\n  shatterPercent(rune : Rune) : number {\n    const amountRequired = 100000000 * Math.pow(1.5,this.gameModel.persistentData.runeshatter);\n    return Math.floor(Math.min(1,rune.blood / amountRequired) * 100);\n  }\n\n  shatterBloodCost(rune : Rune) : number {\n    return Math.max(0,(100000000 * Math.pow(1.5,this.gameModel.persistentData.runeshatter)) - rune.blood);\n  }\n\n  shatterEffect() : number {\n    return Math.pow(1.1, this.gameModel.persistentData.runeshatter);\n  }\n\n  canShatter() : boolean {\n    if (!this.gameModel.persistentData.runes) return false;\n    return this.shatterPercent(this.gameModel.persistentData.runes.life) + this.shatterPercent(this.gameModel.persistentData.runes.death) == 200;\n  }\n\n  doShatter() : void {\n    if (this.canShatter()) {\n      this.gameModel.persistentData.runeshatter++;\n      this.gameModel.persistentData.runes.life.blood = 0;\n      this.gameModel.persistentData.runes.death.blood = 0;\n      this.gameModel.persistentData.runes.life.brains = 0;\n      this.gameModel.persistentData.runes.death.brains = 0;\n      this.gameModel.persistentData.runes.life.bones = 0;\n      this.gameModel.persistentData.runes.death.bones = 0;\n      this.updateRuneEffects();\n      this.applyUpgrades();\n    }\n  }\n\n  infuseRune(runeType : string, costType : string, amount : number) : void {\n    const rune = runeType == \"life\" ? this.gameModel.persistentData.runes.life : this.gameModel.persistentData.runes.death;\n    switch(costType) {\n      case \"blood\":\n        if (this.gameModel.persistentData.blood >= amount) {\n          rune.blood += amount;\n          this.gameModel.persistentData.blood -= amount;\n        }\n        break;\n      case \"brains\":\n        if (this.gameModel.persistentData.brains >= amount) {\n          rune.brains += amount;\n          this.gameModel.persistentData.brains -= amount;\n        }\n        break;\n      case \"bones\":\n        if (this.gameModel.persistentData.bones >= amount) {\n          rune.bones += amount;\n          this.gameModel.persistentData.bones -= amount;\n        }\n        break;\n    }\n    this.updateRuneEffects();\n  }\n\n  updateRuneEffects() : void {\n    if (!this.gameModel.persistentData.runes)\n      return;\n\n    const runeEffects = {\n      attackSpeed : 1,\n      critChance : 0,\n      critDamage : 0,\n      damageReduction : 1,\n      healthRegen : 0,\n      damageReflection : 0\n    };\n\n    for (let i = 0; i < this.runeCalculations.length; i++) {\n      const calculation = this.runeCalculations[i];\n      const infusionAmount = this.gameModel.persistentData.runes[calculation.rune][calculation.cost];\n      if (infusionAmount > 0) {\n        let result = (Math.log(infusionAmount) / Math.log(calculation.logBase) + calculation.adjustment) / 100;\n        if (result > 0) {\n          if (calculation.cap && result > calculation.cap) {\n            result = calculation.cap;\n          }\n          if (calculation.subtract) {\n            runeEffects[calculation.effect] -= result;\n          } else {\n            runeEffects[calculation.effect] += result;\n          }\n        }\n      }\n    }\n    this.gameModel.runeEffects = runeEffects;\n  }\n\n  constructionTypes = {\n    graveyard : \"graveyard\",\n    crypt : \"crypt\",\n    fort : \"fort\",\n    fortress : \"fortress\",\n    citadel : \"citadel\",\n    fence : \"fence\",\n    fenceSize : \"fenceSize\",\n    plagueWorkshop : \"plagueWorkshop\",\n    plagueLaboratory : \"plagueLaboratory\",\n    plagueSpikes : \"plagueSpikes\",\n    spellTower : \"spellTower\",\n    runesmith : \"runesmith\",\n    aviary : \"aviary\",\n    zombieCage : \"zombieCage\",\n    partFactory : \"partFactory\",\n    monsterFactory : \"monsterFactory\",\n    pit : \"pit\",\n    harpy : \"harpy\"\n  }\n\n  constructionUpgrades = [\n    new Construction(201, \"Cursed Graveyard\", this.constructionTypes.graveyard, {blood:1800}, 30, 1, 1, 1, null, \"Construct a Cursed Graveyard in the town that will automatically spawn zombies when your energy is at its maximum!\", \"Graveyard menu now available!\"),\n    new Construction(205, \"Crypt\", this.constructionTypes.crypt, {blood:21000, bones:2220}, 60, 1, 1, 1, 201, \"Construct a Crypt in your graveyard. This will give you a nice dark and quiet place to think. The additional space will also allow you to store 50% more blood and brains!\", null),\n    new Construction(206, \"Bone Fort\", this.constructionTypes.fort, {blood:60000, bones:6000, energy:60}, 60, 1, 1, 1, 205, \"Turn your crypt into a fort. The additional space will also allow you to store 60% more blood and brains.\", \"New upgrades are available in the shop!\"),\n    new Construction(207, \"Bone Fortress\", this.constructionTypes.fortress, {blood:100000, bones:9000, energy:90}, 60, 1, 1, 1, 206, \"Turn your fort into a fortress. The additional space will also allow you to store 70% more blood and brains.\", null),\n    new Construction(211, \"Bone Citadel\", this.constructionTypes.citadel, {blood:200000, bones:12000, energy:120}, 60, 1, 1, 1, 207, \"Turn your fortress into a towering citadel that looms over the town. The additional space will also allow you to store 80% more blood and brains.\",\"New upgrades are available in the shop!\"),\n    new Construction(202, \"Perimeter Fence\", this.constructionTypes.fence, {bones:880, energy:22}, 44, 1, 1, 1, 201, \"Build a protective fence around the graveyard that will reduce damage taken by zombies inside by 50%.\", null),\n    new Construction(203, \"Bigger Fence\", this.constructionTypes.fenceSize, {bones:880, energy:22}, 44, 1, 10, 4, 202, \"Enlarge the fence so a greater area is protected.\", null),\n    new Construction(204, \"Plague Workshop\", this.constructionTypes.plagueWorkshop, {blood:10200, brains:600}, 60, 1, 1, 1, 205, \"Build a laboratory to study the effects of plague. This will unlock new upgrades in the shop.\", \"Plague upgrades now available!\"),\n    new Construction(208, \"Plague Spikes\", this.constructionTypes.plagueSpikes, {brains:3000, bones:1000}, 30, 1, 1, 1, 204, \"Booby trap the area around your graveyard with cruel spikes that infect trespassing humans with the plague.\", null),\n    new Construction(209, \"Spell Tower\", this.constructionTypes.spellTower, {brains:3000, blood:30000}, 30, 1, 1, 1, 206, \"Dedicate one tower of your fort to the study of spellcraft. Perhaps you can learn some new spells?\", \"Spells now available in the shop!\"),\n    new Construction(210, \"Runesmith\", this.constructionTypes.runesmith, {bones:3000, blood:120000, brains:1000}, 30, 1, 1, 1, 207, \"Build a runesmith's workshop in order to fortify your zombies with powerful runes.\", null),\n    new Construction(212, \"Accursed Aviary\", this.constructionTypes.aviary, {bones:6000, blood:220000, brains:2000}, 60, 1, 1, 1, 211, \"Construct an aviary on top of your citadel so you can release wicked harpies to bomb the townspeople.\", \"Harpies available for hire in the graveyard menu\"),\n    new Construction(213, \"Zombie Cage\", this.constructionTypes.zombieCage, {bones:600, blood:900}, 30, 1, 5, 1, 201, \"Build a cage to contain surplus zombies once a town is defeated.\", null),\n    new Construction(214, \"Second Zombie Cage\", this.constructionTypes.zombieCage, {bones:1200, blood:1800}, 30, 1, 10, 1, 205, \"Build an additional cage to contain surplus zombies once a town is defeated.\", null),\n    new Construction(215, \"Third Zombie Cage\", this.constructionTypes.zombieCage, {bones:1800, blood:2700}, 30, 1, 10, 1, 206, \"Build an additional cage to contain surplus zombies once a town is defeated.\", null),\n    new Construction(216, \"Fourth Zombie Cage\", this.constructionTypes.zombieCage, {bones:2400, blood:3600}, 30, 1, 10, 1, 207, \"Build an additional cage to contain surplus zombies once a town is defeated.\", null),\n    new Construction(217, \"Fifth Zombie Cage\", this.constructionTypes.zombieCage, {bones:3000, blood:4500}, 30, 1, 15, 1, 211, \"Build an additional cage to contain surplus zombies once a town is defeated.\", null),\n    new Construction(218, \"Plague Laboratory\", this.constructionTypes.plagueLaboratory, {brains:25000, blood:million}, 50, 1, 1, 1, 211, \"Expand the plague workshop into a well equipped laboratory in order to unlock additional plague upgrades.\", null),\n    new Construction(219, \"Part Factory\", this.constructionTypes.partFactory, {brains:35000, blood:15 * million}, 50, 1, 1, 1, 218, \"Build a factory to create parts that can be used to construct more powerful beings for your army.\", \"Factory menu now available!\"),\n    new Construction(220, \"Creature Factory\", this.constructionTypes.monsterFactory, {brains:45000, blood:40 * million}, 50, 1, 1, 1, 219, \"Build a factory to turn creature parts into living entities of destruction\", \"Creatures now available in factory menu!\"),\n    new Construction(221, \"Bottomless Pit\", this.constructionTypes.pit, {bones:75000, parts:5 * million}, 50, 1, 1, 10, 219, \"A bottomless pit with walls made from creature parts. Drastically increases your capacity to store blood and brains.\", null),\n    new Construction(222, \"Harpy Outfitter\", this.constructionTypes.harpy, {bones:75000, brains:75000, blood:80 * million}, 50, 1, 1, 1, 220, \"Build an outfitter to upgrade the abilities of your harpies.\", \"Harpy upgrades now available in the shop!\")\n  ];\n\n  upgrades = [\n    // blood upgrades\n    new Upgrade(1, \"Bloodthirst\", this.types.damage, this.costs.blood, 50, 1.2, 1, 40, \"Your zombies thirst for blood and do +1 damage for each rank of Bloodthirst.\", null, null),\n    new Upgrade(9, \"Sharpened Teeth\", this.types.damage, this.costs.blood, 3000, 1.23, 3, 50, \"Your zombies bites do +3 damage with each rank of Sharpened Teeth.\", null, 206),\n    new Upgrade(11, \"Razor Claws\", this.types.damage, this.costs.blood, 28000, 1.25, 5, 0, \"Your zombies attacks do +5 damage with each rank of Razor Claws.\", null, 211),\n    new Upgrade(16, \"Killer Instinct\", this.types.damage, this.costs.blood, 1000000, 1.27, 8, 0, \"Your zombies attacks do +8 damage with each rank of Killer Instinct.\", null, 220),\n    new Upgrade(2, \"Like Leather\", this.types.health, this.costs.blood, 100, 1.2, 10, 40, \"Your zombies gain tougher skin and +10 health with each rank.\", null, null),\n    new Upgrade(10, \"Thick Skull\", this.types.health, this.costs.blood, 5000, 1.23, 25, 50, \"Your zombies gain +25 health with each rank.\", null, 206),\n    new Upgrade(12, \"Battle Hardened\", this.types.health, this.costs.blood, 32000, 1.25, 40, 0, \"Your zombies gain +40 health with each rank of Battle Hardened.\", null, 211),\n    new Upgrade(17, \"Tough as Nails\", this.types.health, this.costs.blood, 1000000, 1.27, 100, 0, \"Your zombies gain +100 health with each rank of Tough as Nails.\", null, 220),\n    new Upgrade(3, \"Cold Storage\", this.types.brainsCap, this.costs.blood, 150, 1.2, 50, 20, \"Turns out you can use all of your spare blood to store brains and keep them fresh. Each rank increases your maximum brain capacity by 50.\", null, null),\n    new Upgrade(4, \"Recycling is Cool\", this.types.brainRecoverChance, this.costs.blood, 1000, 1.2, 0.1, 10, \"Why are we wasting so many good brains on this project? Each rank increases your chance to get a brain back from a dead zombie by 10%\", null, null),\n    new Upgrade(5, \"Your Soul is Mine!\", this.types.riseFromTheDeadChance, this.costs.blood, 1500, 1.4, 0.1, 10, \"Using your most powerful blood magic you command the bodies of the dead to rise as your servants! Each rank grants 10% chance that dead humans will turn into zombies.\", null, null),\n    new Upgrade(6, \"Infected Bite\", this.types.infectedBite, this.costs.blood, 3500, 1.4, 0.1, 10, \"Your zombies are now infected with plague and could infect their victims too. Each rank adds 10% chance to inflict damage over time when a zombie attacks a target.\", null, 204),\n    new Upgrade(7, \"Detonate\", this.types.unlockSpell, this.costs.blood, 25000, 1, 3, 1, \"Learn the Detonate spell which can explode all of your zombies into a cloud of plague. Not exactly sure how useful that will be.\", \"New spell learned, Detonate!\", 209),\n    new Upgrade(8, \"Gigazombies?\", this.types.unlockSpell, this.costs.blood, 50000, 1, 5, 1, \"Learn the Gigazombies spell which will turn some of your zombies into hulking monstrosities with increased health and damage.\", \"New spell learned, Gigazombies!\", 209),\n    new Upgrade(13, \"Blazing Speed\", this.types.burningSpeedPC, this.costs.blood, 30000, 1.25, 0.05, 10, \"The humans are using torches to set your zombies on fire. Perhaps we can turn the tables on them? Each rank increases the movement and attack speed of burning zombies by 5%\", null, 207),\n    new Upgrade(14, \"Spit it Out\", this.types.spitDistance, this.costs.blood, 500000, 1.6, 5, 10, \"The first rank gives your zombies the ability to spit plague at enemies beyond normal attack range. Spit attacks do 50% zombie damage and infect the victim with plague. Subsequent ranks will increase the range of spit attacks.\", null, 218),\n    new Upgrade(15, \"Runic Syphon\", this.types.runicSyphon, this.costs.blood, 34000, 1.9, 0.01, 10, \"Infuse your runes for free! Each rank gives your Runesmith the ability to infuse 1% of your resource income, without consuming it. Additionally when blood and brains reach their storage limit, any additional resources will be infused automatically.\", null, 210),\n    // new Upgrades.Upgrade(18, \"More Gigazombies\", this.types.gigazombies, this.costs.blood, 100000000, 1.27, 1, 1, \"We need more gigazombies! This will unlock the ability for all zombies to be gigazombies. They gain health and damage but the energy cost also increases. This can be toggled in the graveyard.\", false, 220),\n    new Upgrade(19, \"Faster Harpies\", this.types.harpySpeed, this.costs.blood, 100 * million, 1.07, 2, 20, \"These harpies are way too slow! We have to make them faster. Each rank increases harpy speed by 2\", null, 222),\n  \n    // brain upgrades\n    new Upgrade(20, \"Energy Rush\", this.types.energyRate, this.costs.brains, 20, 1.8, 0.5, 20, \"Melting brains down in your cauldron to make smoothies can be beneficial for your health. It also increases your energy rate by 0.5 per second for each rank.\", null, null),\n    new Upgrade(21, \"Master Summoner\", this.types.energyCap, this.costs.brains, 10, 1.5, 5, 20, \"All the brains you harvested have proved fruitful in your experiments. Each rank raises your maximum energy by 5.\", null, null),\n    new Upgrade(22, \"Primal Reflexes\", this.types.speed, this.costs.brains, 5, 1.6, 1, 20, \"The zombies retain more of their human agility increasing run speed by 1 for each rank.\", null, null),\n    new Upgrade(23, \"Blood Harvest\", this.types.bloodStoragePC, this.costs.brains, 50, 1.12, 0.1, 0, \"All this brain power has enabled you to devise some superior blood storage methods. Each rank increases your maximum blood by 10%.\", null, null),\n    new Upgrade(24, \"Unholy Construction\", this.types.construction, this.costs.brains, 25, 1, 1, 1, \"Learn the art of Unholy Construction in order to build structures that will solidify your foothold on the town.\", \"Construction menu now available!\", null),\n    new Upgrade(25, \"Infected Corpse\", this.types.infectedBlast, this.costs.brains, 500, 1.4, 0.1, 10, \"Fill your zombies with so much plague they are ready to explode! Each rank adds 10% chance for a zombie to explode into a cloud of plague upon death.\", null, 204),\n    new Upgrade(26, \"Energy Charge\", this.types.unlockSpell, this.costs.brains, 2000, 1, 2, 1, \"Learn the Energy Charge spell which can drastically increase your energy rate for a short time.\", \"New spell learned, Energy Charge!\", 209),\n    new Upgrade(27, \"What Doesn't Kill You\", this.types.blastHealing, this.costs.brains, 10000, 1.3, 0.1, 20, \"Plague explosions from zombies and harpies will also heal nearby zombies for 10% of the explosion damage with each rank.\", null, 218),\n    new Upgrade(28, \"One is Never Enough\", this.types.monsterLimit, this.costs.brains, 20000, 1.2, 1, 15, \"We're definitely going to need more than one golem to finish the job. Each rank increases your creature limit by 1\", null, 220),\n    new Upgrade(29, \"Tank Buster\", this.types.tankBuster, this.costs.brains, 400000, 1.2, 1, 1, \"Teach your harpies some new tricks. Once bought this upgrade will make your harpies drop fire bombs on tanks during boss stages.\", null, 222),\n    new Upgrade(30, \"Improved Spikes\", this.types.spikeDelay, this.costs.brains, 800, 1.2, 1, 4, \"Each rank reduces the delay between plague spike activation by 20%\", null, 208),\n    \n    // bone upgrades\n    new Upgrade(40, \"Bone Throne\", this.types.energyCap, this.costs.bones, 50, 1.55, 10, 15, \"Sitting atop your throne of bones you can finally think clearly. Each rank increases maximum energy by 10.\", null, null),\n    new Upgrade(41, \"Crown of Bones\", this.types.energyRate, this.costs.bones, 200, 1.5, 0.2, 25, \"Not just dapper, these spikes help channel your energy. Each rank increases energy rate by 0.2 per second.\", null, null),\n    new Upgrade(42, \"Bonebarrows\", this.types.boneCollectorCapacity, this.costs.bones, 300, 1.2, 5, 20, \"Your bone collectors are struggling to carry all these bones. Maybe it's time we gave them an upgrade? Each rank increases their carrying capacity by 5.\", null, null),\n    new Upgrade(43, \"Bone Reinforced Tanks\", this.types.bloodCap, this.costs.bones, 500, 1.07, 2000, 0, \"Finally! Now that we have a solid construction material we can get to work building better storage for our other resources. Each rank increases blood storage by 2000.\", null, null),\n    new Upgrade(44, \"Brain Cage\", this.types.brainsCap, this.costs.bones, 650, 1.07, 500, 0, \"There's nothing I love more than a mind enslaved. Now we can put these brains where they belong. In cages! Each rank increases brain storage by 500.\", null, null),\n    new Upgrade(45, \"Earth Freeze\", this.types.unlockSpell, this.costs.bones, 5000, 1, 4, 1, \"Learn the Earth Freeze spell which can freeze all humans in place for a short time.\", \"New spell learned, Earth Freeze!\", 209),\n    new Upgrade(46, \"Plague Armor\", this.types.plagueArmor, this.costs.bones, 15000, 1.6, 0.02, 10, \"The best defense is a good offense? True in the case of Plague Armor which reduces the damage done by infected humans by 2% per rank.\", null, 218),\n    new Upgrade(47, \"Bulletproof\", this.types.bulletproof, this.costs.bones, 60000, 1.6, 0.05, 5, \"Craft your earth golems from much harder stone. Each rank gives them 5% chance to reflect bullets back to their source.\", null, 220),\n    new Upgrade(48, \"Bombs Away\", this.types.harpyBombs, this.costs.bones, 500000, 1.6, 1, 3, \"Upgrade your harpies so they can carry more than just one bomb at a time.\", null, 222),\n  \n    // parts upgrades\n    new Upgrade(60, \"Extra Limbs\", this.types.golemDamagePC, this.costs.parts, 900, 1.3, 0.02, 0, \"Your golems gain +2% damage with each rank of Extra Limbs.\", null, 220),\n    new Upgrade(61, \"Big Boned\", this.types.golemHealthPC, this.costs.parts, 1000, 1.31, 0.02, 0, \"Your golems gain +2% health with each rank of Big Boned.\", null, 220),\n  ];\n\n  prestigeUpgrades = [\n    new Upgrade(108, \"A Small Investment\", this.types.startingPC, this.costs.prestigePoints, 10, 1.25, 1, 0, \"Each rank gives you an additional 500 blood, 50 brains, and 200 bones when starting a new level.\", null, null),\n    new Upgrade(109, \"Time Warp\", this.types.unlockSpell, this.costs.prestigePoints, 50, 1, 1, 1, \"Unlock the Time Warp spell in order to speed up the flow of time.\", null, null),\n    new Upgrade(110, \"Master of Death\", this.types.energyCost, this.costs.prestigePoints, 1000, 1, 1, 5, \"Each rank reduces the energy cost of summoning a zombie by 1\", null, null),\n    new Upgrade(101, \"Blood Storage\", this.types.bloodStoragePC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% blood storage for each rank.\", null, null),\n    new Upgrade(102, \"Blood Rate\", this.types.bloodGainPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% blood income rate for each rank.\", null, null),\n    new Upgrade(103, \"Brain Storage\", this.types.brainsStoragePC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% brain storage for each rank.\", null, null),\n    new Upgrade(104, \"Brain Rate\", this.types.brainsGainPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% brain income rate for each rank.\", null, null),\n    new Upgrade(105, \"Bone Rate\", this.types.bonesGainPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% bones income rate for each rank.\", null, null),\n    // new Upgrades.Upgrade(106, \"Zombie Health\", this.types.zombieHealthPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% zombie health for each rank\"),\n    // new Upgrades.Upgrade(107, \"Zombie Damage\", this.types.zombieDmgPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% zombie damage for each rank\")\n    new Upgrade(111, \"Parts Rate\", this.types.partsGainPC, this.costs.prestigePoints, 10, 1.25, 0.2, 0, \"Additional 20% creature parts income rate for each rank.\", null, null),\n    new Upgrade(112, \"Auto Construction\", this.types.autoconstruction, this.costs.prestigePoints, 250, 1, 1, 1, \"Unlock the ability to automatically start construction of the cheapest available building option.\", null, null),\n    new Upgrade(114, \"Auto Shop\", this.types.autoshop, this.costs.prestigePoints, 250, 1, 1, 1, \"Unlock the ability to automatically purchase items from the shop.\", null, null),\n    new Upgrade(113, \"Graveyard Health\", this.types.graveyardHealth, this.costs.prestigePoints, 10, 1.25, 0.1, 0, \"Additional 10% graveyard health during boss levels with each rank.\", null, null),\n  ];\n}\n\ntype ConstructionCost = {\n  blood?:number;\n  brains?:number;\n  bones?:number;\n  parts?:number;\n  energy?:number;\n}\n\nclass Construction {\n  id : number;\n  name : string;\n  type : string;\n  costs : ConstructionCost;\n  time : number;\n  multiplier : number;\n  effect : number;\n  cap : number;\n  requires : number;\n  description : string;\n  completeMessage : string;\n  auto : boolean;\n\n  constructor(id : number, name : string, type : string, costs : ConstructionCost, time : number, multiplier : number, effect : number, \n      cap : number, requires : number, description : string, completeMessage : string) {\n    this.id = id;\n    this.name = name;\n    this.type = type;\n    this.costs = costs;\n    this.time = time;\n    this.multiplier = multiplier;\n    this.effect = effect;\n    this.cap = cap;\n    this.requires = requires;\n    this.description = description;\n    this.completeMessage = completeMessage;\n  }\n}\n\ntype Rune = {\n  blood:number;\n  brains:number;\n  bones:number;\n}\n\nclass Upgrade {\n  id : number;\n  name : string;\n  type : string;\n  costType : string;\n  basePrice : number;\n  multiplier : number;\n  effect : number;\n  cap : number;\n  description : string;\n  rank : number;\n  purchaseMessage : string;\n  requires : number;\n  auto : boolean;\n\n  constructor(id : number, name : string, type : string, costType : string, basePrice : number, multiplier : number, effect,\n        cap : number, description : string, purchaseMessage : string, requires) {\n    this.id = id;\n    this.name = name;\n    this.type = type;\n    this.costType = costType;\n    this.basePrice = basePrice;\n    this.multiplier = multiplier;\n    this.effect = effect;\n    this.cap = cap;\n    this.description = description;\n    this.rank = 1;\n    this.purchaseMessage = purchaseMessage;\n    this.requires = requires;\n  }\n}\n\ntype UpgradeEffect = {\n  type:string;\n  effect:number;\n}","export function magnitude(x : number, y : number) : number {\n\treturn Math.sqrt(x * x + y * y);\n}\n\nexport function distanceBetweenPoints(x1 : number, y1 : number, x2 : number, y2 : number) : number {\n  return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nexport function fastDistance(x1 : number, y1 : number, x2 : number, y2 : number) : number {\n  const dx = Math.abs(x1 - x2);\n  const dy = Math.abs(y1 - y2);\n  return 0.4 * (dx + dy) + 0.56 * Math.max(dx, dy);\n}\n\nexport function RotateVector2d(x : number, y : number, radians : number) : {x:number, y:number} {\n  return {\n      x: x * Math.cos(radians) - y * Math.sin(radians),\n      y: x * Math.sin(radians) + y * Math.cos(radians)\n  };\n}\n\nexport function getRandomElementFromArray<T>(array : T[], random : number) : T {\n  return array[Math.floor(random * array.length)];\n}\n\nexport function rgbToHex(r : number, g : number, b : number) : number {\n\treturn b | (g << 8) | (r << 16);\n}\n\nexport function format2Places(input : number) : string {\n  return formatNumber(input, 2);\n}\n\nexport function formatWhole(input : number) : string {\n  if (input > 1000) {\n    return formatNumber(input, 2);\n  }\n  return formatNumber(input, 0);\n}\n\nexport function formatNumber(input : number, decimals : number) : string {\n  if (!input) input = 0;\n  if (input >= 1000000000000000)\n    return input.toExponential(decimals).replace(\"+\",\"\");\n  if (input >= 1000000000000)\n    return (input / 1000000000000).toFixed(decimals) + 'T';\n  if (input >= 1000000000)\n    return (input / 1000000000).toFixed(decimals) + 'B';\n  if (input >= 1000000)\n    return (input / 1000000).toFixed(decimals) + 'M';\n  if (input >= 1000)\n    return (input / 1000).toFixed(decimals) + 'K';\n\n  return input.toFixed(decimals);\n}\n\nexport function getMaxUpgrades(basePrice : number, exponent : number, numberOwned : number, resourcesOwned : number) : number {\n  if (exponent == 1) {\n    return Math.floor(resourcesOwned / basePrice);\n  }\n  return Math.floor(\n    Math.log(\n      ((resourcesOwned * (exponent - 1)) / (basePrice * Math.pow(exponent, numberOwned))) + 1\n    ) / Math.log(exponent)\n  );\n}\n\nexport function getCostForUpgrades(basePrice : number, exponent : number, numberOwned : number, numberToBuy : number) : number {\n  if (exponent == 1) {\n    return basePrice * numberToBuy;\n  }\n  return basePrice * (\n    (Math.pow(exponent, numberOwned) * (Math.pow(exponent, numberToBuy) - 1)) / (exponent - 1)\n  )\n}\n\nexport function moveToolTip(event : MouseEvent, element : HTMLElement) : void {\n  const menuRect = document.getElementById(\"champ-hold\").getBoundingClientRect();\n  const x = event.clientX - menuRect.x;\n  const y = event.clientY - menuRect.y;\n  (element.getElementsByClassName(\"tooltip\")[0] as HTMLElement).style.top = (y + 20) + \"px\";\n  (element.getElementsByClassName(\"tooltip\")[0] as HTMLElement).style.left = (x + 20) + \"px\";\n}","import { Position, Wall, Building } from './classes/gameobject';\r\nimport {gameFieldSize, characterContainer, backgroundContainer, GameModel, Humans, getRandomElementFromArray, \r\n  fastDistance, rgbToHex} from './internal';\r\nimport { distanceBetweenPoints } from './utilsfunctions';\r\n\r\nexport class ZmMap {\r\n\r\n  private static instance : ZmMap;\r\n  constructor() {\r\n    if (ZmMap.instance)\r\n      return ZmMap.instance;\r\n    ZmMap.instance = this;\r\n  }\r\n\r\n  gameModel = GameModel.getInstance();\r\n  humans = new Humans();\r\n\r\n  buildings : Building[] = [];\r\n  buildingsByPopularity : Building[] = [];\r\n  buildingMap : Building[] = [];\r\n  mapCols : number;\r\n  mapRows : number;\r\n  buildingTextures : PIXI.Texture[];\r\n  roadSprite = null as PIXI.TilingSprite;\r\n  roadTexture = null as PIXI.Texture;\r\n  entranceWidth = 16;\r\n  entranceDepth = 16;\r\n  cornerDistance = 16;\r\n  minBuildings = 3;\r\n  wallWidth = 4;\r\n  graveyardCollision = null;\r\n  graveYardLocation = {x : 0, y : 0};\r\n  graveYardPosition = null;\r\n\r\n  getRandomBuilding() : Building {\r\n    return getRandomElementFromArray(this.buildingsByPopularity, Math.random());\r\n  }\r\n\r\n  roomNoOverlap(position1 : Position, position2 : Position) : boolean {\r\n    const buffer = 50;\r\n    if (position1.x > position2.x + position2.width + buffer || position1.x + position1.width + buffer < position2.x)\r\n      return true;\r\n    if (position1.y > position2.y + position2.height + buffer || position1.y + position1.height + buffer < position2.y)\r\n      return true;\r\n  }\r\n\r\n  isValidPosition(position : Position) : boolean {\r\n\r\n    if (!this.roomNoOverlap(position, this.graveYardPosition))\r\n      return false;\r\n\r\n    for (let i=0; i < this.buildings.length; i++) {\r\n      if (!this.roomNoOverlap(position, this.buildings[i]))\r\n        return false;\r\n    }\r\n\r\n    if (this.gameModel.level % 5 == 0 && !this.gameModel.isBossStage(this.gameModel.level) && position.y < this.roadSprite.y + (this.roadSprite.height / 2) && position.y + position.height > this.roadSprite.y - (this.roadSprite.height / 2)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  makeHorizontalWall(walls : Wall[], texture : PIXI.Texture, hasEntrance : boolean, x : number, y : number, width : number) : void {\r\n\r\n    if (hasEntrance) {\r\n      const wall1 = new Wall(texture);\r\n      wall1.x = x;\r\n      wall1.y = y;\r\n      wall1.width = width / 2 - this.entranceWidth;\r\n      wall1.height = 4;\r\n      walls.push(wall1);\r\n\r\n      const wall2 = new Wall(texture);\r\n      wall2.x = x + (width / 2) + this.entranceWidth;\r\n      wall2.y = y;\r\n      wall2.width = (width / 2) - this.entranceWidth;\r\n      wall2.height = 4;\r\n      walls.push(wall2);\r\n    } else {\r\n      const wall = new Wall(texture);\r\n      wall.x = x;\r\n      wall.y = y;\r\n      wall.width = width;\r\n      wall.height = 4;\r\n      walls.push(wall);\r\n    }\r\n  }\r\n\r\n  makeVerticalWall(walls : Wall[], texture : PIXI.Texture, hasEntrance : boolean, x : number, y : number, height : number) : void {\r\n\r\n    if (hasEntrance) {\r\n      const wall1 = new Wall(texture);\r\n      wall1.x = x;\r\n      wall1.y = y;\r\n      wall1.width = 4;\r\n      wall1.height = height / 2 - this.entranceWidth;\r\n      walls.push(wall1);\r\n\r\n      const wall2 = new Wall(texture);\r\n      wall2.x = x;\r\n      wall2.y = y + (height / 2) + this.entranceWidth;\r\n      wall2.width = 4;\r\n      wall2.height = (height / 2) - this.entranceWidth;\r\n      walls.push(wall2);\r\n    } else {\r\n      const wall = new Wall(texture);\r\n      wall.x = x;\r\n      wall.y = y;\r\n      wall.width = 4;\r\n      wall.height = height;\r\n      walls.push(wall);\r\n    }\r\n  }\r\n\r\n  addBuilding(poi : Building) : void {\r\n    poi.container = new PIXI.Container();\r\n    poi.floorSprite = new PIXI.TilingSprite(PIXI.Texture.WHITE);\r\n    poi.floorSprite.tint = rgbToHex(10 + Math.round(Math.random() * 50), 10 + Math.round(Math.random() * 50), 10 + Math.round(Math.random() * 50));\r\n    poi.floorSprite.alpha = 0.2;\r\n    // poi.floorSprite.x = poi.x;\r\n    // poi.floorSprite.y = poi.y;\r\n    poi.container.x = poi.x;\r\n    poi.container.y = poi.y;\r\n    poi.floorSprite.width = poi.width;\r\n    poi.floorSprite.height = poi.height;\r\n    // backgroundContainer.addChild(poi.floorSprite);\r\n    poi.container.addChild(poi.floorSprite);\r\n\r\n    const possibleEntrances = [\r\n      {\r\n        x: poi.x + poi.width / 2,\r\n        y: poi.y,\r\n        north : true,\r\n        inside : {\r\n          x: poi.x + poi.width / 2,\r\n          y: poi.y + this.entranceDepth,\r\n          entrance:true\r\n        },\r\n        outside : {\r\n          x: poi.x + poi.width / 2,\r\n          y: poi.y - this.entranceDepth,\r\n          entrance:true\r\n        }\r\n      },\r\n      {\r\n        x: poi.x + poi.width / 2,\r\n        y: poi.y + poi.height,\r\n        south : true,\r\n        inside : {\r\n          x: poi.x + poi.width / 2,\r\n          y: poi.y + poi.height - this.entranceDepth,\r\n          entrance:true\r\n        },\r\n        outside : {\r\n          x: poi.x + poi.width / 2,\r\n          y: poi.y + poi.height + this.entranceDepth,\r\n          entrance:true\r\n        }\r\n      },\r\n      {\r\n        x: poi.x,\r\n        y: poi.y + poi.height / 2,\r\n        west : true,\r\n        inside : {\r\n          x: poi.x + this.entranceDepth,\r\n          y: poi.y + poi.height / 2,\r\n          entrance:true\r\n        },\r\n        outside : {\r\n          x: poi.x - this.entranceDepth,\r\n          y: poi.y + poi.height / 2,\r\n          entrance:true\r\n        }\r\n      },\r\n      {\r\n        x: poi.x + poi.width,\r\n        y: poi.y + poi.height / 2,\r\n        east : true,\r\n        inside : {\r\n          x: poi.x + poi.width - this.entranceDepth,\r\n          y: poi.y + poi.height / 2,\r\n          entrance:true\r\n        },\r\n        outside : {\r\n          x: poi.x + poi.width + this.entranceDepth,\r\n          y: poi.y + poi.height / 2,\r\n          entrance:true\r\n        }\r\n      }\r\n    ];\r\n    let closestEntrance;\r\n    const center = {x:gameFieldSize.x / 2, y:gameFieldSize.y / 2};\r\n    let closestDistance = 2000;\r\n    for (let i = 0; i < possibleEntrances.length; i++) {\r\n      const distance = fastDistance(possibleEntrances[i].x, possibleEntrances[i].y, center.x, center.y);\r\n      if (distance < closestDistance) {\r\n        closestDistance = distance;\r\n        closestEntrance = possibleEntrances[i];\r\n      }\r\n    }\r\n    poi.entrance = closestEntrance;\r\n\r\n    if (this.gameModel.level % 5 == 0) {\r\n      if (poi.y < gameFieldSize.y / 2) {\r\n        poi.entrance = possibleEntrances.filter(e => e.south)[0];\r\n      } else {\r\n        poi.entrance = possibleEntrances.filter(e => e.north)[0];\r\n      }\r\n    }\r\n\r\n    poi.walls = [];\r\n    const wallTexture = getRandomElementFromArray(this.buildingTextures, Math.random());\r\n\r\n    this.makeHorizontalWall(poi.walls, wallTexture, poi.entrance.north, -4, -4, poi.width + 8);\r\n    this.makeHorizontalWall(poi.walls, wallTexture, poi.entrance.south, -4, poi.height, poi.width + 8);\r\n    this.makeVerticalWall(poi.walls, wallTexture, poi.entrance.west, -4, -4, poi.height + 8);\r\n    this.makeVerticalWall(poi.walls, wallTexture, poi.entrance.east, poi.width, -4, poi.height + 8);\r\n\r\n    for (let i = 0; i < poi.walls.length; i++) {\r\n      poi.container.addChild(poi.walls[i]);\r\n    }\r\n    poi.container.cacheAsBitmap = true;\r\n    backgroundContainer.addChild(poi.container);\r\n\r\n    for (let i = 0; i < poi.walls.length; i++) {\r\n      poi.walls[i].collisionX = poi.x + poi.walls[i].x;\r\n      poi.walls[i].collisionY = poi.y + poi.walls[i].y;\r\n      poi.walls[i].collisionWidth = poi.walls[i].width;\r\n      poi.walls[i].collisionHeight = poi.walls[i].height;\r\n    }\r\n  }\r\n\r\n  addCorners(building : Building) : void {\r\n    building.corners = [];\r\n    building.corners.push({ // top left\r\n      x:building.x - this.cornerDistance,\r\n      y:building.y - this.cornerDistance\r\n    });\r\n    building.corners.push({ // top right\r\n      x:building.x + building.width + this.cornerDistance,\r\n      y:building.y - this.cornerDistance\r\n    });\r\n    building.corners.push({ // bottom left\r\n      x:building.x - this.cornerDistance,\r\n      y:building.y + building.height + this.cornerDistance\r\n    });\r\n    building.corners.push({ // bottom right\r\n      x:building.x + building.width + this.cornerDistance,\r\n      y:building.y + building.height + this.cornerDistance\r\n    });\r\n  }\r\n\r\n  setGraveyardPosition() : void {\r\n    if (this.gameModel.level % 5 == 0 && !this.gameModel.isBossStage(this.gameModel.level)) {\r\n      this.graveYardPosition = {\r\n        x:(Math.random() * gameFieldSize.x * 0.8) - 50 + (gameFieldSize.x * 0.1),\r\n        y:(Math.random() > 0.5 ? gameFieldSize.y * 0.25 : gameFieldSize.y * 0.75) - 50,\r\n        width: 100, height: 100\r\n      };\r\n    } else {\r\n      this.graveYardPosition = {\r\n        x:gameFieldSize.x / 2 - 50,\r\n        y:gameFieldSize.y / 2 - 50,\r\n        width: 100, height: 100\r\n      };\r\n    }\r\n    this.graveYardLocation = {x:this.graveYardPosition.x + 50, y:this.graveYardPosition.y + 50};\r\n  }\r\n\r\n  populatePois() : void {\r\n    \r\n    this.setGraveyardPosition();\r\n\r\n    if (!this.buildingTextures) {\r\n      this.buildingTextures = [];\r\n      for (let i = 0; i < 2; i++) {\r\n        this.buildingTextures.push(PIXI.Texture.from('floor' + (i + 1) + '.png'));\r\n      }\r\n      for (let i = 0; i < 2; i++) {\r\n        this.buildingTextures.push(PIXI.Texture.from('wall' + (i + 1) + '.png'));\r\n      }\r\n      this.roadSprite = new PIXI.TilingSprite(PIXI.Texture.from('road.png'));\r\n      this.roadSprite.width = gameFieldSize.x;\r\n      this.roadSprite.tileScale.set(3, 3);\r\n      this.roadSprite.height = 96;\r\n      backgroundContainer.addChild(this.roadSprite);\r\n      this.roadSprite.visible = false;\r\n      this.roadSprite.anchor.set(0.5, 0.5);\r\n    }\r\n\r\n    if (this.buildings.length > 0) {\r\n      for (let i = 0; i < this.buildings.length; i++) {\r\n        backgroundContainer.removeChild(this.buildings[i].container);\r\n        this.buildings[i].container.destroy();\r\n        // backgroundContainer.removeChild(this.buildings[i].floorSprite);\r\n        for (let j=0; j < this.buildings[i].walls.length; j++) {\r\n          // backgroundContainer.removeChild(this.buildings[i].walls[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let buildingId = 1;\r\n\r\n    this.buildingsByPopularity = [];\r\n    this.buildings = [];\r\n    let minBuildings = this.minBuildings;\r\n    let spaceToCreate = this.humans.getMaxHumans();\r\n    const areaPerPerson = 500;\r\n    const maxRoomSize = Math.max(Math.min(50, Math.round(spaceToCreate / 3)), 10);\r\n    const minRoomSize = 5;\r\n    this.roadSprite.visible = false;\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      spaceToCreate = 0;\r\n      minBuildings = 0;\r\n    } else if (this.gameModel.level % 5 == 0) {\r\n      this.roadSprite.visible = true;\r\n      this.roadSprite.width = gameFieldSize.x;\r\n      this.roadSprite.x = gameFieldSize.x / 2;\r\n      this.roadSprite.y = gameFieldSize.y / 2;\r\n    }\r\n\r\n    while(spaceToCreate > 0 || minBuildings > 0) {\r\n      minBuildings--;\r\n      const personSize = Math.round(minRoomSize + (Math.random() * (maxRoomSize - minRoomSize)));\r\n      const roomSize = Math.sqrt(personSize * areaPerPerson);\r\n      spaceToCreate -= personSize;\r\n      let foundPosition = false;\r\n      let testPosition;\r\n\r\n      let counter = 1000;\r\n      const spaceFromEdges = 10;\r\n      while(!foundPosition && counter > 0) {\r\n        counter--;\r\n        if (this.gameModel.level % 5 == 0) {\r\n          if (Math.random() > 0.7) {\r\n            testPosition = {\r\n              x: spaceFromEdges + (Math.random() * (gameFieldSize.x - (2 * spaceFromEdges + roomSize))), \r\n              y: spaceFromEdges + (Math.random() * (gameFieldSize.y - (2 * spaceFromEdges + roomSize))),\r\n              width : roomSize,\r\n              height: roomSize\r\n            };\r\n          } else {\r\n            testPosition = {\r\n              x: spaceFromEdges + (Math.random() * (gameFieldSize.x - (2 * spaceFromEdges + roomSize))), \r\n              y: Math.random() > 0.5 ? gameFieldSize.y / 2 + (this.roadSprite.height / 2) + 8 : gameFieldSize.y / 2 - (this.roadSprite.height / 2) - 8 - roomSize,\r\n              width : roomSize,\r\n              height: roomSize\r\n            };\r\n          }\r\n          \r\n        } else {\r\n          testPosition = {\r\n            x: spaceFromEdges + (Math.random() * (gameFieldSize.x - (2 * spaceFromEdges + roomSize))), \r\n            y: spaceFromEdges + (Math.random() * (gameFieldSize.y - (2 * spaceFromEdges + roomSize))),\r\n            width : roomSize,\r\n            height: roomSize\r\n          };\r\n        }\r\n        foundPosition = this.isValidPosition(testPosition);\r\n      }\r\n\r\n      if (foundPosition) {\r\n        const poi = new Building(buildingId++, testPosition.x, testPosition.y, roomSize, roomSize);\r\n        this.addBuilding(poi);\r\n        const popularity = Math.max(Math.round(roomSize / 10), 1);\r\n        for (let j=0; j<popularity; j++) {\r\n          this.buildingsByPopularity.push(poi);\r\n        }\r\n        this.buildings.push(poi);\r\n        this.addCorners(poi);\r\n      }\r\n    }\r\n    this.populateBuildingMap();\r\n    this.populateTrees();\r\n  }\r\n\r\n  populateBuildingMap() : void {\r\n    this.buildingMap = [];\r\n    this.mapCols = Math.ceil(gameFieldSize.x / 10);\r\n    this.mapRows = Math.ceil(gameFieldSize.y / 10);\r\n    \r\n    if (this.buildings.length == 0)\r\n      return;\r\n\r\n    for (let i = 0; i < this.mapRows; i++) {\r\n      const y = i * 10;\r\n      for (let j = 0; j < this.mapCols; j++) {\r\n        const x = j * 10;\r\n        let smallestDistance = 10000;\r\n        let closestBuilding : Building;\r\n        for (let k = 0; k < this.buildings.length; k++) {\r\n          const build = this.buildings[k];\r\n          const distance = distanceBetweenPoints(x, y, build.x + (build.width /2), build.y + (build.height / 2)) - (build.width / 2);\r\n          if (distance < smallestDistance) {\r\n            smallestDistance = distance;\r\n            closestBuilding = build;\r\n          }\r\n        }\r\n        this.buildingMap[i * this.mapCols + j] = closestBuilding;\r\n      }\r\n    }\r\n  }\r\n\r\n  getBuildingFromMap(x : number, y : number) : Building {\r\n    return this.buildingMap[(Math.round(y / 10) * this.mapCols) + Math.round(x / 10)];\r\n  }\r\n\r\n  randomPositionInBuilding(building : Building) : Position {\r\n    if (!building) {\r\n      const xMod = Math.random() > 0.5 ? -1 : 1;\r\n      const yMod = Math.random() > 0.5 ? -1 : 1;\r\n      const x25 = gameFieldSize.x / 4;\r\n      const y25 = gameFieldSize.y / 4;\r\n\r\n      if (Math.random() > 0.5) {\r\n        return {\r\n          x: Math.random() * gameFieldSize.x,\r\n          y: (gameFieldSize.y / 2) + (yMod * y25) + (Math.random() * yMod * y25)\r\n        }\r\n      }\r\n      return {\r\n        x: (gameFieldSize.x / 2) + (xMod * x25) + (Math.random() * xMod * x25), \r\n        y: Math.random() * gameFieldSize.y,\r\n      }\r\n    }\r\n    const wallBuffer = 5;\r\n    return {x:building.x + wallBuffer + (Math.random() * (building.width - wallBuffer * 2)), y: building.y + wallBuffer + (Math.random() * (building.height - wallBuffer * 2))};\r\n  }\r\n\r\n  isInsidePoi(x : number, y : number, poi : Building, wall = 0) : boolean {\r\n    return x > poi.x - wall && x < poi.x + poi.width + wall && y > poi.y - wall && y < poi.y + poi.height + wall;\r\n  }\r\n\r\n  wallCollisionBuffer = 3;\r\n\r\n  checkWall(wall : Wall, start : Position, end : Position, collision : Collision) : void {\r\n    if (start.y > wall.collisionY && start.y < wall.collisionY + wall.collisionHeight) {\r\n      if (start.x < wall.collisionX - this.wallCollisionBuffer && end.x > wall.collisionX - this.wallCollisionBuffer) {\r\n        collision.x = true;\r\n        collision.validX = wall.collisionX - this.wallCollisionBuffer - 1;\r\n      }\r\n      if (start.x > wall.collisionX + wall.collisionWidth + this.wallCollisionBuffer && end.x < wall.collisionX + wall.collisionWidth + this.wallCollisionBuffer) {\r\n        collision.x = true;\r\n        collision.validX = wall.collisionX + wall.collisionWidth + this.wallCollisionBuffer + 1;\r\n      }\r\n    }\r\n\r\n    if (start.x > wall.collisionX && start.x < wall.collisionX + wall.collisionWidth) {\r\n      if (start.y < wall.collisionY - this.wallCollisionBuffer && end.y > wall.collisionY - this.wallCollisionBuffer) {\r\n        collision.y = true;\r\n        collision.validY = wall.collisionY - this.wallCollisionBuffer - 1;\r\n      } \r\n      if (start.y > wall.collisionY + wall.collisionHeight + this.wallCollisionBuffer && end.y < wall.collisionY + wall.collisionHeight + this.wallCollisionBuffer) {\r\n        collision.y = true;\r\n        collision.validY = wall.collisionY + wall.collisionHeight + this.wallCollisionBuffer + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  checkGraveyard(start : Position, end : Position) : Collision {\r\n    const collision = new Collision();\r\n    if (this.graveyardCollision) {\r\n      this.checkWall(this.graveyardCollision, start, end, collision);\r\n    }\r\n    if (collision.x || collision.y)\r\n      return collision;\r\n\r\n    return null;\r\n  }\r\n\r\n  checkCollisions(start : Position, end : Position) : Collision {\r\n    const closeBuilding = this.findBuilding(start);\r\n\r\n    if (!closeBuilding) {\r\n      return this.checkGraveyard(start, end);\r\n    }\r\n\r\n    const collision = new Collision();\r\n\r\n    for (let i = 0; i < closeBuilding.walls.length; i++) {\r\n      this.checkWall(closeBuilding.walls[i], start, end, collision);\r\n    }    \r\n\r\n    return collision;\r\n  }\r\n\r\n  fastDistance = fastDistance;\r\n\r\n  pathFindStepSize = 5;\r\n\r\n  pathStepCalc(start : Position, end : Position) : Position {\r\n    const xVector = end.x - start.x;\r\n    const yVector = end.y - start.y;\r\n    const ax = Math.abs(xVector);\r\n    const ay = Math.abs(yVector);\r\n    if (Math.max(ax, ay) == 0)\r\n      return;\r\n    let ratio = 1 / Math.max(ax, ay);\r\n    ratio = ratio * (1.29289 - (ax + ay) * ratio * 0.29289);\r\n    \r\n    return {\r\n      x: xVector * ratio * this.pathFindStepSize,\r\n      y: yVector * ratio * this.pathFindStepSize\r\n    };\r\n  }\r\n\r\n  isBuildingClose(position : Position, building : Building) : boolean {\r\n    return position.x > building.x - this.cornerDistance && \r\n            position.x < building.x + building.width + this.cornerDistance && \r\n            position.y > building.y - this.cornerDistance && \r\n            position.y < building.y + building.height + this.cornerDistance;\r\n  }\r\n\r\n  findBuilding(position : Position) : Building {\r\n\r\n    return this.getBuildingFromMap(position.x, position.y);\r\n  }\r\n\r\n  normalizeVector(vector : Position) : Position {\r\n\r\n    if (vector.x == 0 && vector.y == 0) {\r\n      return vector;\r\n    }\r\n\r\n    const magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\r\n    vector.x /= magnitude;\r\n    vector.y /= magnitude;\r\n    return vector;\r\n  }\r\n\r\n  modifyVectorForCollision(vector : Position, building : Building, position : Position) : Position {\r\n\r\n    // no building = no collision\r\n    if (!building && !this.graveyardCollision) {\r\n      return this.normalizeVector(vector);\r\n    }\r\n\r\n    // check 5 distance from position\r\n    const collision = new Collision();\r\n    const collisionDistance = 1;\r\n\r\n    const end = {\r\n      x:position.x + (vector.x > 0 ? collisionDistance : -collisionDistance),\r\n      y:position.y + (vector.y > 0 ? collisionDistance : -collisionDistance)\r\n    };\r\n\r\n    // check all the walls\r\n    if (building) {\r\n      for (let i = 0; i < building.walls.length; i++) {\r\n        this.checkWall(building.walls[i], position, end, collision);\r\n      }\r\n    }\r\n\r\n    if (this.graveyardCollision) {\r\n      this.checkWall(this.graveyardCollision, position, end, collision);\r\n    }\r\n\r\n    if (collision.x) {\r\n      vector.x = 0;\r\n    }\r\n    if (collision.y) {\r\n      vector.y = 0;\r\n    }\r\n    return this.normalizeVector(vector);\r\n  }\r\n\r\n  dx = 0;\r\n  dy = 0;\r\n  step : Position;\r\n  stepsToTake = 10;\r\n  hasHit = false;\r\n  testPosition : Position;\r\n\r\n  willVectorHitBuilding(start : Position, end : Position, building : Building) : boolean {\r\n\r\n    this.dx = end.x - start.x;\r\n    this.dy = end.y - start.y;\r\n\r\n    if (this.dx < 0 && start.x < building.x - 4)\r\n      return false;\r\n    if (this.dx > 0 && start.x > building.x + building.width + 4)\r\n      return false;\r\n    if (this.dy < 0 && start.y < building.y - 4)\r\n      return false;\r\n    if (this.dy > 0 && start.y > building.y + building.width + 4)\r\n      return false;\r\n\r\n    this.step = this.pathStepCalc(start, end);\r\n    this.stepsToTake = 10;\r\n    this.hasHit = false;\r\n    this.testPosition = {x:start.x, y:start.y};\r\n    while (!this.hasHit && this.stepsToTake > 0) {\r\n      this.stepsToTake--;\r\n      this.testPosition.x += this.step.x;\r\n      this.testPosition.y += this.step.y;\r\n      if (this.isInsidePoi(this.testPosition.x, this.testPosition.y, building, 4)) {\r\n        this.hasHit = true;\r\n      }\r\n    }\r\n    return this.hasHit;\r\n  }\r\n\r\n  findNearestCorner(position : Position, corners : Position[]) : Position {\r\n    let closestCorner = null;\r\n    let closestDistance = 10000;\r\n    for (let i = 0; i < corners.length; i++) {\r\n      const distance = this.fastDistance(position.x, position.y, corners[i].x, corners[i].y);\r\n      if (distance < closestDistance) {\r\n        closestDistance = distance;\r\n        closestCorner = corners[i];\r\n      }\r\n    }\r\n    return closestCorner;\r\n  }\r\n\r\n  findAdjacentCorners(corner : Position, building : Building) : Position[] {\r\n    const corners = [];\r\n    for (let i = 0; i < building.corners.length; i++) {\r\n      if (building.corners[i].x == corner.x || building.corners[i].y == corner.y) {\r\n        corners.push(building.corners[i]);\r\n      }\r\n    }\r\n    return corners;\r\n  }\r\n\r\n  vector = null;\r\n  corner = null;\r\n  hitbuilding = false;\r\n\r\n  navigateAroundBuilding(position : Position, target : Position, building : Building, distanceToTarget : number) : Position {\r\n\r\n    // if no building return vector\r\n    this.vector = {\r\n      x: target.x - position.x,\r\n      y: target.y - position.y,\r\n      distance: distanceToTarget\r\n    };\r\n    if (!building) {\r\n      return this.normalizeVector(this.vector);\r\n    }\r\n\r\n    // am I going to hit this building\r\n    this.hitbuilding = this.willVectorHitBuilding(position, target, building);\r\n\r\n    // if not return straight to target\r\n    if (!this.hitbuilding) {\r\n      return this.modifyVectorForCollision(this.vector, building, position);\r\n    }\r\n\r\n    // if I am then find path around\r\n    // check closest corner to target\r\n    this.corner = this.findNearestCorner(target, building.corners);\r\n    this.hitbuilding = this.willVectorHitBuilding(position, this.corner, building);\r\n    if (!this.hitbuilding) {\r\n      this.vector.x = this.corner.x - position.x;\r\n      this.vector.y = this.corner.y - position.y;\r\n      return this.modifyVectorForCollision(this.vector, building, position);\r\n    }\r\n\r\n    // if still hit building then go to my closest adjacent corner\r\n    this.corner = this.findNearestCorner(position, this.findAdjacentCorners(this.corner, building));\r\n    this.vector.x = this.corner.x - position.x;\r\n    this.vector.y = this.corner.y - position.y;\r\n    return this.modifyVectorForCollision(this.vector, building, position);\r\n  }\r\n\r\n  distanceToTarget : number;\r\n  closeBuilding : Building;\r\n  insideBuilding = false;\r\n\r\n  howDoIGetToMyTarget(currentPosition : Position, targetPosition : Position) : Position {\r\n\r\n    this.distanceToTarget = this.fastDistance(currentPosition.x, currentPosition.y, targetPosition.x, targetPosition.y);\r\n    this.closeBuilding = this.findBuilding(currentPosition);\r\n    this.insideBuilding = false;\r\n    \r\n    if (this.closeBuilding) {\r\n\r\n      this.insideBuilding = this.isInsidePoi(currentPosition.x, currentPosition.y, this.closeBuilding, 0);\r\n\r\n      if (this.insideBuilding) {\r\n        if (this.isInsidePoi(targetPosition.x, targetPosition.y, this.closeBuilding, 0)) {\r\n          // target in same building as me, just return direction\r\n          return this.modifyVectorForCollision({\r\n            x: targetPosition.x - currentPosition.x,\r\n            y: targetPosition.y - currentPosition.y\r\n          }, this.closeBuilding, currentPosition);\r\n        } else {\r\n          // I need to go outside\r\n          return this.modifyVectorForCollision({\r\n            x: this.closeBuilding.entrance.outside.x - currentPosition.x,\r\n            y: this.closeBuilding.entrance.outside.y - currentPosition.y\r\n          }, this.closeBuilding, currentPosition);\r\n        }\r\n      }\r\n    }\r\n\r\n    const targetCloseBuilding = this.findBuilding(targetPosition);\r\n    \r\n    if (targetCloseBuilding) {\r\n      this.insideBuilding = this.isInsidePoi(targetPosition.x, targetPosition.y, targetCloseBuilding, 0);\r\n\r\n      if (this.insideBuilding) {\r\n        // I need to go inside\r\n        const distanceToEntrance = this.fastDistance(currentPosition.x, currentPosition.y, targetCloseBuilding.entrance.outside.x, targetCloseBuilding.entrance.outside.y);\r\n        if (distanceToEntrance < 30) {\r\n          return this.modifyVectorForCollision({\r\n            x: targetCloseBuilding.entrance.inside.x - currentPosition.x,\r\n            y: targetCloseBuilding.entrance.inside.y - currentPosition.y\r\n          }, this.closeBuilding, currentPosition);\r\n        }\r\n        // navigate to entrance\r\n        return this.navigateAroundBuilding(currentPosition, targetCloseBuilding.entrance.outside, this.closeBuilding, this.distanceToTarget);\r\n      }\r\n    }\r\n\r\n\r\n    if (this.distanceToTarget < 20) {\r\n      // no need to navigate this close, just return direction\r\n      return this.modifyVectorForCollision({\r\n        x: targetPosition.x - currentPosition.x,\r\n        y: targetPosition.y - currentPosition.y\r\n      }, this.closeBuilding, currentPosition);\r\n    }\r\n\r\n    // navigate to target\r\n    return this.navigateAroundBuilding(currentPosition, targetPosition, this.closeBuilding, this.distanceToTarget);\r\n  }\r\n\r\n  treeSprites = [];\r\n  treeTextures = [];\r\n  armyTextures = [];\r\n\r\n  isValidTreePosition(position : Position) : boolean {\r\n    if (!this.isValidPosition(position))\r\n      return false;\r\n    for (let i=0; i < this.treeSprites.length; i++) {\r\n      if (this.fastDistance(position.x, position.y, this.treeSprites[i].x, this.treeSprites[i].y) < 25)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  populateTrees() : void {\r\n\r\n    if (this.treeSprites.length > 0) {\r\n      for (let i = 0; i < this.treeSprites.length; i++) {\r\n        characterContainer.removeChild(this.treeSprites[i]);\r\n      }\r\n      this.treeSprites = [];\r\n    }\r\n\r\n    if (this.treeTextures.length == 0) {\r\n      for (let i=0; i < 6; i++) {\r\n        this.treeTextures.push(PIXI.Texture.from('tree' + i + '.png'));\r\n      }\r\n      this.armyTextures.push(PIXI.Texture.from('hedgehog.png'));\r\n      this.armyTextures.push(PIXI.Texture.from('sandbags.png'));\r\n    }\r\n\r\n    let treesToCreate = Math.round(gameFieldSize.x / 50);\r\n    if (this.gameModel.isBossStage(this.gameModel.level)) {\r\n      treesToCreate = Math.round(treesToCreate * 1.5);\r\n    }\r\n\r\n    while(treesToCreate > 0) {\r\n      let foundPosition = false;\r\n      let testPosition;\r\n      let counter = 1000;\r\n      const spaceFromEdges = 8;\r\n      const roomSize = 2;\r\n\r\n      while(!foundPosition && counter > 0) {\r\n        counter--;\r\n        testPosition = {\r\n          x: spaceFromEdges + (Math.random() * (gameFieldSize.x - (2 * spaceFromEdges))), \r\n          y: spaceFromEdges + (Math.random() * (gameFieldSize.y - (2 * spaceFromEdges))),\r\n          width : roomSize,\r\n          height: roomSize\r\n        };\r\n        foundPosition = this.isValidTreePosition(testPosition);\r\n      }\r\n\r\n      if (foundPosition) {\r\n        let alivePercent = 0.4 + Math.random() * 0.6;\r\n        if (this.gameModel.constructions.graveyard) {\r\n          alivePercent = Math.min((this.fastDistance(testPosition.x, testPosition.y, this.graveYardLocation.x, this.graveYardLocation.y) - 90) / 400, 1);\r\n        }\r\n        let texture = this.treeTextures[(this.treeTextures.length - 1) - Math.round((this.treeTextures.length - 1) * alivePercent)];\r\n        if (this.gameModel.isBossStage(this.gameModel.level) && Math.random() > 0.7) {\r\n          texture = getRandomElementFromArray(this.armyTextures, Math.random());\r\n        }\r\n        const treeSprite = new PIXI.Sprite(texture);\r\n        treeSprite.anchor.set(0.5, 1);\r\n        treeSprite.x = testPosition.x;\r\n        treeSprite.y = testPosition.y;\r\n        treeSprite.zIndex = treeSprite.y;\r\n        treeSprite.scale.x = treeSprite.scale.y = 2;\r\n        treeSprite.scale.x = Math.random() > 0.5 ? treeSprite.scale.x : -1 * treeSprite.scale.x;\r\n        this.treeSprites.push(treeSprite);\r\n        characterContainer.addChild(treeSprite);\r\n      }\r\n      treesToCreate--;\r\n    }\r\n  }\r\n}\r\n\r\nclass Collision {\r\n  x  = false;\r\n  y = false;\r\n  validX = 0;\r\n  validY = 0;\r\n}","import { GameModel, Particles, Creatures, Graveyard, Humans, Skeleton, Zombies, distanceBetweenPoints } from \"./internal\";\n\nlet gameContainer : PIXI.Container, backgroundContainer : PIXI.Container, backgroundSpriteContainer : PIXI.Container;\nlet characterContainer : PIXI.Container, uiContainer : PIXI.Container, foregroundContainer : PIXI.Container;\nlet vipTexture : PIXI.RenderTexture;\nlet vipSprite : PIXI.Sprite;\nlet grass : PIXI.TilingSprite;\nlet canvasSize = {x:800,y:600, defaultScale:1};\nlet gameFieldSize = {x:600,y:600};\n\nlet gameModel : GameModel, particles : Particles, graveyard : Graveyard, creatures : Creatures, skeleton : Skeleton, zombies : Zombies, humans : Humans;\n\nfunction setupClasses() {\n  gameModel = GameModel.getInstance();\n  particles = new Particles();\n  graveyard = new Graveyard();\n  creatures = new Creatures();\n  skeleton = new Skeleton();\n  zombies = new Zombies();\n  humans = new Humans();\n}\n\n\nfunction onDragStart(event) {\n  this.data = event.data;\n  this.dragging = true;\n  this.dragOffset = this.data.getLocalPosition(this);\n  this.dragOffset.x *= this.scale.x;\n  this.dragOffset.y *= this.scale.y;\n  this.dragStartX = this.x;\n  this.dragStartY = this.y;\n  lastDiff = 0;\n}\n\nfunction onDragEnd() {\n  this.dragging = false;\n  this.data = null;\n  lastDiff = 0;\n}\n\nlet lastDiff = 0;\nlet lastPinchZoom = 0;\n\nfunction pinchZoom(event) {\n  const curDiff = Math.abs(event.data.originalEvent.touches[0].clientX - event.data.originalEvent.touches[1].clientX);\n  if (lastDiff) {\n    if (lastPinchZoom + 50 < Date.now() && Math.abs(curDiff - lastDiff) > 10) {\n      if (curDiff > lastDiff) {\n        zoom(1, null);\n      } else {\n        zoom(-1, null);\n      }\n      lastPinchZoom = Date.now();\n      lastDiff = curDiff;\n    }\n  } else {\n    lastDiff = curDiff;\n  }\n}\n\nfunction onDragMove(event) {\n  if (zombies.zombieCursor) {\n    zombies.zombieCursor.position = event.data.getLocalPosition(this.parent);\n  }\n  if (event.data.originalEvent.touches && event.data.originalEvent.touches.length > 1) {\n    pinchZoom(event);\n  } else if (this.dragging) {\n      const newPosition = this.data.getLocalPosition(this.parent);\n      this.x = newPosition.x - this.dragOffset.x;\n      this.y = newPosition.y - this.dragOffset.y;\n      preventGameContainerLeavingBounds(this);\n      if (distanceBetweenPoints(this.dragStartX, this.dragStartY, this.x, this.y) > 5) {\n        this.hasMoved = true;\n      }\n  }\n}\n\nfunction preventGameContainerLeavingBounds(gc) {\n  const gcWidth = gameFieldSize.x * gc.scale.x;\n  const gcHeight = gameFieldSize.y * gc.scale.y;\n  if (gc.x > canvasSize.x * 0.5)\n    gc.x = canvasSize.x * 0.5;\n  if (gc.x + gcWidth < canvasSize.x * 0.5)\n    gc.x = canvasSize.x * 0.5 - gcWidth;\n  if (gc.y > canvasSize.y * 0.5)\n    gc.y = canvasSize.y * 0.5;\n  if (gc.y + gcHeight < canvasSize.y * 0.5)\n    gc.y = canvasSize.y * 0.5 - gcHeight;\n}\n\nfunction onClickTap(event) {\n  if (!this.hasMoved && gameModel.currentState == gameModel.states.playingLevel) {\n    if (KeysPressed.shift) {\n      zombies.spawnAllZombies(event.data.getLocalPosition(this).x, event.data.getLocalPosition(this).y);\n    } else {\n      zombies.spawnZombie(event.data.getLocalPosition(this).x, event.data.getLocalPosition(this).y);\n    }\n  }\n  this.hasMoved = false;\n}\n\nfunction zoom(change : number, coords : {x:number, y:number}) : void {\n\n  if (lastPinchZoom + 50 > Date.now()) {\n    return;\n  }\n  lastPinchZoom = Date.now();\n  const gc = gameContainer;\n\n  if (!coords) {\n    coords = {x:canvasSize.x * 0.5, y:canvasSize.y * 0.5};\n  }\n\n  const gcWidth = gameFieldSize.x * gc.scale.x;\n  const gcHeight = gameFieldSize.y * gc.scale.y;\n\n  if (coords.x > gc.x + gcWidth)\n    coords.x = gc.x + gcWidth;\n  if (coords.x < gc.x)\n    coords.x = gc.x;\n  if (coords.y < gc.y)\n    coords.y = gc.y;\n  if (coords.y > gc.y + gcHeight)\n    coords.y = gc.y + gcHeight;\n\n  const centerPosition = {\n    x:(coords.x - (gc.x)) / gc.scale.x,\n    y:(coords.y - (gc.y)) / gc.scale.y\n  };\n\n  if (change > 0) {\n    if (gc.scale.x < 10) {\n      gc.scale.x = gc.scale.y = gc.scale.x * 1.1;\n      if (zombies.zombieCursor && zombies.zombieCursor.scale) // .scale is undefined sometimes, don't know why yet\n        zombies.zombieCursor.scale.x = zombies.zombieCursor.scale.y = zombies.zombieCursor.scale.x * 1.1\n    }\n  } else {\n    if (Math.max(gcWidth, gcHeight) > Math.min(canvasSize.y, canvasSize.x) * 0.8) {\n      gc.scale.x = gc.scale.y = gc.scale.x * 0.9;\n      if (zombies.zombieCursor && zombies.zombieCursor.scale) // .scale is undefined sometimes, don't know why yet\n        zombies.zombieCursor.scale.x = zombies.zombieCursor.scale.y = zombies.zombieCursor.scale.x * 0.9;\n    }\n  }\n\n  gc.x = coords.x - centerPosition.x * gc.scale.x;\n  gc.y = coords.y - centerPosition.y * gc.scale.y;\n  preventGameContainerLeavingBounds(gc);\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const coords = {\n    x:event.clientX * (canvasSize.x / document.body.clientWidth),\n    y:event.clientY * (canvasSize.y / document.body.clientHeight)\n  };\n\n  if (event.deltaY < 0 || event.deltaX < 0)\n    zoom(+1, coords);\n  else\n    zoom(-1, coords);\n}\n\nfunction setupContainers(app) {\n  gameContainer = new PIXI.Container();\n  backgroundContainer = new PIXI.Container();\n  backgroundSpriteContainer = new PIXI.Container();\n  characterContainer = new PIXI.Container();\n  characterContainer.sortableChildren = true;\n  foregroundContainer = new PIXI.Container();\n  uiContainer = new PIXI.Container();\n  vipTexture = PIXI.RenderTexture.create({width:300, height:300});\n  vipSprite = new PIXI.Sprite(vipTexture);\n  vipSprite.visible = false;\n  uiContainer.addChild(vipSprite);\n\n  gameContainer.addChild(backgroundContainer);\n  gameContainer.addChild(backgroundSpriteContainer);\n  gameContainer.addChild(characterContainer);\n  gameContainer.addChild(foregroundContainer);\n\n  app.stage.addChild(gameContainer);\n  app.stage.addChild(uiContainer);\n\n  gameContainer.interactive = true;\n  gameContainer.interactiveChildren = false;\n\n  gameContainer.on('pointerdown', onDragStart);\n  gameContainer.on('pointerup', onDragEnd);\n  gameContainer.on('pointerupoutside', onDragEnd);\n  gameContainer.on('pointermove', onDragMove);\n  gameContainer.on('click', onClickTap);\n  gameContainer.on('tap', onClickTap);\n  document.getElementsByTagName('canvas')[0].onwheel = onWheel;\n  document.getElementsByTagName('canvas')[0].oncontextmenu = function(event){\n    event.preventDefault();\n  };\n}\n\nfunction centerGameContainer(resetZoom = false) : void {\n  if (resetZoom) {\n    gameContainer.scale.x = canvasSize.defaultScale;\n    gameContainer.scale.y = canvasSize.defaultScale;\n    if (zombies.zombieCursor)\n      zombies.zombieCursor.scale.x = zombies.zombieCursor.scale.y = zombies.zombieCursorScale * canvasSize.defaultScale;\n  }\n  \n  gameContainer.x = (canvasSize.x - gameFieldSize.x * gameContainer.scale.x) / 2;\n  gameContainer.y = (canvasSize.y - gameFieldSize.y * gameContainer.scale.y) / 2;\n}\n\nfunction scrollGameContainer(timeDiff) {\n  const keys = KeysPressed;\n  let moved = false;\n  const gc = gameContainer;\n  if (keys.w) {\n    gc.y += keys.scrollSpeed * timeDiff;\n    moved = true;\n  }\n  if (keys.a) {\n    gc.x += keys.scrollSpeed * timeDiff;\n    moved = true;\n  }\n  if (keys.s) {\n    gc.y -= keys.scrollSpeed * timeDiff;\n    moved = true;\n  }\n  if (keys.d) {\n    gc.x -= keys.scrollSpeed * timeDiff;\n    moved = true;\n  }\n  if (moved)\n    preventGameContainerLeavingBounds(gc);\n}\n\nconst viewableArea = {\n  x:0,\n  y:0,\n  width:1000,\n  height:1000,\n  hideParticle(x : number, y : number) : boolean {\n    if (x < this.x) {\n      return true;\n    }\n    if (y < this.y) {\n      return true;\n    }\n    if (x > this.x + this.width) {\n      return true;\n    }\n    if (y > this.y + this.height) {\n      return true;\n    }\n    return false;\n  },\n  update() : void {\n    this.x = (-gameContainer.x) / gameContainer.scale.x;\n    this.y = (-gameContainer.y) / gameContainer.scale.y;\n    this.width = canvasSize.x / gameContainer.scale.x;\n    this.height = canvasSize.y / gameContainer.scale.y;\n  }\n}\nconst vipMatrix = new PIXI.Matrix();\n\nfunction renderVipEscape(app : PIXI.Application) {\n  vipSprite.x = 5;\n  vipSprite.y = canvasSize.y - 305;\n  const scaleX = gameContainer.scale.x;\n  const scaleY = gameContainer.scale.y;\n  const posX = gameContainer.x;\n  const posY = gameContainer.y;\n  gameContainer.position.set(0, 0);\n  if (humans.vip) {\n    vipMatrix.tx = (humans.vip.x * -2) + 150;\n    vipMatrix.ty = (humans.vip.y * -2) + 150;\n  }\n  gameContainer.scale.set(2,2);\n  app.renderer.render(gameContainer, vipTexture, undefined, vipMatrix);\n  gameContainer.scale.set(scaleX, scaleY);\n  gameContainer.position.set(posX, posY);\n}\nlet frameCount  = 0;\nlet timeSinceLastFrameCount = 1;\n\nfunction update(timeDiff : number, app : PIXI.Application) : void {\n\n  if (gameModel.persistentData.showfps) {\n    frameCount++;\n    timeSinceLastFrameCount -= timeDiff;\n    if (timeSinceLastFrameCount < 0) {\n      gameModel.frameRate = frameCount;\n      frameCount = 0;\n      timeSinceLastFrameCount = 1;\n    }\n  }\n  scrollGameContainer(timeDiff);\n  viewableArea.update();\n  \n  timeDiff *= gameModel.gameSpeed;\n\n  graveyard.update(timeDiff);\n  humans.update(timeDiff);\n  zombies.update(timeDiff);\n  creatures.update(timeDiff);\n  skeleton.update(timeDiff);\n  particles.update(timeDiff);\n  vipSprite.visible = humans.vipEscaping && (typeof humans.vip !== 'undefined');\n  if (vipSprite.visible) {\n    renderVipEscape(app);\n  }\n}\n\nfunction setGameFieldSizeForLevel() : void {\n  const size = Math.min(500 + (gameModel.level * 50), 1500);\n  const shift = Math.random() * size / 3;\n\n  gameFieldSize = {\n    x:size + shift,\n    y:size - shift\n  };\n  \n  if (grass) {\n    grass.width = gameFieldSize.x;\n    grass.height = gameFieldSize.y;\n  }\n  gameContainer.hitArea = new PIXI.Rectangle(0,0,gameFieldSize.x,gameFieldSize.y);\n}\n\nfunction startGame() {\n\n  PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n\n  const app = new PIXI.Application({\n    width: canvasSize.x, height: canvasSize.y, backgroundColor: 0x104510, resolution: gameModel.persistentData.resolution || 1, antialias:false, resizeTo: window\n  });\n  document.body.appendChild(app.view);\n\n  setupContainers(app);\n\n  app.loader\n    .add('sprites/ground.json')\n    .add('sprites/megagraveyard.png')\n    .add('sprites/graveyard.json')\n    .add('sprites/buildings.json')\n    .add('sprites/humans.json')\n    .add('sprites/cop.json')\n    .add('sprites/dogs.json')\n    .add('sprites/army.json')\n    .add('sprites/doctor.json')\n    .add('sprites/zombie.json')\n    .add('sprites/golem.json')\n    .add('sprites/bonecollector.json')\n    .add('sprites/harpy.json')\n    .add('sprites/objects2.json')\n    .add('sprites/fenceposts.json')\n    .add('sprites/trees2.json')\n    .add('sprites/fortress.json')\n    .add('sprites/tank.json')\n    .add('sprites/skeleton.json')\n    .load(function(){\n\n    gameModel.app = app;\n\n    setGameFieldSizeForLevel();\n\n    grass = new PIXI.TilingSprite(PIXI.Texture.from('grass.png'));\n    grass.width = gameFieldSize.x;\n    grass.height = gameFieldSize.y;\n    backgroundContainer.addChild(grass);\n\n    gameModel.setupLevel();\n    \n\n    setTimeout(function(){\n      centerGameContainer(true);\n    });\n    \n\n    // Listen for animate update\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    app.ticker.add((_delta : number) => {\n      update(app.ticker.deltaMS / 1000, app);\n    });\n  });\n}\n\nfunction setSizes() : void {\n  const x = document.body.clientWidth;\n  const y = document.body.clientHeight;\n  canvasSize = {\n    x: x, \n    y: y,\n    defaultScale: Math.max(x, y) / 1000\n  };\n  KeysPressed.scrollSpeed = Math.max(x, y) / 4;\n}\n\n\nwindow.onload = function() {\n  setupClasses();\n  gameModel.loadData();\n  gameModel.onReady();\n  setSizes()\n  startGame();\n\n  if(window.self !== window.top) {\n    if (document.referrer != \"\" &&\n    document.referrer.indexOf(\"kongregate.com\") == -1 &&\n    document.referrer.indexOf(\"konggames.com\") == -1 &&\n    document.referrer.indexOf(\"gti.nz\") == -1) {\n      window.location.href = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\";\n    } else {\n      if (document.referrer.indexOf(\"kongregate.com\") !== -1 || document.referrer.indexOf(\"konggames.com\") !== -1) {\n        kongregateAPI.loadAPI(function(){\n          window.kongregate = kongregateAPI.getAPI();\n          gameModel.kongregate = true;\n          gameModel.loginInUsingPlayFab();\n        });\n      }\n    }\n  }\n\n  document.addEventListener(\"visibilitychange\", function(){\n    if (document.visibilityState == \"hidden\") {\n      gameModel.hidden = true;\n    } else {\n      gameModel.hidden = false;\n    }\n  }, false);\n};\n\nwindow.onresize = function() {\n  setSizes();\n}\n\nconst KeysPressed = {\n  scrollSpeed:200,\n  w:false,\n  a:false,\n  s:false,\n  d:false,\n  shift:false\n}\n\nwindow.onblur = function() {\n  KeysPressed.w = KeysPressed.a = KeysPressed.s = KeysPressed.d = false;\n};\n\nwindow.onkeydown = function (e) {\n\tswitch (e.keyCode) {\n    case 16:\n    case 17:\n      KeysPressed.shift = true;\n      break;\n    case 87:\n    case 38:\n      KeysPressed.w = true;\n      break;\n    case 65:\n    case 37:\n      KeysPressed.a = true;\n      break;\n    case 83:\n    case 40:\n      KeysPressed.s = true;\n      break;\n    case 68:\n    case 39:\n      KeysPressed.d = true;\n      break;\n    default:\n      return true;\n\t}\n\treturn false;\n};\nwindow.onkeyup = function (e) {\n\tswitch (e.keyCode) {\n    case 16:\n    case 17:\n      KeysPressed.shift = false;\n      break;\n\t\tcase 87:\n    case 38:\n      KeysPressed.w = false;\n\t\t\tbreak;\n\t\tcase 65:\n    case 37:\n      KeysPressed.a = false;\n\t\t\tbreak;\n\t\tcase 83:\n    case 40:\n      KeysPressed.s = false;\n\t\t\tbreak;\n\t\tcase 68:\n    case 39:\n      KeysPressed.d = false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn true;\n\t}\n\treturn false;\n};\n\nexport {foregroundContainer, gameContainer, viewableArea, backgroundContainer, backgroundSpriteContainer, uiContainer,\n  KeysPressed, characterContainer, zoom, centerGameContainer, update, setGameFieldSizeForLevel, gameFieldSize};","import { Creature, CreatureState } from \"./classes/creatureclasses\";\r\nimport { CharacterFlags, GameObject } from \"./classes/gameobject\";\r\nimport type { Human } from \"./classes/humanclasses\";\r\nimport { Blasts, Blood, Bones, Bullets, Exclamations, Smoke, GameModel, Graveyard, Humans, ZmMap,\r\n  characterContainer, uiContainer, KeysPressed, fastDistance, magnitude, getRandomElementFromArray} from \"./internal\";\r\n\r\nclass ZombieFlags extends CharacterFlags {\r\n  dog = false;\r\n  super = false;\r\n}\r\n\r\nexport class Zombie extends Creature {\r\n  flags = new ZombieFlags();\r\n  mod = 1;\r\n  scaleMod = 1;\r\n  textureId = 0;\r\n  turnTimer = 0;\r\n  detonateTimer = 0;\r\n}\r\n\r\nexport class Zombies {\r\n  private static instance : Zombies;\r\n  constructor() {\r\n    if (Zombies.instance)\r\n      return Zombies.instance;\r\n    Zombies.instance = this;\r\n  }\r\n  map : ZmMap;\r\n  model : GameModel;\r\n  humans : Humans;\r\n  graveyard : Graveyard;\r\n  smoke : Smoke;\r\n  blood : Blood;\r\n  bones : Bones;\r\n  exclamations : Exclamations;\r\n  blasts : Blasts;\r\n  bullets : Bullets;\r\n  zombies : Zombie[] = [];\r\n  discardedZombies : Zombie[] = [];\r\n  aliveZombies : Creature[] = [];\r\n  aliveHumans = [];\r\n  zombiePartition : Creature[][][] = [];\r\n  scaling = 2;\r\n  moveTargetDistance = 15;\r\n  attackDistance = 15;\r\n  attackSpeed = 3;\r\n  targetDistance = 100;\r\n  fadeSpeed = 0.1;\r\n  currId = 1;\r\n  scanTime = 3;\r\n  textures = [];\r\n  dogTexture = [];\r\n  deadDogTexture = [];\r\n  maxSpeed = 10;\r\n  zombieCursor = null;\r\n  zombieCursorText = null;\r\n  zombieCursorScale = 3;\r\n  burnTickTimer = 5;\r\n  smokeTimer = 0.3;\r\n  fastDistance = fastDistance;\r\n  magnitude = magnitude;\r\n  detonate = false;\r\n  super = false;\r\n\r\n  populate() : void {\r\n    this.map = new ZmMap();\r\n    this.model = GameModel.getInstance();\r\n    this.humans = new Humans();\r\n    this.graveyard = new Graveyard();\r\n    this.smoke = new Smoke();\r\n    this.blood = new Blood();\r\n    this.bones = new Bones();\r\n    this.exclamations = new Exclamations();\r\n    this.blasts = new Blasts();\r\n    this.bullets = new Bullets();\r\n    this.model.zombieCount = 0;\r\n    if (this.textures.length == 0) {\r\n      for (let i=0; i < 3; i++) {\r\n        const animated = [];\r\n        for (let j=0; j < 3; j++) {\r\n          animated.push(PIXI.Texture.from('zombie' + (i + 1) + '_' + (j + 1) + '.png'));\r\n        }\r\n        this.textures.push({\r\n          animated : animated,\r\n          dead : [PIXI.Texture.from('zombie' + (i + 1) + '_dead.png')]\r\n        })\r\n      }\r\n      for (let i=0; i < 2; i++) {\r\n        this.dogTexture.push(PIXI.Texture.from(\"zombiedog\" + (i + 1) + \".png\"));\r\n      }\r\n      this.deadDogTexture = [PIXI.Texture.from(\"zombiedogdead.png\")];\r\n    }\r\n\r\n    if (this.zombies.length > 0) {\r\n      for (let i=0; i < this.zombies.length; i++) {\r\n        characterContainer.removeChild(this.zombies[i]);\r\n        this.zombies[i].stop();\r\n      }\r\n      this.discardedZombies = this.zombies.slice();\r\n      this.zombies.length = 0;\r\n      this.aliveZombies.length = 0;\r\n    }\r\n    if (!this.zombieCursor) {\r\n      this.zombieCursor = new PIXI.Container();\r\n      const cursorSprite = new PIXI.Sprite(PIXI.Texture.from('zombie1_1.png'));\r\n      cursorSprite.alpha = 0.6;\r\n      cursorSprite.scale.x = cursorSprite.scale.y = 1;\r\n      cursorSprite.anchor.set(35/80, 1);\r\n      this.zombieCursorText = new PIXI.Text(\"1\", {\r\n        fontFamily: 'sans-serif',\r\n        fontSize : 40,\r\n        fill: \"#FFF\",\r\n        stroke: \"#000\",\r\n        strokeThickness: 0,\r\n        align: 'center'\r\n      });\r\n      this.zombieCursorText.anchor = {x:0.5, y:1};\r\n      this.zombieCursorText.scale.x = this.zombieCursorText.scale.y = 0.1;\r\n      this.zombieCursorText.y = -9\r\n      this.zombieCursorText.visible = false;\r\n      this.zombieCursorText.alpha = 0.7;\r\n\r\n      this.zombieCursor.addChild(cursorSprite);\r\n      this.zombieCursor.addChild(this.zombieCursorText);\r\n      uiContainer.addChild(this.zombieCursor);      \r\n    }\r\n  }\r\n\r\n  createZombie(x : number, y : number, isDog = false) : void {\r\n    const textureId = Math.floor(Math.random() * this.textures.length);\r\n    let zombie : Zombie;\r\n    if (this.discardedZombies.length > 0) {\r\n      zombie = this.discardedZombies.pop();\r\n      if (isDog) {\r\n        zombie.textures = this.dogTexture;\r\n      } else {\r\n        zombie.textures = this.textures[textureId].animated;\r\n      }\r\n    } else {\r\n      if (isDog) {\r\n        zombie = new Zombie(this.dogTexture);\r\n      } else {\r\n        zombie = new Zombie(this.textures[textureId].animated);\r\n      }   \r\n    }\r\n    zombie.zombie = true;\r\n    zombie.mod = 1;\r\n    zombie.scaleMod = 1;\r\n    if (this.super) {\r\n      zombie.mod = 10;\r\n      zombie.scaleMod = 1.5;\r\n    }\r\n    if (zombie.scaleMod > 2) {\r\n      zombie.mod = 20;\r\n      zombie.scaleMod = 2;\r\n    }\r\n    zombie.flags = new ZombieFlags();\r\n    zombie.flags.dog = isDog;\r\n    zombie.flags.super = this.super;\r\n    zombie.deadTexture = zombie.flags.dog ? this.deadDogTexture : this.textures[textureId].dead;\r\n    zombie.textureId = textureId;\r\n    zombie.burnDamage = 0;\r\n    zombie.lastKnownBuilding = false;\r\n    zombie.alpha = 1;\r\n    zombie.animationSpeed = 0.15;\r\n    zombie.anchor.set(35/80, 1);\r\n    zombie.position.set(x,y);\r\n    zombie.target = null;\r\n    zombie.zIndex = zombie.position.y;\r\n    zombie.visible = true;\r\n    zombie.maxHealth = zombie.health = this.model.zombieHealth * zombie.mod;\r\n    zombie.regenTimer = 5;\r\n    zombie.state = CreatureState.lookingForTarget;\r\n    const dogScale = isDog ? 0.7 : 1;\r\n    zombie.scaling = zombie.scaleMod * this.scaling * dogScale;\r\n    zombie.scale.set(Math.random() > 0.5 ? zombie.scaling : -1 * zombie.scaling, zombie.scaling);\r\n    zombie.timer.attack = 0;\r\n    zombie.xSpeed = 0;\r\n    zombie.ySpeed = 0;\r\n    zombie.speedMultiplier = 1;\r\n    zombie.timer.scan = 0;\r\n    zombie.timer.burnTick = this.burnTickTimer;\r\n    zombie.timer.smoke = this.smokeTimer;\r\n    zombie.play();\r\n    zombie.zombieId = this.currId++;\r\n    this.zombies.push(zombie);\r\n    characterContainer.addChild(zombie);\r\n    this.smoke.newZombieSpawnCloud(x, y - 2);\r\n  }\r\n\r\n  spawnZombie(x : number,y : number) : void {\r\n    if (this.model.energy < this.model.zombieCost)\r\n      return;\r\n\r\n    this.model.energy -= this.model.zombieCost;\r\n    this.createZombie(x, y, false);\r\n  }\r\n\r\n  spawnAllZombies(x : number, y : number) : void {\r\n    const numZombies = Math.min(Math.floor(this.model.energy / this.model.zombieCost), 100);\r\n    for (let i = 0; i < numZombies; i++) {\r\n      this.spawnZombie(x + 4 * (Math.random() -1 ), y + 4 * (Math.random() -1 ));\r\n    }\r\n  }\r\n\r\n  damageZombie(zombie : Creature, damage : number, human : Human) : void {\r\n    if (zombie.graveyard) {\r\n      this.graveyard.damageGraveyard(damage);\r\n      return;\r\n    }\r\n    if (this.graveyard.isWithinFence(zombie)) {\r\n      damage *= 0.5;\r\n      this.exclamations.newShield(zombie);\r\n    }\r\n    if (human && human.flags.infected) {\r\n      damage *= this.model.plagueDmgReduction;\r\n    }\r\n    zombie.health -= damage * this.model.runeEffects.damageReduction;\r\n    zombie.speedMultiplier = Math.max(Math.min(1, zombie.health / zombie.maxHealth), 0.4);\r\n    if (zombie.flags.burning) {\r\n      zombie.speedMultiplier = this.model.burningSpeedMod;\r\n    }\r\n    this.blood.newSplatter(zombie.x, zombie.y);\r\n    if (zombie.health <= 0 && !zombie.flags.dead) {\r\n      this.bones.newBones(zombie.x, zombie.y);\r\n      zombie.flags.dead = true;\r\n      if (Math.random() < this.model.infectedBlastChance) {\r\n        this.causePlagueExplosion(zombie, zombie.maxHealth * 0.2, true);\r\n      }\r\n      zombie.textures = zombie.deadTexture;\r\n      zombie.gotoAndStop(0);\r\n      if (Math.random() < this.model.brainRecoverChance) {\r\n        this.model.addBrains(1);\r\n      }\r\n    }\r\n    if (human && this.model.runeEffects.damageReflection > 0) {\r\n      this.humans.damageHuman(human, damage * this.model.runeEffects.damageReflection);\r\n    }\r\n  }\r\n\r\n  causePlagueExplosion(zombie : GameObject, damage : number, killZombie = true) : void {\r\n    const explosionRadius = 50;\r\n    this.blood.newPlagueSplatter(zombie.x, zombie.y);\r\n    this.blasts.newBlast(zombie.x, zombie.y - 4);\r\n    if (killZombie) {\r\n      zombie.visible = false;\r\n      characterContainer.removeChild(zombie);\r\n    }\r\n    for (let i = 0; i < this.aliveHumans.length; i++) {\r\n      if (Math.abs(this.aliveHumans[i].x - zombie.x) < explosionRadius) {\r\n        if (Math.abs(this.aliveHumans[i].y - zombie.y) < explosionRadius) {\r\n          if (this.fastDistance(zombie.x, zombie.y, this.aliveHumans[i].x, this.aliveHumans[i].y) < explosionRadius) {\r\n            this.inflictPlague(this.aliveHumans[i]);\r\n            this.humans.damageHuman(this.aliveHumans[i], damage);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this.model.blastHealing > 0) {\r\n      const healingDone = damage * this.model.blastHealing;\r\n      for (let i = 0; i < this.aliveZombies.length; i++) {\r\n        if (Math.abs(this.aliveZombies[i].x - zombie.x) < explosionRadius) {\r\n          if (Math.abs(this.aliveZombies[i].y - zombie.y) < explosionRadius) {\r\n            if (this.fastDistance(zombie.x, zombie.y, this.aliveZombies[i].x, this.aliveZombies[i].y) < explosionRadius) {\r\n              this.healZombie(this.aliveZombies[i], healingDone);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  partitionInsert(partition : Creature[][][], zombie : Creature) : void {\r\n    const x = Math.round(zombie.x / 10);\r\n    const y = Math.round(zombie.y / 10);\r\n    if (!partition[x])\r\n      partition[x] = [];\r\n    if (!partition[x][y])\r\n      partition[x][y] = [];\r\n    partition[x][y].push(zombie);\r\n  }\r\n\r\n  partitionGetNeighbours(zombie : Creature) : Creature[] {\r\n    const neighbours : Creature[] = [];\r\n    const x = Math.round(zombie.x / 10);\r\n    const y = Math.round(zombie.y / 10);\r\n    for (let i = x -1; i <= x + 1; i++) {\r\n      if (this.zombiePartition[i]) {\r\n        for (let j = y -1; j <= y + 1; j++) {\r\n          if (this.zombiePartition[i][j]) {\r\n            neighbours.push(...this.zombiePartition[i][j]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return neighbours;\r\n  }\r\n\r\n  reactionTime = 0;\r\n  graveyardAttackers = [];\r\n\r\n  update(timeDiff : number) : void {\r\n    this.maxSpeed = this.model.zombieSpeed;\r\n    this.reactionTime = Math.max(0.2, this.aliveZombies.length / 2000);\r\n    const aliveZombies = [];\r\n    const zombiePartition = [];\r\n    this.aliveHumans = this.humans.aliveHumans;\r\n    this.graveyardAttackers = this.humans.graveyardAttackers;\r\n    for (let i=0; i < this.zombies.length; i++) {\r\n      if (this.zombies[i].visible) {\r\n        this.updateZombie(this.zombies[i], timeDiff);\r\n        if (!this.zombies[i].flags.dead) {\r\n          aliveZombies.push(this.zombies[i]);\r\n          this.partitionInsert(zombiePartition, this.zombies[i]);\r\n        }\r\n      }\r\n    }\r\n    this.model.zombieCount = aliveZombies.length;\r\n    this.aliveZombies = aliveZombies;\r\n    this.zombiePartition = zombiePartition;\r\n    if (this.model.energy >= this.model.zombieCost && this.model.currentState == this.model.states.playingLevel) {\r\n      this.zombieCursor.visible = true;\r\n      if (KeysPressed.shift) {\r\n        this.zombieCursorText.visible = true;\r\n        const numZombies = Math.min(Math.floor(this.model.energy / this.model.zombieCost), 100);\r\n        if (this.zombieCursorText.text != numZombies) {\r\n          this.zombieCursorText.text = numZombies;\r\n        }\r\n      } else {\r\n        this.zombieCursorText.visible = false;\r\n      }\r\n    } else {\r\n      this.zombieCursor.visible = false;\r\n    }\r\n  }\r\n\r\n  detonateZombie(zombie : Zombie, timeDiff : number) : void {\r\n    if (!zombie.detonateTimer) {\r\n      zombie.detonateTimer = Math.random() * 3;  \r\n    }\r\n    zombie.detonateTimer -= timeDiff;\r\n    if (zombie.detonateTimer < 0) {\r\n      this.bones.newBones(zombie.x, zombie.y);\r\n      zombie.flags.dead = true;\r\n      this.causePlagueExplosion(zombie, zombie.maxHealth * 0.2, true);\r\n      if (Math.random() < this.model.brainRecoverChance) {\r\n        this.model.addBrains(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateZombie(zombie : Zombie, timeDiff : number) : void {\r\n\r\n    if (zombie.flags.dead) {\r\n      if (!zombie.visible)\r\n        return;\r\n      \r\n      zombie.alpha -= this.fadeSpeed * timeDiff;\r\n      if (zombie.alpha < 0) {\r\n        zombie.visible = false;\r\n        characterContainer.removeChild(zombie);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    zombie.timer.attack -= timeDiff;\r\n    zombie.timer.scan -= timeDiff;\r\n    \r\n    if (this.model.runeEffects.healthRegen > 0) {\r\n      this.updateZombieRegen(zombie, timeDiff);\r\n    }\r\n\r\n    if (this.detonate) {\r\n      this.detonateZombie(zombie, timeDiff);\r\n    }\r\n    \r\n    if (zombie.flags.burning)\r\n      this.updateBurns(zombie, timeDiff);\r\n\r\n    if ((!zombie.target || zombie.target.flags.dead) && zombie.timer.scan < 0) {\r\n      zombie.state = CreatureState.lookingForTarget;\r\n    }\r\n\r\n    switch(zombie.state) {\r\n\r\n      case CreatureState.lookingForTarget:\r\n\r\n        this.searchClosestTarget(zombie.target ?? zombie);\r\n        if (!zombie.target || zombie.target.flags.dead)\r\n          this.assignRandomTarget(zombie);\r\n        if (zombie.target) {\r\n          zombie.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n\r\n      case CreatureState.movingToTarget: {\r\n        const distanceToHumanTarget = this.fastDistance(zombie.position.x, zombie.position.y, zombie.target.x, zombie.target.y);\r\n\r\n        if (distanceToHumanTarget < this.attackDistance) {\r\n          zombie.state = CreatureState.attackingTarget;\r\n          break;\r\n        }\r\n        if (zombie.timer.attack < 0 && distanceToHumanTarget < this.model.spitDistance) {\r\n          this.bullets.newBullet(zombie, zombie.target, this.model.zombieDamage / 2, true);\r\n          zombie.timer.attack = this.attackSpeed * this.model.runeEffects.attackSpeed;\r\n        }\r\n\r\n        if (distanceToHumanTarget > this.attackDistance * 3 && zombie.timer.scan < 0) {\r\n          this.searchClosestTarget(zombie);\r\n        }\r\n        this.updateZombieSpeed(zombie, timeDiff);\r\n\r\n        break;\r\n      }\r\n      case CreatureState.attackingTarget: {\r\n        const distanceToTarget = this.fastDistance(zombie.position.x, zombie.position.y, zombie.target.x, zombie.target.y);\r\n        if (distanceToTarget < this.attackDistance) {\r\n          zombie.scale.x = zombie.target.x > zombie.x ? zombie.scaling : -zombie.scaling;\r\n          if (zombie.timer.attack < 0) {\r\n            this.humans.damageHuman(zombie.target, this.calculateDamage(zombie));\r\n            if (zombie.flags.dog) {\r\n              zombie.target.timer.dogStun = 1;\r\n            }\r\n            if (Math.random() < this.model.infectedBiteChance) {\r\n              this.inflictPlague(zombie.target);\r\n            }\r\n            zombie.timer.attack = this.attackSpeed * this.model.runeEffects.attackSpeed;\r\n            if (zombie.flags.burning) {\r\n              zombie.timer.attack *= (1 / this.model.burningSpeedMod);\r\n            }\r\n          }\r\n          if (distanceToTarget > this.attackDistance / 2) {\r\n            this.updateZombieSpeed(zombie, timeDiff);\r\n          }\r\n        } else {\r\n          zombie.state = CreatureState.movingToTarget;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateZombieRegen(zombie : Creature, timeDiff : number) : void {\r\n    zombie.regenTimer -= timeDiff;\r\n\r\n    if (zombie.regenTimer < 0) {\r\n      zombie.regenTimer = 5;\r\n      if (zombie.health < zombie.maxHealth) {\r\n        zombie.health += zombie.maxHealth * this.model.runeEffects.healthRegen;\r\n        if (zombie.health > zombie.maxHealth) {\r\n          zombie.health = zombie.maxHealth;\r\n        }\r\n        zombie.speedMultiplier = Math.max(Math.min(1, zombie.health / zombie.maxHealth), 0.4);\r\n      }\r\n    }\r\n  }\r\n\r\n  healZombie(zombie : Creature, healingDone : number) : void {\r\n    if (zombie.health < zombie.maxHealth) {\r\n      zombie.health += healingDone;\r\n      this.exclamations.newHealing(zombie);\r\n      if (zombie.health > zombie.maxHealth) {\r\n        zombie.health = zombie.maxHealth;\r\n      }\r\n      zombie.speedMultiplier = Math.max(Math.min(1, zombie.health / zombie.maxHealth), 0.4);\r\n    }\r\n  }\r\n\r\n  calculateDamage(zombie : Zombie) : number {\r\n    let damage = this.model.zombieDamage * zombie.mod;\r\n    if (this.model.runeEffects.critChance > 0 && Math.random() < this.model.runeEffects.critChance) {\r\n      damage *= this.model.runeEffects.critDamage;\r\n    }\r\n    return damage;\r\n  }\r\n\r\n  inflictPlague(human : Human) : void {\r\n    if (!human.flags.infected) {\r\n      this.exclamations.newPoison(human);\r\n      human.plagueDamage = (this.model.zombieDamage / 2) + this.model.plagueDamageMod;\r\n      human.plagueTicks = 5;\r\n    } else {\r\n      human.plagueDamage += (this.model.zombieDamage / 2) + this.model.plagueDamageMod;\r\n      human.plagueTicks += 5;\r\n    }\r\n    human.flags.infected = true;\r\n  }\r\n\r\n  updateBurns(zombie : Creature, timeDiff : number) : void {\r\n    zombie.timer.burnTick -= timeDiff;\r\n    zombie.timer.smoke -= timeDiff;\r\n\r\n    if (zombie.timer.smoke < 0) {\r\n      this.smoke.newFireSmoke(zombie.x, zombie.y - 14);\r\n      zombie.timer.smoke = this.smokeTimer;\r\n    }\r\n\r\n    if (zombie.timer.burnTick < 0) {\r\n      this.damageZombie(zombie, zombie.burnDamage, null);\r\n      zombie.timer.burnTick = this.burnTickTimer;\r\n      this.exclamations.newFire(zombie);\r\n    }\r\n  }\r\n\r\n  searchClosestTarget(zombie : Creature | Human) : void {\r\n    if (zombie.timer.scan > 0)\r\n      return;\r\n\r\n    zombie.timer.scan = this.scanTime * Math.random();\r\n    let distanceToTarget = 300;\r\n\r\n    if (this.model.isBossStage(this.model.level) && Math.random() > 0.3) {\r\n      for (let i = 0; i < this.graveyardAttackers.length; i++) {\r\n        if (Math.abs(this.graveyardAttackers[i].x - zombie.x) < distanceToTarget) {\r\n          if (Math.abs(this.graveyardAttackers[i].y - zombie.y) < distanceToTarget) {\r\n            const distanceToHuman = this.fastDistance(zombie.x, zombie.y, this.graveyardAttackers[i].x, this.graveyardAttackers[i].y);\r\n            if (distanceToHuman < distanceToTarget) {\r\n              zombie.target = this.graveyardAttackers[i];\r\n              distanceToTarget = distanceToHuman;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (distanceToTarget == 300) {\r\n      distanceToTarget = 10000;\r\n      for (let i = 0; i < this.aliveHumans.length; i++) {\r\n        if (Math.abs(this.aliveHumans[i].x - zombie.x) < distanceToTarget) {\r\n          if (Math.abs(this.aliveHumans[i].y - zombie.y) < distanceToTarget) {\r\n            const distanceToHuman = this.fastDistance(zombie.x, zombie.y, this.aliveHumans[i].x, this.aliveHumans[i].y);\r\n            if (distanceToHuman < distanceToTarget) {\r\n              zombie.target = this.aliveHumans[i];\r\n              distanceToTarget = distanceToHuman;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  assignRandomTarget(zombie : Creature) : void {\r\n    if (this.aliveHumans.length == 0)\r\n      return;\r\n      \r\n    const building = this.map.findBuilding(zombie);\r\n    if (building && this.map.isInsidePoi(zombie.x, zombie.y, building, 0)) {\r\n      for (let i = 0; i < this.aliveHumans.length; i++) {\r\n        if (this.map.isInsidePoi(this.aliveHumans[i].x, this.aliveHumans[i].y, building, 0)) {\r\n          zombie.target = this.aliveHumans[i];\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    zombie.target = getRandomElementFromArray(this.aliveHumans, Math.random());\r\n  }\r\n\r\n  dotProduct(x : number, y : number) : number {\r\n    return x * x + y * y;\r\n  }\r\n\r\n  updateZombieSpeed(zombie : Zombie, timeDiff : number) : void {\r\n\r\n    if (zombie.timer.dogStun && zombie.timer.dogStun > 0) {\r\n      zombie.timer.dogStun -= timeDiff;\r\n      return;\r\n    }\r\n\r\n    if (!zombie.timer.target || !zombie.targetVector) {\r\n      zombie.timer.target = 0;\r\n    }\r\n    zombie.timer.target-=timeDiff;\r\n    if (zombie.timer.target <= 0) {\r\n      zombie.targetVector = this.map.howDoIGetToMyTarget(zombie, zombie.target);\r\n      zombie.timer.target = this.reactionTime;\r\n    }\r\n    \r\n    if (this.model.gameSpeed > 1 || zombie.flags.dog) {\r\n      const dogSpeed = zombie.flags.dog ? 1.5 : 1;\r\n      const zombieMaxSpeed = Math.max(this.maxSpeed * zombie.speedMultiplier * dogSpeed, 8);\r\n      zombie.xSpeed = zombie.targetVector.x * zombieMaxSpeed;\r\n      zombie.ySpeed = zombie.targetVector.y * zombieMaxSpeed;\r\n    } else {\r\n      const factor = this.maxSpeed * 5 * timeDiff;\r\n\r\n      zombie.xSpeed += zombie.targetVector.x * factor;\r\n      zombie.ySpeed += zombie.targetVector.y * factor;\r\n    \r\n      const speedMagnitudeSq = this.dotProduct(zombie.xSpeed, zombie.ySpeed);\r\n      const zombieMaxSpeedSq = Math.pow(Math.max(this.maxSpeed * zombie.speedMultiplier, 8),2);\r\n      if (speedMagnitudeSq > zombieMaxSpeedSq) {\r\n        zombie.xSpeed *= zombieMaxSpeedSq / speedMagnitudeSq;\r\n        zombie.ySpeed *= zombieMaxSpeedSq / speedMagnitudeSq;\r\n      }\r\n    }\r\n\r\n    let newPosition = {x:zombie.position.x + zombie.xSpeed * timeDiff, y:zombie.position.y + zombie.ySpeed * timeDiff};\r\n\r\n    zombie.turnTimer -= timeDiff;\r\n\r\n    if (zombie.turnTimer < 0) {\r\n      zombie.turnTimer = 0.5;\r\n      if (!this.isSpaceToMove(zombie, newPosition.x, newPosition.y)) {\r\n        if (Math.random() > 0.5) {\r\n          const newSpeed = {x:-zombie.ySpeed/2 + zombie.xSpeed/2, y:zombie.xSpeed/2 + zombie.ySpeed/2}; // 45 degrees\r\n          zombie.xSpeed = newSpeed.x;\r\n          zombie.ySpeed = newSpeed.y;\r\n        } else {\r\n          const newSpeed = {x:zombie.ySpeed/2 + zombie.xSpeed/2, y:-zombie.xSpeed/2 + zombie.ySpeed/2}; // 45 degrees\r\n          zombie.xSpeed = newSpeed.x;\r\n          zombie.ySpeed = newSpeed.y;\r\n        }\r\n        newPosition = {x:zombie.position.x + zombie.xSpeed * timeDiff, y:zombie.position.y + zombie.ySpeed * timeDiff};\r\n      }\r\n    }\r\n\r\n    const collision = this.map.checkCollisions(zombie.position, newPosition);\r\n    if (collision) {\r\n      if (collision.x) {\r\n        zombie.xSpeed = 0;\r\n      }\r\n      if (collision.y) {\r\n        zombie.ySpeed = 0;\r\n      }\r\n      newPosition = {x:zombie.position.x + zombie.xSpeed * timeDiff, y:zombie.position.y + zombie.ySpeed * timeDiff};\r\n      if (collision.x) {\r\n        newPosition.x = collision.validX;\r\n      }\r\n      if (collision.y) {\r\n        newPosition.y = collision.validY;\r\n      }\r\n    }\r\n    zombie.position.set(newPosition.x, newPosition.y);\r\n    zombie.zIndex = zombie.position.y;\r\n    zombie.scale.x = zombie.xSpeed > 0 ? zombie.scaling : -zombie.scaling;\r\n  }\r\n\r\n  spaceNeeded = 3;\r\n\r\n  isSpaceToMove(zombie : Zombie, x : number, y : number) : boolean {\r\n    const neighbours = this.partitionGetNeighbours(zombie);\r\n    for (let i=0; i < neighbours.length; i++) {\r\n      if (neighbours[i].health >= zombie.health && neighbours[i].zombieId != zombie.zombieId && Math.abs(neighbours[i].x - x) < this.spaceNeeded) {\r\n        if (Math.abs(neighbours[i].y - y) < this.spaceNeeded && Math.abs(neighbours[i].x - x) < this.spaceNeeded) {\r\n          return this.fastDistance(x, y, neighbours[i].x, neighbours[i].y) > this.fastDistance(zombie.x, zombie.y, neighbours[i].x, neighbours[i].y);\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(115);\n"],"sourceRoot":""}